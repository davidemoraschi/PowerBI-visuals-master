var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(b) {
            function c(b) {
                return void 0 === b && (b = new a.DataColorPalette()), {
                    titleText: {
                        color: {
                            value: "rgba(51,51,51,1)"
                        }
                    },
                    subTitleText: {
                        color: {
                            value: "rgba(145,145,145,1)"
                        }
                    },
                    colorPalette: {
                        dataColors: b
                    },
                    labelText: {
                        color: {
                            value: "rgba(51,51,51,1)"
                        },
                        fontSize: "11px"
                    },
                    isHighContrast: !1
                };
            }
            b.create = c;
        }(b = a.visualStyles || (a.visualStyles = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            a.MinervaAnimationDuration = 250;
        }(b = a.AnimatorCommon || (a.AnimatorCommon = {}));
        var c = function() {
            function a() {}
            return a.prototype.animate = function(a) {
                return null;
            }, a;
        }();
        a.NullAnimator = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {
                this.animationDuration = a.AnimatorCommon.MinervaAnimationDuration;
            }
            return b.prototype.animate = function(a) {
                var b = {
                    failed: !0,
                    shapes: null,
                    dataLabels: null
                }, c = a.viewModel, d = this.previousViewModel;
                return d && (c.hasHighlights && !d.hasHighlights ? b = this.animateNormalToHighlighted(a) : c.hasHighlights && d.hasHighlights ? b = this.animateHighlightedToHighlighted(a) : !c.hasHighlights && d.hasHighlights && (b = this.animateHighlightedToNormal(a))), 
                this.previousViewModel = c, b;
            }, b.prototype.animateNormalToHighlighted = function(b) {
                var c = b.viewModel, d = b.itemCS, e = b.series.selectAll(d.selector), f = e.data(function(a) {
                    return a.data;
                }, function(a) {
                    return a.key;
                }), g = c.hasHighlights;
                f.enter().append("rect").attr("class", function(a) {
                    return d["class"].concat(a.highlight ? " highlight" : "");
                }).attr(b.layout.shapeLayoutWithoutHighlights), f.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, !1, g);
                }).transition().duration(this.animationDuration).attr(b.layout.shapeLayout), f.exit().remove();
                var h = this.animateDefaultDataLabels(b);
                return {
                    failed: !1,
                    shapes: f,
                    dataLabels: h
                };
            }, b.prototype.animateHighlightedToHighlighted = function(a) {
                var b = this.animateDefaultShapes(a.viewModel, a.series, a.layout, a.itemCS), c = this.animateDefaultDataLabels(a);
                return {
                    failed: !1,
                    shapes: b,
                    dataLabels: c
                };
            }, b.prototype.animateHighlightedToNormal = function(b) {
                var c = b.itemCS, d = b.series.selectAll(c.selector), e = !1, f = d.data(function(a) {
                    return a.data;
                }, function(a) {
                    return a.key;
                }), g = b.interactivityService && b.interactivityService.hasSelection();
                f.enter().append("rect").attr("class", function(a) {
                    return c["class"].concat(a.highlight ? " highlight" : "");
                }), f.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, b.selected, !b.selected);
                }).transition().duration(this.animationDuration).attr(b.layout.shapeLayout), f.exit().transition().duration(this.animationDuration).attr(g ? b.layout.zeroShapeLayout : b.layout.shapeLayoutWithoutHighlights).each("end", function() {
                    e || (f.style("fill-opacity", function(b) {
                        return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, g, !1);
                    }), e = !0);
                }).remove();
                var h = this.animateDefaultDataLabels(b);
                return {
                    failed: !1,
                    shapes: f,
                    dataLabels: h
                };
            }, b.prototype.animateDefaultShapes = function(b, c, d, e) {
                var f = c.selectAll(e.selector), g = f.data(function(a) {
                    return a.data;
                }, function(a) {
                    return a.key;
                });
                return g.enter().append("rect").attr("class", function(a) {
                    return e["class"].concat(a.highlight ? " highlight" : "");
                }), g.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, c.highlight, !1, b.hasHighlights);
                }).transition().duration(this.animationDuration).attr(d.shapeLayout), g.exit().remove(), 
                g;
            }, b.prototype.animateDefaultDataLabels = function(b) {
                var c;
                return b.viewModel.labelSettings.show ? c = a.ColumnUtil.drawDefaultLabels(b.series, b.labelGraphicsContext, b.labelLayout, b.viewPort, !0, this.animationDuration) : a.dataLabelUtils.cleanDataLabels(b.labelGraphicsContext), 
                c;
            }, b;
        }();
        a.WebColumnChartAnimator = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {
                this.animationDuration = a.AnimatorCommon.MinervaAnimationDuration;
            }
            return b.prototype.animate = function(a) {
                var b = {
                    failed: !0,
                    shapes: null,
                    highlightShapes: null
                }, c = a.viewModel, d = this.previousViewModel;
                return d && (c.hasHighlights && !d.hasHighlights ? b = this.animateNormalToHighlighted(a) : c.hasHighlights && d.hasHighlights ? b = this.animateHighlightedToHighlighted(a) : !c.hasHighlights && d.hasHighlights && (b = this.animateHighlightedToNormal(a))), 
                this.previousViewModel = c, b;
            }, b.prototype.animateNormalToHighlighted = function(b) {
                var c = this.animateDefaultShapes(b), d = b.graphicsContext.select(".slices").selectAll("path.slice-highlight").data(b.viewModel.dataPoints.filter(function(a) {
                    return null != a.data.highlightRatio;
                }), function(a) {
                    return a.data.identity.getKey();
                });
                return d.enter().insert("path").classed("slice-highlight", !0).each(function(a) {
                    this._current = a;
                }), d.style("fill", function(a) {
                    return a.data.color ? a.data.color : b.colors.getColor(a.data.identity.getKey()).value;
                }).style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.data.selected, !0, !1, b.viewModel.hasHighlights);
                }).attr(b.layout.shapeLayout).transition().duration(this.animationDuration).attr(b.layout.highlightShapeLayout), 
                d.exit().remove(), a.DonutChart.drawDefaultCategoryLabels(b.graphicsContext, b.viewModel, b.layout, b.sliceWidthRatio, b.radius, b.viewport), 
                {
                    failed: !1,
                    shapes: c,
                    highlightShapes: d
                };
            }, b.prototype.animateHighlightedToHighlighted = function(b) {
                var c = this.animateDefaultShapes(b), d = this.animateDefaultHighlightShapes(b);
                return a.DonutChart.drawDefaultCategoryLabels(b.graphicsContext, b.viewModel, b.layout, b.sliceWidthRatio, b.radius, b.viewport), 
                {
                    failed: !1,
                    shapes: c,
                    highlightShapes: d
                };
            }, b.prototype.animateHighlightedToNormal = function(b) {
                var c = b.interactivityService && b.interactivityService.hasSelection(), d = !1, e = b.graphicsContext.select(".slices").selectAll("path.slice").data(b.viewModel.dataPoints, function(a) {
                    return a.data.identity.getKey();
                });
                e.enter().insert("path").classed("slice", !0).each(function(a) {
                    this._current = a;
                }), e.style("fill", function(a) {
                    return a.data.color ? a.data.color : b.colors.getColor(a.data.identity.getKey()).value;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.data.selected, !1, b.data.selected, !b.data.selected);
                }).transition().duration(this.animationDuration).attr(b.layout.shapeLayout), e.exit().remove();
                var f = b.graphicsContext.select(".slices").selectAll("path.slice-highlight").data(b.viewModel.dataPoints.filter(function(a) {
                    return null != a.data.highlightRatio;
                }), function(a) {
                    return a.data.identity.getKey();
                });
                return f.enter().insert("path").classed("slice-highlight", !0).each(function(a) {
                    this._current = a;
                }), f.style("fill", function(a) {
                    return a.data.color ? a.data.color : b.colors.getColor(a.data.identity.getKey()).value;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(!1, !0, !1, !0);
                }).transition().duration(this.animationDuration).attr(c ? b.layout.zeroShapeLayout : b.layout.shapeLayout).each("end", function(b) {
                    d || (e.style("fill-opacity", function(b) {
                        return a.ColumnUtil.getFillOpacity(b.data.selected, !1, c, !1);
                    }), f.remove(), d = !0);
                }), f.exit().remove(), a.DonutChart.drawDefaultCategoryLabels(b.graphicsContext, b.viewModel, b.layout, b.sliceWidthRatio, b.radius, b.viewport), 
                {
                    failed: !1,
                    shapes: e,
                    highlightShapes: f
                };
            }, b.prototype.animateDefaultShapes = function(b) {
                var c = b.graphicsContext.select(".slices").selectAll("path.slice").data(b.viewModel.dataPoints, function(a) {
                    return a.data.identity.getKey();
                });
                return c.enter().insert("path").classed("slice", !0).each(function(a) {
                    this._current = a;
                }), c.style("fill", function(a) {
                    return a.data.color ? a.data.color : b.colors.getColor(a.data.identity.getKey()).value;
                }).style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.data.selected, !1, !1, b.viewModel.hasHighlights);
                }).transition().duration(this.animationDuration).attr(b.layout.shapeLayout), c.exit().remove(), 
                c;
            }, b.prototype.animateDefaultHighlightShapes = function(b) {
                var c = b.graphicsContext.select(".slices").selectAll("path.slice-highlight").data(b.viewModel.dataPoints.filter(function(a) {
                    return null != a.data.highlightRatio;
                }), function(a) {
                    return a.data.identity.getKey();
                });
                return c.enter().insert("path").classed("slice-highlight", !0).each(function(a) {
                    this._current = a;
                }), c.style("fill", function(a) {
                    return a.data.color ? a.data.color : b.colors.getColor(a.data.identity.getKey()).value;
                }).style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.data.selected, !0, !1, b.viewModel.hasHighlights);
                }).transition().duration(this.animationDuration).attr(b.layout.highlightShapeLayout), 
                c.exit().remove(), c;
            }, b;
        }();
        a.WebDonutChartAnimator = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {
                this.animationDuration = a.AnimatorCommon.MinervaAnimationDuration;
            }
            return b.prototype.animate = function(a) {
                var b = {
                    failed: !0,
                    shapes: null,
                    dataLabels: null
                }, c = a.viewModel, d = this.previousViewModel;
                return d && (c.hasHighlights && !d.hasHighlights ? b = this.animateNormalToHighlighted(a) : c.hasHighlights && d.hasHighlights ? b = this.animateHighlightedToHighlighted(a) : !c.hasHighlights && d.hasHighlights && (b = this.animateHighlightedToNormal(a))), 
                this.previousViewModel = c, b;
            }, b.prototype.animateNormalToHighlighted = function(b) {
                var c = b.viewModel, d = b.layout, e = !0, f = !1;
                this.animateDefaultAxis(b.axisGraphicsContext, b.axisOptions);
                var g = b.shapeGraphicsContext.selectAll("rect").data(c.slices, function(a) {
                    return a.key;
                });
                g.enter().append("rect").attr("class", function(a) {
                    return a.highlight ? "funnelBar highlight" : "funnelBar";
                }).attr(d.shapeLayoutWithoutHighlights), g.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, f, e);
                }).transition().duration(this.animationDuration).attr(d.shapeLayout), g.exit().remove();
                var h = this.animateDefaultDataLabels(b);
                return {
                    failed: !1,
                    shapes: g,
                    dataLabels: h
                };
            }, b.prototype.animateHighlightedToHighlighted = function(a) {
                var b = a.viewModel, c = a.layout;
                this.animateDefaultAxis(a.axisGraphicsContext, a.axisOptions);
                var d = this.animateDefaultShapes(b, b.slices, a.shapeGraphicsContext, c), e = this.animateDefaultDataLabels(a);
                return {
                    failed: !1,
                    shapes: d,
                    dataLabels: e
                };
            }, b.prototype.animateHighlightedToNormal = function(b) {
                var c = b.viewModel, d = b.layout, e = !0, f = b.interactivityService ? b.interactivityService.hasSelection() : !1;
                this.animateDefaultAxis(b.axisGraphicsContext, b.axisOptions);
                var g = b.shapeGraphicsContext.selectAll("rect").data(c.slices, function(a) {
                    return a.key;
                }), h = !1;
                g.enter().append("rect").attr("class", function(a) {
                    return a.highlight ? "funnelBar highlight" : "funnelBar";
                }), g.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, !1, e);
                }).transition().duration(this.animationDuration).attr(d.shapeLayoutWithoutHighlights);
                var i = g.exit();
                i.transition().duration(this.animationDuration).attr(f ? d.zeroShapeLayout : d.shapeLayoutWithoutHighlights).each("end", function(b, c) {
                    h || (g.style("fill-opacity", function(b) {
                        return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, f, !1);
                    }), h = !0);
                }).remove();
                var j = this.animateDefaultDataLabels(b);
                return {
                    failed: !1,
                    shapes: g,
                    dataLabels: j
                };
            }, b.prototype.animateDefaultAxis = function(b, c) {
                var d = d3.scale.ordinal().domain(c.categoryLabels).rangeBands([ c.rangeStart, c.rangeEnd ], c.barToSpaceRatio), e = d3.svg.axis().scale(d).orient("right");
                b.classed("axis", !0).transition().duration(this.animationDuration).attr("transform", a.SVGUtil.translate(0, c.margin.top)).call(e);
            }, b.prototype.animateDefaultShapes = function(b, c, d, e) {
                var f = b.hasHighlights, g = d.selectAll("rect").data(c, function(a) {
                    return a.key;
                });
                return g.enter().append("rect").attr("class", function(a) {
                    return a.highlight ? "funnelBar highlight" : "funnelBar";
                }), g.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return function(b) {
                        return a.ColumnUtil.getFillOpacity(b.selected, b.highlight, !1, f);
                    };
                }).transition().duration(this.animationDuration).attr(e.shapeLayout), g.exit().remove(), 
                g;
            }, b.prototype.animateDefaultDataLabels = function(b) {
                var c;
                return b.viewModel.dataLabelsSettings.show ? c = a.dataLabelUtils.drawDefaultLabelsForFunnelChart(b.slicesWithoutHighlights, b.labelGraphicsContext, b.labelLayout, !0, this.animationDuration) : a.dataLabelUtils.cleanDataLabels(b.labelGraphicsContext), 
                c;
            }, b;
        }();
        a.WebFunnelAnimator = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {
                this.animationDuration = a.AnimatorCommon.MinervaAnimationDuration;
            }
            return b.prototype.animate = function(a) {
                var b = {
                    failed: !0,
                    shapes: null,
                    highlightShapes: null,
                    labels: null
                }, c = a.viewModel, d = this.previousViewModel;
                return d && (c.hasHighlights && !d.hasHighlights ? b = this.animateNormalToHighlighted(a) : c.hasHighlights && d.hasHighlights ? b = this.animateHighlightedToHighlighted(a) : !c.hasHighlights && d.hasHighlights && (b = this.animateHighlightedToNormal(a))), 
                this.previousViewModel = c, b;
            }, b.prototype.animateNormalToHighlighted = function(b) {
                var c = !1, d = !0, e = this.animateDefaultShapes(b.shapeGraphicsContext, b.nodes, c, d), f = b.shapeGraphicsContext.selectAll("." + a.Treemap.HighlightNodeClassName).data(b.highlightNodes, function(a) {
                    return a.key + "highlight";
                });
                f.enter().append("rect").attr("class", a.Treemap.layout.highlightShapeClass).attr(a.Treemap.layout.shapeLayout), 
                f.style("fill", function(b) {
                    return a.Treemap.getFill(b, !0);
                }).style("fill-opacity", function(b) {
                    return a.Treemap.getFillOpacity(b, c, d, !0);
                }).transition().duration(this.animationDuration).attr(a.Treemap.layout.highlightShapeLayout), 
                f.exit().remove();
                var g = b.viewModel.dataLabelsSettings.show ? b.labeledNodes : [], h = this.animateDefaultLabels(b.labelGraphicsContext, g);
                return {
                    failed: !1,
                    labels: h,
                    shapes: e,
                    highlightShapes: f
                };
            }, b.prototype.animateHighlightedToHighlighted = function(b) {
                var c = !1, d = !0, e = this.animateDefaultShapes(b.shapeGraphicsContext, b.nodes, c, d);
                b.shapeGraphicsContext.selectAll("." + a.Treemap.HighlightNodeClassName).data(b.highlightNodes, function(a) {
                    return a.key + "highlight";
                });
                var f = this.animateDefaultHighlightShapes(b.shapeGraphicsContext, b.highlightNodes, c, d), g = b.viewModel.dataLabelsSettings.show ? b.labeledNodes : [], h = this.animateDefaultLabels(b.labelGraphicsContext, g);
                return {
                    failed: !1,
                    labels: h,
                    shapes: e,
                    highlightShapes: f
                };
            }, b.prototype.animateHighlightedToNormal = function(b) {
                var c = b.interactivityService ? b.interactivityService.hasSelection() : !1, d = b.shapeGraphicsContext.selectAll("." + a.Treemap.TreemapNodeClassName).data(b.nodes, function(a) {
                    return a.key;
                });
                d.enter().append("rect").attr("class", a.Treemap.layout.shapeClass), d.transition().duration(this.animationDuration).style("fill", function(b) {
                    return a.Treemap.getFill(b, !1);
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, !1, b.selected, !b.selected);
                }).attr(a.Treemap.layout.shapeLayout), d.exit().remove();
                var e = b.shapeGraphicsContext.selectAll("." + a.Treemap.HighlightNodeClassName).data(b.nodes, function(a) {
                    return a.key + "highlight";
                });
                e.enter().append("rect").attr("class", a.Treemap.layout.highlightShapeClass), e.style("fill", function(b) {
                    return a.Treemap.getFill(b, !0);
                }).style("fill-opacity", function(b) {
                    return a.ColumnUtil.getFillOpacity(b.selected, !0, b.selected, !b.selected);
                }).transition().duration(this.animationDuration).attr(c ? a.Treemap.layout.zeroShapeLayout : a.Treemap.layout.shapeLayout).each("end", function(b, f) {
                    0 === f && (d.style("fill-opacity", function(b) {
                        return a.ColumnUtil.getFillOpacity(b.selected, !1, c, !1);
                    }), e.remove());
                }), e.exit().remove();
                var f = b.viewModel.dataLabelsSettings.show ? b.labeledNodes : [], g = this.animateDefaultLabels(b.labelGraphicsContext, f);
                return {
                    failed: !1,
                    labels: g,
                    shapes: d,
                    highlightShapes: e
                };
            }, b.prototype.animateDefaultShapes = function(b, c, d, e) {
                var f = !1, g = b.selectAll("." + a.Treemap.TreemapNodeClassName).data(c, function(a) {
                    return a.key;
                });
                return g.enter().append("rect").attr("class", a.Treemap.layout.shapeClass), g.transition().duration(this.animationDuration).style("fill", function(b) {
                    return a.Treemap.getFill(b, f);
                }).style("fill-opacity", function(b) {
                    return a.Treemap.getFillOpacity(b, d, e, f);
                }).attr(a.Treemap.layout.shapeLayout), g.exit().remove(), g;
            }, b.prototype.animateDefaultHighlightShapes = function(b, c, d, e) {
                var f = !0, g = b.selectAll("." + a.Treemap.HighlightNodeClassName).data(c, function(a) {
                    return a.key + "highlight";
                });
                return g.enter().append("rect").attr("class", a.Treemap.layout.highlightShapeClass), 
                g.transition().duration(this.animationDuration).style("fill", function(b) {
                    return a.Treemap.getFill(b, f);
                }).style("fill-opacity", function(b) {
                    return a.Treemap.getFillOpacity(b, d, e, f);
                }).attr(a.Treemap.layout.highlightShapeLayout), g.exit().remove(), g;
            }, b.prototype.animateDefaultLabels = function(b, c) {
                var d = b.selectAll("text").data(c, function(a) {
                    return a.key;
                });
                return d.enter().append("text").attr("class", a.Treemap.layout.labelClass), d.transition().duration(this.animationDuration).attr(a.Treemap.layout.labelLayout).text(a.Treemap.layout.labelText), 
                d.exit().remove(), d;
            }, b;
        }();
        a.WebTreemapAnimator = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c, d, e) {
                c.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, c.highlight, !c.highlight && b, !c.selected && e);
                }), a.dataLabelUtils.setHighlightedLabelsOpacity(d, b, e);
            }, b;
        }();
        a.ColumnChartWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c) {
                c.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, c.highlight, b, !1);
                });
            }, b;
        }();
        a.DataDotChartWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b(a) {
                this.allowDrilldown = a.allowDrilldown, this.visual = a.visual, this.svg = a.clearCatcher, 
                this.isDrilled = !1;
            }
            return b.prototype.select = function(b, c, d, e, f) {
                if (b && this.allowDrilldown) {
                    var g = this.isDrilled ? void 0 : f;
                    this.visual.setDrilldown(g), this.isDrilled = !this.isDrilled;
                } else c.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.data.selected, d, !d && b, !c.data.selected && e);
                });
            }, b.prototype.mouseOver = function(a) {
                this.setDataLabelStyle(a, !1);
            }, b.prototype.mouseOut = function(a) {
                this.setDataLabelStyle(a, !0);
            }, b.prototype.setDataLabelStyle = function(b, c) {
                var d = this.svg.selectAll("text").filter(function(a) {
                    return a.data.identity.getKey() === b.identity.getKey();
                }), e = this.svg.selectAll("polyline").filter(function(a) {
                    return a.data.identity.getKey() === b.identity.getKey();
                });
                d.style("opacity", function(a) {
                    return c && a.data.isLabelOverlapping ? 0 : 1;
                }), e.style("opacity", function(b) {
                    return c && b.data.isLabelOverlapping ? 0 : a.DonutChart.PolylineOpacity;
                });
            }, b;
        }();
        a.DonutChartWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c, d) {
                c.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, c.highlight, !c.highlight && b, !c.selected && d);
                });
            }, b;
        }();
        a.FunnelWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c, d, e) {
                c.style("stroke-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                }), d.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                }), e && e.style("fill-opacity", function(c) {
                    return b && !c.selected ? a.LineChart.DimmedAreaFillOpacity : a.LineChart.AreaFillOpacity;
                });
            }, b;
        }();
        a.LineChartWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c, d, e) {
                c && c.style({
                    "fill-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                    },
                    "stroke-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                    }
                }), d && d.style({
                    "fill-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.data.selected, !1, b, !1);
                    },
                    "stroke-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.data.selected, !1, b, !1);
                    }
                }), e && e.style({
                    "fill-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                    },
                    "stroke-opacity": function(c) {
                        return a.ColumnUtil.getFillOpacity(c.selected, !1, b, !1);
                    }
                });
            }, b;
        }();
        a.MapBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        !function(a) {
            a[a.Drag = 0] = "Drag", a[a.DragEnd = 1] = "DragEnd";
        }(a.DragType || (a.DragType = {}));
        var b = (a.DragType, function() {
            function b() {}
            return b.prototype.select = function(b, c) {
                c.style("fill-opacity", function(c) {
                    return null != c.size ? a.ScatterChart.getBubbleOpacity(c, b) : 0;
                }), c.style("stroke-opacity", function(c) {
                    return a.ScatterChart.getBubbleOpacity(c, b);
                });
            }, b;
        }());
        a.ScatterChartWebBehavior = b;
        var c = function() {
            function b() {}
            return b.prototype.setOptions = function(a) {
                this.data = a.data, this.mainGraphicsContext = a.mainContext, this.xAxisProperties = a.xAxisProperties, 
                this.yAxisProperties = a.yAxisProperties, this.host = a.host;
            }, b.prototype.select = function(a, b, c, d) {
                this.selectDotByIndex(d);
            }, b.prototype.selectRoot = function() {
                var a = jsCommon.PerformanceUtil.create("selectRoot");
                this.onClick(), a.end();
            }, b.prototype.drag = function(a) {
                switch (a) {
                  case 0:
                    this.onDrag();
                    break;

                  case 1:
                    this.onClick();
                }
            }, b.prototype.onDrag = function() {
                var a = this.getMouseCoordinates();
                this.moveCrosshairToXY(a.x, a.y);
                var b = this.findClosestDotIndex(a.x, a.y);
                this.selectDot(b), this.updateLegend(b);
            }, b.prototype.onClick = function() {
                var a = this.getMouseCoordinates(), b = this.findClosestDotIndex(a.x, a.y);
                this.selectDotByIndex(b);
            }, b.prototype.getMouseCoordinates = function() {
                var a = this.mainGraphicsContext, b = 0, c = parseInt(a.attr("height"), 10);
                c = c || 0;
                try {
                    var d = d3.mouse(a.node());
                    b = d[0], c = d[1];
                } catch (e) {}
                return {
                    x: b,
                    y: c
                };
            }, b.prototype.selectDotByIndex = function(a) {
                this.selectDot(a), this.moveCrosshairToIndexDot(a), this.updateLegend(a);
            }, b.prototype.selectDot = function(a) {
                var c = this, d = this.mainGraphicsContext;
                d.selectAll(b.ScatterChartCircleTagName + b.DotClassSelector).classed({
                    selected: !1,
                    notSelected: !0
                }), d.selectAll(b.ScatterChartCircleTagName + b.DotClassSelector).filter(function(b, d) {
                    var e = c.data.dataPoints, f = e[a];
                    return b.x === f.x && b.y === f.y;
                }).classed({
                    selected: !0,
                    notSelected: !1
                });
            }, b.prototype.moveCrosshairToIndexDot = function(a) {
                var c = this.data.dataPoints, d = this.mainGraphicsContext, e = this.xAxisProperties.scale(c[a].x), f = this.yAxisProperties.scale(c[a].y);
                if (null == this.crosshair) {
                    var g = +d.attr("width"), h = +d.attr("height");
                    this.crosshair = this.drawCrosshair(d, e, f, g, h), this.crosshairHorizontal = this.crosshair.select(b.Horizontal.selector), 
                    this.crosshairVertical = this.crosshair.select(b.Vertical.selector);
                } else this.moveCrosshairToXY(e, f);
            }, b.prototype.moveCrosshairToXY = function(a, b) {
                this.crosshairHorizontal.attr({
                    y1: b,
                    y2: b
                }), this.crosshairVertical.attr({
                    x1: a,
                    x2: a
                });
            }, b.prototype.drawCrosshair = function(a, c, d, e, f) {
                var g = a.append("g");
                return g.classed(b.CrosshairClassName, !0), g.append("line").classed(b.Horizontal["class"], !0).attr({
                    x1: 0,
                    x2: e,
                    y1: d,
                    y2: d
                }), g.append("line").classed(b.Vertical["class"], !0).attr({
                    x1: c,
                    x2: c,
                    y1: f,
                    y2: 0
                }), g;
            }, b.prototype.findClosestDotIndex = function(a, b) {
                var c = -1, d = Number.MAX_VALUE, e = this.data.dataPoints, f = this.xAxisProperties.scale, g = this.yAxisProperties.scale;
                for (var h in e) {
                    var i = e[h], j = f(i.x), k = g(i.y), l = j - a, m = k - b, n = l * l + m * m;
                    d === Number.MAX_VALUE ? (c = h, d = n) : d && d > n && (c = h, d = n);
                }
                return c;
            }, b.prototype.updateLegend = function(a) {
                if (null == this.lastDotIndex || this.lastDotIndex !== a) {
                    var b = this.createLegendDataPoints(a);
                    this.host.updateLegend(b), this.lastDotIndex = a;
                }
            }, b.prototype.createLegendDataPoints = function(b) {
                var c = a.scatterChartProps.general.formatString, d = [], e = this.data, f = e.dataPoints[b], g = a.valueFormatter.format(null), h = g, i = e.legendData, j = i.dataPoints;
                return f.category !== g ? h = f.category : null != f.radius.sizeMeasure ? h = a.valueFormatter.format(f.radius.sizeMeasure.source.groupName) : j.length >= b && j[b].label !== g && (h = j[b].label), 
                null != e.xCol && d.push({
                    category: h,
                    color: f.fill,
                    icon: 0,
                    label: a.valueFormatter.format(this.data.axesLabels.x),
                    measure: a.valueFormatter.format(f.x, a.valueFormatter.getFormatString(e.xCol, c)),
                    iconOnlyOnLabel: !0
                }), void 0 !== e.yCol && null !== e.yCol && d.push({
                    category: h,
                    color: f.fill,
                    icon: 0,
                    label: a.valueFormatter.format(e.axesLabels.y),
                    measure: a.valueFormatter.format(f.y, a.valueFormatter.getFormatString(e.yCol, c)),
                    iconOnlyOnLabel: !0
                }), void 0 !== e.size && null !== e.size && d.push({
                    category: h,
                    color: f.fill,
                    icon: 0,
                    label: a.valueFormatter.format(e.size.displayName),
                    measure: a.valueFormatter.format(f.radius.sizeMeasure.values[f.radius.index], a.valueFormatter.getFormatString(e.size, c)),
                    iconOnlyOnLabel: !0
                }), {
                    dataPoints: d
                };
            }, b.CrosshairClassName = "crosshair", b.ScatterChartCircleTagName = "circle", b.DotClassName = "dot", 
            b.DotClassSelector = "." + b.DotClassName, b.Horizontal = {
                "class": "horizontal",
                selector: ".horizontal"
            }, b.Vertical = {
                "class": "vertical",
                selector: ".vertical"
            }, b;
        }();
        a.ScatterChartMobileBehavior = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b) {
                b.style({
                    color: function(b) {
                        return b.selected ? a.Slicer.DefaultStyleProperties.slicerText.selectionColor : a.Slicer.DefaultStyleProperties.slicerText.color;
                    }
                });
            }, b.prototype.mouseInteractions = function(b) {
                b.style({
                    color: function(b) {
                        return b.mouseOver ? a.Slicer.DefaultStyleProperties.slicerText.hoverColor : b.mouseOut ? b.selected ? a.Slicer.DefaultStyleProperties.slicerText.selectionColor : a.Slicer.DefaultStyleProperties.slicerText.color : void 0;
                    }
                });
            }, b.prototype.clearSlicers = function(b, c) {
                c.selectAll("input").property("checked", !1), b.style("color", a.Slicer.DefaultStyleProperties.slicerText.color);
            }, b;
        }();
        a.SlicerWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a() {}
            return a.prototype.select = function(b, c) {
                b ? c.style({
                    fill: function(b) {
                        return b.selected ? b.color : a.selectedLegendColor;
                    }
                }) : c.style({
                    fill: function(a) {
                        return a.color;
                    }
                });
            }, a.selectedLegendColor = "#A6A6A6", a;
        }();
        a.LegendWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c, d) {
                c.style("fill", function(b) {
                    return a.Treemap.getFill(b, !1);
                }).style("fill-opacity", function(c) {
                    return a.Treemap.getFillOpacity(c, b, !c.selected && d, !1);
                });
            }, b;
        }();
        a.TreemapWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function b() {}
            return b.prototype.select = function(b, c) {
                c.style("fill-opacity", function(c) {
                    return a.ColumnUtil.getFillOpacity(c.selected, c.highlight, b, !1);
                });
            }, b;
        }();
        a.WaterfallChartWebBehavior = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c, d = jsCommon.ArrayExtensions, e = [ 0, 10 ], f = [ new Date(2014, 1, 1).getTime(), new Date(2015, 1, 1).getTime() ];
        !function(c) {
            function g(a) {
                return 250 > a ? 3 : 6;
            }
            function h(a) {
                return 150 > a ? 3 : 6;
            }
            function i(a, b, c, d, e) {
                return isNaN(a) || isNaN(b) ? V : 1 >= d || 1 >= b && a >= -1 ? d : a === b ? e ? 1 : V : j(c) ? d : Math.min(b - a + 1, d);
            }
            function j(a) {
                for (var b = 0, c = a.length; c > b; b++) {
                    var d = a[b];
                    if (d && d.type && !d.type.integer) return !0;
                }
                return !1;
            }
            function k(a, b, c, d) {
                return !d || u(b) ? l(a, b.domain()) : v(c) ? n(a, b.domain()) : m(a, b);
            }
            function l(a, b) {
                var c = [];
                if (0 >= a) return c;
                var d = b.length;
                if (a > d) return b;
                for (var e = 0, f = Math.floor(d / a); d > e; e += f) c.push(b[e]);
                return c;
            }
            function m(a, b) {
                var c = [];
                if (0 === a) return c;
                var d = b;
                return d.ticks ? (c = d.ticks(a), c.length > a && a > 1 && (c = d.ticks(a - 1)), 
                c.length < U && (c = d.ticks(a + 1)), c) : c;
            }
            function n(b, c) {
                var d = [], e = a.DateTimeSequence.calculate(new Date(c[0]), new Date(c[1]), b).sequence;
                return d = e.map(function(a) {
                    return a.getTime();
                }), d = C(d, c[0], c[1]);
            }
            function o(a) {
                return isNaN(a.min) || isNaN(a.max) ? (a.min = e[0], a.max = e[1]) : 0 === a.min && 0 === a.max ? a.max = e[1] : a.min === a.max ? (a.min = a.min < 0 ? 1.2 * a.min : .8 * a.min, 
                a.max = a.max < 0 ? .8 * a.max : 1.2 * a.max) : Math.abs(a.min) < 1e-4 && a.min / (a.max - a.min) < 1e-4 && (a.min = 0), 
                a;
            }
            function p(a, b, c, d) {
                return 0 === g(a - c) || 0 === h(b - d) ? {
                    top: 0,
                    right: c,
                    bottom: d,
                    left: 0
                } : {
                    top: 20,
                    right: 30,
                    bottom: 40,
                    left: 30
                };
            }
            function q(a, b, c, d, e, f, i, j, k, l, m, n, o, p) {
                var q = d.values, r = e.values, s = d.axisType, u = 0, v = 0, w = 0, x = t(s) ? R : S, y = 0;
                if (void 0 !== d.xLabelMaxWidth && (y = Math.max(0, (a.width - d.xLabelMaxWidth * q.length) / 2)), 
                0 !== g(a.width) || 0 !== h(a.height)) {
                    var z;
                    z = l ? W.DefaultRotationWithScrollbar : W.DefaultRotation;
                    for (var A = 0, B = r.length; B > A; A++) j.text = r[A], u = Math.max(u, c(j));
                    if (k) for (var C = k.values, A = 0, B = C.length; B > A; A++) j.text = C[A], v = Math.max(v, c(j));
                    for (var A = 0, B = q.length; B > A; A++) {
                        var D;
                        j.text = q[A];
                        var E = c(j);
                        if (f) D = E * z.sine; else if (D = T, 0 === A) {
                            var F = E / 2 - x - y;
                            u = Math.max(u, F);
                        } else if (A === B - 1) {
                            var F = E / 2;
                            v = Math.max(v, F);
                        }
                        w = Math.max(w, D);
                    }
                }
                if (m) {
                    var G = u;
                    u = v, v = G;
                }
                var H = {
                    xMax: Math.min(i, Math.ceil(w)),
                    yLeft: Math.min(Math.ceil(u), b),
                    yRight: Math.ceil(v)
                };
                return o || (H.yLeft = 0, H.yRight = 0), !p && m && (H.yLeft = 0), p || m || (H.yRight = 0), 
                n || (H.xMax = 0), H;
            }
            function r(a) {
                return a && (a.bool || a.numeric || a.text || a.dateTime);
            }
            function s() {
                return a.ValueType.fromDescriptor({
                    text: !0
                });
            }
            function t(a) {
                return !(!a || !a.text && !a.bool);
            }
            function u(a) {
                return "undefined" == typeof a.invert;
            }
            function v(a) {
                return !(!a || !a.dateTime);
            }
            function w(a, b) {
                return u(a) ? y(a, b) : a.invert(b);
            }
            function x(a) {
                return u(a) ? a.rangeExtent() : a.range();
            }
            function y(a, b) {
                var c, d = a.range(), e = a.rangeBand();
                for (c = 0; b > d[c] + e && d.length - 1 > c; c++) ;
                return a.domain()[c];
            }
            function z(a, b) {
                for (var c = 0, d = a.range(), e = Math.abs(b - d[0]), f = 1; f < d.length; f++) {
                    var g = Math.abs(b - d[f]);
                    e > g && (e = g, c = f);
                }
                return c;
            }
            function A(a, b, c) {
                var d = a(b) - a(c);
                return 0 === d ? 0 : 0 > d ? Math.min(d, -1) : Math.max(d, 1);
            }
            function B(a, b, c, d) {
                var e, f;
                return d && 2 === d.length && (e = d[0], f = d[1]), c && !t(b) ? I(a, e, f, b) : K(a);
            }
            function C(a, b, c) {
                var d = a.filter(function(a) {
                    return a >= b && c >= a;
                });
                return d.length < 2 && (d = [ b, c ]), d;
            }
            function D(b) {
                return b && r(b.type) ? b.type : a.ValueType.fromDescriptor({
                    text: !0
                });
            }
            function E(a) {
                var c = a.pixelSpan, d = a.dataDomain, e = a.metaDataColumn, f = a.formatStringProp, g = a.outerPadding || 0, h = !!a.isCategoryAxis, i = !!a.isScalar, j = !!a.isVertical, l = !!a.useTickIntervalForDisplayUnits, m = a.getValueFn, n = a.categoryThickness, o = b.valueFormatter.getFormatString(e, f), p = this.getCategoryValueType(e), q = this.createScale(a), r = q.scale, s = q.bestTickCount, t = r.domain();
                if (n && i && d && 2 === d.length) {
                    var u = d[1] - d[0], v = t[1] - t[0];
                    u > 0 && v > 0 && (n = n * u / v);
                }
                var w;
                w = i && 1 === s ? [ d[0] ] : k(s, r, p, i);
                var x = G(t, d, p, i, o, s, w, m, l), y = d3.svg.axis().scale(r).tickSize(6, 0).orient(j ? "left" : "bottom").ticks(s).tickValues(w), z = [];
                if (e && (z = H(y, w, x, p, i, m)), !i && n) B = n; else var A = w.length > 1 ? w.length + 1 : w.length, B = A > 1 ? c / A : c;
                return {
                    scale: r,
                    axis: y,
                    formatter: x,
                    values: z,
                    axisType: p,
                    axisLabel: null,
                    isCategoryAxis: h,
                    xLabelMaxWidth: B,
                    categoryThickness: n,
                    outerPadding: g
                };
            }
            function F(d) {
                var f, i = d.pixelSpan, j = d.dataDomain, k = d.metaDataColumn, l = d.outerPadding || 0, m = !!d.isScalar, n = !!d.isVertical, o = d.forcedTickCount, p = d.categoryThickness, q = this.getCategoryValueType(k), r = n ? h(i) : g(i), s = j.slice(), t = r;
                if (null == j || 2 === j.length && null == j[0] && null == j[1]) j = e, q = a.ValueType.fromDescriptor({
                    numeric: !0
                }), f = M(i, j, l, t); else {
                    if (m && j.length > 0) {
                        t = void 0 !== o ? 0 !== r ? o : 0 : c.getBestNumberOfTicks(j[0], j[j.length - 1], [ k ], r, q.dateTime);
                        var u = c.normalizeLinearDomain({
                            min: j[0],
                            max: j[j.length - 1]
                        });
                        s = [ u.min, u.max ];
                    }
                    m && q.numeric && !q.dateTime ? f = M(i, s, l, t) : m && q.dateTime ? f = M(i, s, l, null) : (q.text || q.dateTime || q.numeric || q.bool) && (f = L(i, s, p ? l / p : 0), 
                    t = 0 === r ? 0 : Math.min(s.length, (i - 2 * l) / b.CartesianChart.MinOrdinalRectThickness));
                }
                return n && m && f.range(f.range().reverse()), b.ColumnUtil.normalizeInfinityInScale(f), 
                {
                    scale: f,
                    bestTickCount: t
                };
            }
            function G(a, c, d, e, f, g, h, i, j) {
                void 0 === j && (j = !1);
                var k;
                if (d.dateTime) if (e) {
                    var l = new Date(a[0]), m = new Date(a[1]);
                    1 === g && (l = m = new Date(c[0])), k = b.valueFormatter.create({
                        format: f,
                        value: l,
                        value2: m,
                        tickCount: g
                    });
                } else {
                    var n = i(0, d), o = i(a.length - 1, d);
                    k = b.valueFormatter.create({
                        format: f,
                        value: n,
                        value2: o,
                        tickCount: g
                    });
                } else if (j && e && h.length > 1) {
                    var p = h[h.length - 1] - h[0], q = 0;
                    k = b.valueFormatter.create({
                        format: f,
                        value: p,
                        value2: q,
                        allowFormatBeautification: !0
                    });
                } else k = b.valueFormatter.createDefaultFormatter(f, !0);
                return k;
            }
            function H(a, b, c, d, e, f) {
                var g = [];
                return c ? !f || d.numeric && e ? (a.tickFormat(function(a) {
                    return c.format(a);
                }), g = b.map(function(a) {
                    return c.format(a);
                })) : (a.tickFormat(function(a) {
                    return c.format(f(a, d));
                }), g = b.map(function(a) {
                    return c.format(f(a, d));
                })) : g = b.map(function(a) {
                    return f(a, d);
                }), g;
            }
            function I(a, b, c, d) {
                if (0 === a.length) return d.dateTime ? f : e;
                var g, h, i = d3.min(a, function(a) {
                    return d3.min(a.data, function(a) {
                        return a.categoryValue;
                    });
                }), j = d3.max(a, function(a) {
                    return d3.max(a.data, function(a) {
                        return a.categoryValue;
                    });
                });
                return g = "number" == typeof b ? b : i, h = "number" == typeof c ? c : j, g > h && (g = i, 
                h = j), [ g, h ];
            }
            function J(a, b) {
                if (0 === a.length) return e;
                var c = d3.min(a, function(a) {
                    return d3.min(a.data, function(a) {
                        return a.value;
                    });
                }), d = d3.max(a, function(a) {
                    return d3.max(a.data, function(a) {
                        return a.value;
                    });
                });
                return b ? [ Math.min(c, 0), Math.max(d, 0) ] : [ c, d ];
            }
            function K(a) {
                return d.isUndefinedOrEmpty(a) ? [] : a[0].data.map(function(a) {
                    return a.categoryIndex;
                });
            }
            function L(a, c, d) {
                void 0 === d && (d = 0);
                var e = d3.scale.ordinal().rangeBands([ 0, a ], b.CartesianChart.InnerPaddingRatio, d).domain(c);
                return e;
            }
            function M(a, b, c, d) {
                void 0 === c && (c = 0);
                var e = d3.scale.linear().range([ c, a - c ]).domain([ b[0], b[1] ]);
                return d && e.nice(d), e;
            }
            function N(a) {
                var b = {};
                return a && (b.min = null == a.min ? null == a.minLocal ? d3.min(a.values) : a.minLocal : a.min, 
                b.max = null == a.max ? null == a.maxLocal ? d3.max(a.values) : a.maxLocal : a.max), 
                b;
            }
            function O(a, b) {
                var c = [ b[0], b[1] ];
                return a && 2 === a.length && (null != a[0] && (c[0] = a[0]), null != a[1] && (c[1] = a[1]), 
                c[0] > c[1] && (c = b)), c;
            }
            function P(a, b) {
                return a[0] !== b[0] || a[1] !== b[1];
            }
            function Q(a) {
                return isNaN(a) ? null : a === Number.POSITIVE_INFINITY ? Number.MAX_VALUE : a === Number.NEGATIVE_INFINITY ? -Number.MAX_VALUE : a;
            }
            var R = 25, S = 10, T = 10, U = 2, V = 3;
            c.getRecommendedNumberOfTicksForXAxis = g, c.getRecommendedNumberOfTicksForYAxis = h, 
            c.getBestNumberOfTicks = i, c.hasNonIntegerData = j, c.getRecommendedTickValues = k, 
            c.getRecommendedTickValuesForAnOrdinalRange = l, c.getRecommendedTickValuesForALinearRange = m, 
            c.normalizeLinearDomain = o, c.getMargin = p, c.getTickLabelMargins = q, c.columnDataTypeHasValue = r, 
            c.createOrdinalType = s, c.isOrdinal = t, c.isOrdinalScale = u, c.isDateTime = v, 
            c.invertScale = w, c.extent = x, c.invertOrdinalScale = y, c.getOrdinalScaleClosestDataPointIndex = z, 
            c.diffScaled = A, c.createDomain = B, c.ensureValuesInRange = C, c.getCategoryValueType = D, 
            c.createAxis = E, c.createScale = F, c.formatAxisTickValues = H, c.createValueDomain = J;
            var W;
            !function(a) {
                function b(a, b, c, d) {
                    var e = a.values;
                    if (0 === e.length) return !1;
                    var f = void 0 !== a.xLabelMaxWidth ? a.xLabelMaxWidth : b / e.length;
                    return e.some(function(a) {
                        return d.text = a, c(d) > f;
                    });
                }
                function c(b, c, d, e, f, g, h, i, j) {
                    var k, l;
                    l = j ? a.DefaultRotationWithScrollbar : a.DefaultRotation, f && (k = d / l.sine), 
                    b.each(function() {
                        var a = d3.select(this);
                        if (f) {
                            var b = h.values.indexOf(this.textContent), c = i.left + h.outerPadding + h.categoryThickness * (b + .5), d = c / l.cosine;
                            (g || k > d) && e(a[0][0], Math.min(d, k)), a.style("text-anchor", "end").attr({
                                dx: "-0.5em",
                                dy: l.dy,
                                transform: l.transform
                            });
                        } else a.style("text-anchor", "middle").attr({
                            dx: "0em",
                            dy: "1em",
                            transform: "rotate(0)"
                        });
                    });
                }
                function d(a, b, c) {
                    0 !== a.size() && a.each(function() {
                        var a = d3.select(this);
                        c(a[0][0], b);
                    });
                }
                a.willRotate = b, a.DefaultRotation = {
                    sine: Math.sin(Math.PI * (35 / 180)),
                    cosine: Math.cos(Math.PI * (35 / 180)),
                    tangent: Math.tan(Math.PI * (35 / 180)),
                    transform: "rotate(-35)",
                    dy: "-0.5em"
                }, a.DefaultRotationWithScrollbar = {
                    sine: Math.sin(.5 * Math.PI),
                    cosine: Math.cos(.5 * Math.PI),
                    tangent: Math.tan(.5 * Math.PI),
                    transform: "rotate(-90)",
                    dy: "-0.8em"
                }, a.rotate = c, a.clip = d;
            }(W = c.LabelLayoutStrategy || (c.LabelLayoutStrategy = {}));
            var X;
            !function(a) {
                function b() {
                    return $(f);
                }
                function c(a) {
                    a.find(".destroyme").remove();
                }
                function d(a, b, c, d) {
                    var f, g, h, i = 0, j = a.width(), k = j / 2, l = d - k - 10, m = 2;
                    b + (k - i) > c ? (f = c + l - (k - i), g = j - m - i - (c - b), h = j - i - (c - b)) : b > k - i ? (f = b + l, 
                    g = k - m, h = k) : (f = k - i + l, g = b + i - m, h = b + i), e(a, f, g, h);
                }
                function e(a, b, c, d) {
                    a.css("left", b + "px"), a.find(".destroyme").remove(), a.append('<style class="destroyme">.triangle-border:before{left:' + c + "px;}</style>"), 
                    a.append('<style class="destroyme">.triangle-border:after{left:' + d + "px;}</style>");
                }
                var f = '<div class="callout triangle-border ms-font-mi"><div class="textArea"/></div>';
                a.createCallout = b, a.clearCallout = c, a.renderCallout = d;
            }(X = c.ToolTip || (c.ToolTip = {})), c.createOrdinalScale = L, c.createLinearScale = M, 
            c.getRangeForColumn = N, c.combineDomain = O, c.scaleShouldClamp = P, c.normalizeNonFiniteNumber = Q;
        }(c = b.AxisHelper || (b.AxisHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            function c(a, b) {
                var c = {};
                if (!a) return c;
                var d = a.objects;
                if (d) {
                    var e = d.categoryAxis;
                    e && (c = {
                        show: e.show,
                        axisType: e.axisType,
                        start: e.start,
                        end: e.end,
                        showAxisTitle: null == e.showAxisTitle ? b : e.showAxisTitle,
                        axisStyle: e.axisStyle
                    });
                }
                return c;
            }
            function d(a, b) {
                var c = {};
                if (!a) return c;
                var d = a.objects;
                if (d) {
                    var e = d.valueAxis;
                    e && (c = {
                        show: e.show,
                        position: e.position,
                        start: e.start,
                        end: e.end,
                        showAxisTitle: null == e.showAxisTitle ? b : e.showAxisTitle,
                        axisStyle: e.axisStyle,
                        secShow: e.secShow,
                        secPosition: e.secPosition,
                        secStart: e.secStart,
                        secEnd: e.secEnd,
                        secShowAxisTitle: e.secShowAxisTitle,
                        secAxisStyle: e.secAxisStyle
                    });
                }
                return c;
            }
            function e(a) {
                null == a.start && (a.start = 0), null == a.secStart && (a.secStart = 0);
            }
            function f(b, c) {
                return b && (b = c && c.axisType ? c.axisType === a.axisType.scalar : !0), b;
            }
            b.getCategoryAxisProperties = c, b.getValueAxisProperties = d, b.forceValueDomainToZero = e, 
            b.isScalar = f;
        }(c = b.CartesianHelper || (b.CartesianHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = a.data.SQExprShortSerializer, d = function() {
            function b(a, b, c) {
                this.colors = a, this.fillProp = b, this.defaultDataPointColor = c;
            }
            return b.prototype.getColorForSeriesValue = function(b, d, e) {
                return this.fillProp && a.DataViewObjects.getFillColor(b, this.fillProp) || this.defaultDataPointColor || this.colors.getColorByScale(c.serializeArray(d || []), e).value;
            }, b.prototype.getColorForMeasure = function(b, c) {
                return this.fillProp && a.DataViewObjects.getFillColor(b, this.fillProp) || this.defaultDataPointColor || this.colors.getColor(c).value;
            }, b.normalizeSelector = function(a, b) {
                return a && (b || a.data) ? {
                    data: a.data
                } : a;
            }, b;
        }();
        b.ColorHelper = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c, d = "rect";
        !function(c) {
            function e(a, c, d, e, f, g) {
                return void 0 !== g ? 0 !== e ? g : 0 : b.AxisHelper.getBestNumberOfTicks(a, c, d, e);
            }
            function f(a, b, d) {
                if (a) {
                    var e = d.start, f = d.end;
                    return c.transformDomain(b, e, f);
                }
                return b;
            }
            function h(b, c, d) {
                if (!b.categories || 0 === b.categories.length) return b;
                if ("number" != typeof c && "number" != typeof d) return b;
                var e = b.categories[0], f = e.values, g = e.objects, h = [], i = [], j = [];
                if ("number" != typeof c && (c = f[0]), "number" != typeof d && (d = f[f.length - 1]), 
                c > d) return b;
                for (var k = 0, l = b.values.length; l > k; k++) i.push([]);
                for (var m = 0, l = f.length; l > m; m++) if (f[m] >= c && f[m] <= d && (h.push(f[m]), 
                g && j.push(g[m]), b.values)) for (var n = 0; n < b.values.length; n++) i[n].push(b.values[n].values[m]);
                var o = a.Prototype.inherit(b), p = o.values = a.Prototype.inherit(o.values), q = o.categories = a.Prototype.inherit(b.categories), r = o.categories[0] = a.Prototype.inherit(q[0]);
                r.values = h, r.objects && (r.objects = j);
                for (var m = 0, l = b.values.length; l > m; m++) {
                    var s = p[m] = a.Prototype.inherit(p[m]);
                    s.values = i[m];
                }
                return o;
            }
            function i(c, d, e, f, h, i) {
                var j = e.categoryThickness, k = e.isScalar, l = e.outerPaddingRatio, m = new g(c, k), n = b.AxisHelper.createDomain(c.series, c.categoryMetadata ? c.categoryMetadata.type : a.ValueType.fromDescriptor({
                    text: !0
                }), k, [ h, i ]), o = b.AxisHelper.createAxis({
                    pixelSpan: d,
                    dataDomain: n,
                    metaDataColumn: c.categoryMetadata,
                    formatStringProp: b.columnChartProps.general.formatString,
                    outerPadding: j * l,
                    isCategoryAxis: !0,
                    isScalar: k,
                    isVertical: f,
                    categoryThickness: j,
                    useTickIntervalForDisplayUnits: !0,
                    getValueFn: function(a, b) {
                        return m.lookupXValue(a, b);
                    }
                });
                return e.categoryThickness = o.categoryThickness, o;
            }
            function j(a, b) {
                b && a.attr("draggable", "true").on("dragstart", b);
            }
            function k(a, b, d, e) {
                return e && !b || d && !a ? c.DimmedOpacity : c.DefaultOpacity;
            }
            function l(a, b) {
                for (var c = 0, d = Number.MAX_VALUE, e = 0, f = b.length; f > e; e++) {
                    var g = Math.abs(a - b[e]);
                    d > g && (d = g, c = e);
                }
                return c;
            }
            function m(a, e, f, g) {
                var h = a.selectAll(b.ColumnChart.SeriesClasses.selector), i = "undefined" == typeof g;
                h.selectAll(d + e).filter(function(a) {
                    return a.categoryIndex !== f && (i || a.categoryIndex === g);
                }).transition().style("fill-opacity", c.DimmedOpacity), h.selectAll(d + e).filter(function(a) {
                    return a.categoryIndex === f;
                }).style("fill-opacity", c.DefaultOpacity);
            }
            function n(a, c, d) {
                var e = c.selectAll(b.ColumnChart.SeriesClasses.selector), f = e.data(a.series, function(a) {
                    return a.key;
                });
                return f.enter().append("g").classed(b.ColumnChart.SeriesClasses["class"], !0), 
                f.exit().remove(), f;
            }
            function o(a, b, e, f, g) {
                var h;
                h = g ? function(a) {
                    var b = _.filter(a.data, function(a) {
                        return !!a.value;
                    });
                    return b;
                } : function(a) {
                    return a.data;
                };
                var i = b.selectAll(f.selector), j = i.data(h, function(a) {
                    return a.key;
                }), k = a.hasSelection;
                return j.enter().append(d).attr("class", function(a) {
                    return f["class"].concat(a.highlight ? " highlight" : "");
                }), j.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(b) {
                    return c.getFillOpacity(b.selected, b.highlight, k, a.hasHighlights);
                }).attr(e.shapeLayout), j.exit().remove(), j;
            }
            function p(a, c, d, e, f, g) {
                if (void 0 === f && (f = !1), a && a.data().length > 0) {
                    for (var h = a.data(), i = [], j = 0, k = h.length; k > j; j++) Array.prototype.push.apply(i, h[j].data);
                    return b.dataLabelUtils.drawDefaultLabelsForDataPointChart(i, c, d, e, f, g);
                }
            }
            function q(a) {
                for (var b = a.domain(), c = 0, d = b.length; d > c; ++c) b[c] === Number.POSITIVE_INFINITY ? b[c] = Number.MAX_VALUE : b[c] === Number.NEGATIVE_INFINITY && (b[c] = -Number.MAX_VALUE);
                a.domain(b);
            }
            c.DimmedOpacity = .4, c.DefaultOpacity = 1, c.getTickCount = e, c.applyUserMinMax = f, 
            c.transformDomain = h, c.getCategoryAxis = i, c.applyInteractivity = j, c.getFillOpacity = k, 
            c.getClosestColumnIndex = l, c.setChosenColumnOpacity = m, c.drawSeries = n, c.drawDefaultShapes = o, 
            c.drawDefaultLabels = p, c.normalizeInfinityInScale = q;
        }(c = b.ColumnUtil || (b.ColumnUtil = {}));
        var e;
        !function(a) {
            function b(a, b) {
                return f.createValueFormatter(a, !1, b);
            }
            function c(a, b) {
                var c = a.selectAll(b.selector).data([]);
                c.exit().remove();
            }
            a.createValueFormatter = b, a.clearColumns = c;
        }(e = b.ClusteredUtil || (b.ClusteredUtil = {}));
        var f;
        !function(d) {
            function e(a, c) {
                return b.AxisHelper.diffScaled(a, 0, c);
            }
            function f(b, c) {
                var d = {
                    min: 0,
                    max: 10
                };
                if (0 === b.length) return d;
                var e = d3.min(b, function(a) {
                    return d3.min(a.data, function(a) {
                        return a.position - a.valueAbsolute;
                    });
                }), f = d3.max(b, function(a) {
                    return d3.max(a.data, function(a) {
                        return a.position;
                    });
                });
                return c && (e = a.Double.roundToPrecision(e, k.roundingError), f = a.Double.roundToPrecision(f, k.roundingError)), 
                {
                    min: e,
                    max: f
                };
            }
            function g(e, g, h, i, j, k) {
                var l = f(e.series, g), m = l.min, n = l.max, o = b.AxisHelper.getRecommendedNumberOfTicksForYAxis(h), p = c.getTickCount(m, n, e.valuesMetadata, o, g, j), q = b.AxisHelper.normalizeLinearDomain({
                    min: m,
                    max: n
                }), r = [ q.min, q.max ], s = b.AxisHelper.combineDomain(k, r), t = d3.scale.linear().range(i).domain(s).nice(p || void 0).clamp(b.AxisHelper.scaleShouldClamp(s, r));
                c.normalizeInfinityInScale(t);
                var u = b.AxisHelper.getRecommendedTickValuesForALinearRange(p, t), v = d3.svg.axis().scale(t).tickValues(u), w = b.ColumnChart.getTickInterval(u), x = d.createValueFormatter(e.valuesMetadata, g, w);
                v.tickFormat(x.format);
                var y = u.map(function(a) {
                    return x.format(a);
                });
                return {
                    axis: v,
                    scale: t,
                    formatter: x,
                    values: y,
                    axisType: a.ValueType.fromDescriptor({
                        numeric: !0
                    }),
                    axisLabel: null,
                    isCategoryAxis: !1
                };
            }
            function h(a, c, d) {
                return c ? b.valueFormatter.create({
                    format: k.percentFormat,
                    value: d,
                    value2: 0,
                    allowFormatBeautification: !0
                }) : b.valueFormatter.create({
                    format: b.valueFormatter.getFormatString(a[0], b.columnChartProps.general.formatString),
                    value: d,
                    value2: 0,
                    allowFormatBeautification: !0
                });
            }
            function i(a, c, d, e, f) {
                for (var g = 0, h = 0, i = 0; d > i; i++) {
                    var j = f.getValueBySeriesAndCategory(i, c);
                    j = b.AxisHelper.normalizeNonFiniteNumber(j), j > 0 ? g += j : 0 > j && (h -= j);
                }
                var k = g + h;
                return {
                    pos: g ? g / k / g : 1,
                    neg: h ? h / k / h : 1
                };
            }
            function j(a, b) {
                var c = a.selectAll(b.selector).data([]);
                c.exit().remove();
            }
            var k = {
                percentFormat: "0%",
                roundingError: 1e-4
            };
            d.getSize = e, d.calcValueDomain = f, d.getValueAxis = g, d.createValueFormatter = h, 
            d.getStackedMultiplier = i, d.clearColumns = j;
        }(f = b.StackedUtil || (b.StackedUtil = {}));
        var g = function() {
            function a(a, b) {
                this.data = a, this.isScalar = b;
            }
            return a.prototype.lookupXValue = function(a, c) {
                var d = b.AxisHelper.isDateTime(c);
                if (d && this.isScalar) return new Date(a);
                var e = this.data;
                if (c.text) return e.categories[a];
                var f = e.series[0];
                if (f) {
                    var g = f.data;
                    if (g) {
                        this.data.hasHighlights && (a = 2 * a);
                        var h = g[a];
                        if (h) return d ? new Date(h.categoryValue) : h.categoryValue;
                    }
                }
                return a;
            }, a;
        }();
        b.DataWrapper = g;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(b) {
            function c(b, c, d) {
                if (b.categories && b.categories.length > 0) {
                    var e = b.categories[0];
                    return e.source && a.DataRoleHelper.hasRole(e.source, c) && a.DataRoleHelper.hasRole(e.source, d);
                }
                return !1;
            }
            function d(b, c) {
                if (b.categories && b.categories.length > 0) {
                    var d = b.categories[0], e = d.values;
                    return d.values.length > 0 ? {
                        categories: e,
                        categoryFormatter: a.valueFormatter.create({
                            format: a.valueFormatter.getFormatString(d.source, c),
                            value: e[0],
                            value2: e[e.length - 1],
                            displayUnitSystemType: 1
                        }),
                        categoryIdentities: d.identity,
                        categoryObjects: d.objects
                    } : {
                        categories: [],
                        categoryFormatter: {
                            format: a.valueFormatter.format
                        }
                    };
                }
                return g();
            }
            function e(a) {
                return void 0 !== a.groupName ? a.groupName : a.queryName;
            }
            function f(b, c, d) {
                var e = b, f = b.displayName;
                return void 0 !== b.groupName && (e = c.source, f = b.groupName), a.valueFormatter.format(f, a.valueFormatter.getFormatString(e, d));
            }
            function g() {
                return {
                    categories: [ null ],
                    categoryFormatter: {
                        format: a.valueFormatter.format
                    }
                };
            }
            function h(b, c, d, e) {
                var f = null, g = null;
                if (b && d && d.displayName && (f = d.displayName), c) {
                    var h = [];
                    e && (h = e.map(function(a) {
                        return a ? a.displayName : "";
                    }).filter(function(a, b, c) {
                        return "" !== a && c.indexOf(a) === b;
                    }), g = a.valueFormatter.formatListAnd(h));
                }
                return {
                    xAxisLabel: f,
                    yAxisLabel: g
                };
            }
            b.categoryIsAlsoSeriesRole = c, b.getPivotedCategories = d, b.getSeriesName = e, 
            b.getFormattedLegendLabel = f, b.createAxesLabels = h;
        }(b = a.converterHelper || (a.converterHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        !function(a) {
            a[a.Above = 0] = "Above", a[a.Bellow = 1] = "Bellow";
        }(b.PointLabelPosition || (b.PointLabelPosition = {}));
        var c;
        b.PointLabelPosition;
        !function(c) {
            function d(a, b) {
                return void 0 === a && (a = !1), {
                    show: a,
                    position: 0,
                    displayUnits: 0,
                    overrideDefaultColor: !1,
                    precision: y,
                    labelColor: b || c.defaultLabelColor,
                    formatterOptions: null
                };
            }
            function e() {
                return d(!0, "#fff");
            }
            function f(a) {
                var b = d(!1);
                return b.position = null, b.labelColor = a ? c.defaultInsideLabelColor : null, b;
            }
            function g() {
                return {
                    show: !1,
                    position: 0,
                    displayUnits: 0,
                    overrideDefaultColor: !1,
                    precision: y,
                    labelColor: c.defaultLabelColor,
                    formatterOptions: null
                };
            }
            function h() {
                return {
                    show: !1,
                    displayUnits: 0,
                    overrideDefaultColor: !1,
                    precision: y,
                    labelColor: c.defaultLabelColor,
                    position: null,
                    showCategory: !0,
                    formatterOptions: null
                };
            }
            function i(b, c, d, e, f, g) {
                void 0 === f && (f = !1);
                var h = new a.DataLabelManager(), i = h.hideCollidedLabels(e, b, d), j = c.selectAll(z.selector).data(i);
                return j.enter().append("text").classed(z["class"], !0), j.attr({
                    x: function(a) {
                        return a.labelX;
                    },
                    y: function(a) {
                        return a.labelY;
                    }
                }).text(function(a) {
                    return a.labeltext;
                }).style(d.style), f && g && j.transition().duration(g), j.exit().remove(), j;
            }
            function j(a, b, c, d, e) {
                void 0 === d && (d = !1);
                var f = a.filter(c.filter), g = b.selectAll(z.selector).data(f);
                return g.enter().append("text").classed(z["class"], !0), g.attr(c.labelLayout).text(c.labelText).style(c.style), 
                d && e && g.transition().duration(e), g.exit().remove(), g;
            }
            function k(a) {
                var b = [], c = a.selectAll(z.selector).data(b);
                c.exit().remove();
            }
            function l(a, c, d) {
                a.selectAll(z.selector).style("fill-opacity", function(a) {
                    var e = b.ColumnUtil.getFillOpacity(a.selected, a.highlight, !a.highlight && c, !a.selected && d) < 1 ? 0 : 1;
                    return e;
                });
            }
            function m(b, d, e) {
                var f = {
                    text: a.formattingService.formatValue(b, e),
                    fontFamily: c.LabelTextProperties.fontFamily,
                    fontSize: c.LabelTextProperties.fontSize,
                    fontWeight: c.LabelTextProperties.fontWeight
                };
                return d = d ? d : c.maxLabelWidth, a.TextMeasurementService.getTailoredTextOrDefault(f, d);
            }
            function n(a) {
                return {
                    labelText: function(a) {
                        return m(a.labeltext);
                    },
                    labelLayout: {
                        x: function(a) {
                            return a.x;
                        },
                        y: function(b) {
                            var d = b.radius + c.labelMargin;
                            return 0 === a.position ? b.y - d : b.y + d;
                        }
                    },
                    filter: function(a) {
                        return null != a && null != a.labeltext;
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        }
                    }
                };
            }
            function o(a, d, e, f, g, h) {
                var i = null;
                0 === a.labelSettings.displayUnits && g && g.displayUnit && (i = g.displayUnit.value);
                for (var j = f ? c.hundredPercentFormat : null, k = b.valueFormatter.create(c.getLabelFormatterOptions(a.labelSettings, j, i)), l = !1, n = 0, o = a.series.length; o > n; n++) {
                    var q = a.series[n].data;
                    b.dataHasSelection(q) && (l = !0);
                }
                return {
                    labelText: function(a) {
                        return m(k.format(a.value), c.maxLabelWidth);
                    },
                    labelLayout: d,
                    filter: function(a) {
                        return null != a && null != a.value && 0 !== a.value && p(a, h);
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        },
                        "text-anchor": e ? "middle" : "start",
                        "fill-opacity": function(c) {
                            var d = b.ColumnUtil.getFillOpacity(c.selected, c.highlight, l, a.hasHighlights) < 1 ? 0 : 1;
                            return d;
                        }
                    }
                };
            }
            function p(d, e) {
                var f, g, h = e.xScale, i = e.yScale, j = e.columnWidth, k = {
                    text: d.labeltext,
                    fontFamily: c.LabelTextProperties.fontFamily,
                    fontSize: c.LabelTextProperties.fontSize,
                    fontWeight: c.LabelTextProperties.fontWeight
                }, l = a.TextMeasurementService.measureSvgTextWidth(k), m = a.TextMeasurementService.measureSvgTextHeight(k), n = !1;
                switch (d.chartType) {
                  case b.ColumnChartType.stackedBar:
                    f = -b.StackedUtil.getSize(h, d.valueAbsolute), g = j, n = d.lastSeries ? !1 : !0;
                    break;

                  case b.ColumnChartType.hundredPercentStackedBar:
                    f = -b.StackedUtil.getSize(h, d.valueAbsolute), g = j, n = !0;
                    break;

                  case b.ColumnChartType.stackedColumn:
                    f = j, g = b.StackedUtil.getSize(i, d.valueAbsolute), n = d.lastSeries ? !1 : !0;
                    break;

                  case b.ColumnChartType.hundredPercentStackedColumn:
                    f = j, g = b.StackedUtil.getSize(i, d.valueAbsolute), n = !0;
                    break;

                  default:
                    return !0;
                }
                return n && (l > f || m > g) ? !1 : !0;
            }
            function q(a, d, e, f, g) {
                return {
                    labelText: function(a) {
                        return m(a.category);
                    },
                    labelLayout: {
                        x: function(b) {
                            return a(b.x);
                        },
                        y: function(a) {
                            var h = b.ScatterChart.getBubbleRadius(a.radius, g, f) + c.labelMargin;
                            return 0 === e.position ? d(a.y) - h : d(a.y) + h;
                        }
                    },
                    filter: function(a) {
                        return null != a && null != a.category;
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        },
                        "fill-opacity": function(a) {
                            return b.ScatterChart.getBubbleOpacity(a, !1);
                        },
                        "font-family": c.LabelTextProperties.fontFamily,
                        "font-size": c.LabelTextProperties.fontSize,
                        "font-weight": c.LabelTextProperties.fontWeight
                    }
                };
            }
            function r(a, d, e, f) {
                var g = b.valueFormatter.create(c.getLabelFormatterOptions(e));
                return {
                    labelText: function(a) {
                        return m(g.format(a.value));
                    },
                    labelLayout: {
                        x: function(b) {
                            return a(f ? b.categoryValue : b.categoryIndex);
                        },
                        y: function(a) {
                            return 0 === e.position ? d(a.value) - c.labelMargin : d(a.value) + c.labelMargin;
                        }
                    },
                    filter: function(a) {
                        return null != a && null != a.value;
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        },
                        "fill-opacity": 1,
                        "font-family": c.LabelTextProperties.fontFamily,
                        "font-size": c.LabelTextProperties.fontSize,
                        "font-weight": c.LabelTextProperties.fontWeight
                    }
                };
            }
            function s(d, e, f, g, h, i) {
                var j = e.yScale, k = e.xScale, l = e.margin.left, n = e.xScale.rangeBand() / 2 + f, o = e.verticalRange / 2, p = b.valueFormatter.getFormatString(d.valuesMetadata[0], b.funnelChartProps.general.formatString), q = a.TextMeasurementService.measureSvgTextWidth, r = b.valueFormatter.create(c.getLabelFormatterOptions(h, p));
                return {
                    labelText: function(a) {
                        var b = Math.abs(j(a.value) - j(0)), c = Math.abs(j(a.value) - j(0)) - 2 * g, d = o - b / 2 - g, e = Math.max(c, d);
                        return m(r.format(a.value), e);
                    },
                    labelLayout: {
                        y: function(a, b) {
                            return k(b) + n;
                        },
                        x: function(b) {
                            var d = Math.abs(j(b.value) - j(0)), e = Math.abs(j(b.value) - j(0)) - 2 * g, f = o - d / 2 - g, i = Math.max(e, f), k = {
                                text: m(r.format(b.value), i),
                                fontFamily: c.LabelTextProperties.fontFamily,
                                fontSize: c.LabelTextProperties.fontSize,
                                fontWeight: c.LabelTextProperties.fontWeight
                            }, n = q(k), p = h.position;
                            switch (p === a.labelPosition.outsideEnd && n > f ? p = a.labelPosition.insideCenter : p === a.labelPosition.insideCenter && n > e && (p = a.labelPosition.outsideEnd), 
                            p) {
                              case a.labelPosition.outsideEnd:
                                return b.labelFill = "#FFFFFF" === b.labelFill ? b.color : b.labelFill, l + o + d / 2 + g + n / 2;

                              default:
                                return b.labelFill = h.overrideDefaultColor ? b.labelFill : "#FFFFFF", l + o;
                            }
                        }
                    },
                    filter: function(a) {
                        return null != a && null != a.value;
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        },
                        "fill-opacity": function(a) {
                            return b.ColumnUtil.getFillOpacity(a.selected, !1, !1, !1);
                        }
                    }
                };
            }
            function t(a, b, c, d, e) {
                if (void 0 === c && (c = !1), void 0 === d && (d = !1), !a) return [];
                var f = {
                    objectName: "labels",
                    selector: null,
                    properties: {
                        show: a.show,
                        color: a.labelColor
                    },
                    validValues: e
                };
                return d && (f.properties.labelDisplayUnits = a.displayUnits), c && (f.properties.labelPrecision = a.precision), 
                b && (f.properties.labelPosition = a.position), [ f ];
            }
            function u(a, b, c) {
                void 0 === c && (c = !1);
                var d = a ? a : c ? h() : g(), e = {
                    objectName: "categoryLabels",
                    selector: null,
                    properties: {
                        show: c ? d.showCategory : d.show
                    }
                };
                return b && (e.properties.color = d.labelColor), [ e ];
            }
            function v(b) {
                return {
                    show: !0,
                    position: a.labelPosition.insideCenter,
                    displayUnits: 0,
                    overrideDefaultColor: !1,
                    precision: y,
                    labelColor: b || c.defaultLabelColor,
                    formatterOptions: null
                };
            }
            function w(a, b, c) {
                var d = 1e3 === a.displayUnits ? 1e4 : a.displayUnits;
                return b ? {
                    format: b,
                    precision: a.precision,
                    value: d,
                    value2: c,
                    allowFormatBeautification: !0
                } : {
                    format: a && a.formatterOptions ? a.formatterOptions.format : null,
                    precision: a.precision,
                    value: d,
                    value2: c,
                    allowFormatBeautification: !0
                };
            }
            function x(a) {
                return a ? _.find(a, function(a) {
                    return null != a.format;
                }) : null;
            }
            c.labelMargin = 8, c.maxLabelWidth = 50, c.defaultColumnLabelMargin = 5, c.defaultColumnHalfLabelHeight = 4, 
            c.LabelTextProperties = {
                fontFamily: "wf_segoe-ui_normal",
                fontSize: "12px",
                fontWeight: "bold"
            }, c.defaultLabelColor = "#696969", c.defaultInsideLabelColor = "#fff", c.hundredPercentFormat = "0.00 %;-0.00 %;0.00 %";
            var y = 2, z = {
                "class": "data-labels",
                selector: ".data-labels"
            };
            c.getDefaultLabelSettings = d, c.getDefaultTreemapLabelSettings = e, c.getDefaultColumnLabelSettings = f, 
            c.getDefaultPointLabelSettings = g, c.getDefaultDonutLabelSettings = h, c.drawDefaultLabelsForDataPointChart = i, 
            c.drawDefaultLabelsForFunnelChart = j, c.cleanDataLabels = k, c.setHighlightedLabelsOpacity = l, 
            c.getLabelFormattedText = m, c.getMapLabelLayout = n, c.getColumnChartLabelLayout = o, 
            c.getScatterChartLabelLayout = q, c.getLineChartLabelLayout = r, c.getFunnelChartLabelLayout = s, 
            c.enumerateDataLabels = t, c.enumerateCategoryLabels = u, c.getDefaultFunnelLabelSettings = v, 
            c.getLabelFormatterOptions = w, c.getFormatterOptionsColumn = x;
        }(c = b.dataLabelUtils || (b.dataLabelUtils = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b(a, b, d) {
                if (a && a.length > 0) {
                    var e = a[0];
                    if (e.values && e.values.length > 0) for (var f = 0, g = e.values.length; g > f; ++f) {
                        var h = e.values[f];
                        if (h && h.source) {
                            if (c(h.source, b)) return f;
                            if (g > d) return d;
                        }
                    }
                }
                return -1;
            }
            function c(a, b) {
                var c = a.roles;
                return c && c[b];
            }
            function d(a, b) {
                return null != a && null != a.metadata && a.metadata.columns && _.any(a.metadata.columns, function(a) {
                    return a.roles && void 0 !== a.roles[b];
                });
            }
            a.getMeasureIndexOfRole = b, a.hasRole = c, a.hasRoleInDataView = d;
        }(b = a.DataRoleHelper || (a.DataRoleHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(b) {
            function c(b) {
                return b.interactivity && b.interactivity.selection ? a.createInteractivityService(b.host) : b.interactivity && b.interactivity.isInteractiveLegend ? new a.MobileInteractivityService() : null;
            }
            b.buildInteractivityService = c;
        }(b = a.VisualInteractivityFactory || (a.VisualInteractivityFactory = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        function b(a, b, d, e) {
            var f = new c(b, d, e);
            return f.getWarningMessages(a);
        }
        a.getInvalidValueWarnings = b;
        var c = function() {
            function b(a, b, c) {
                this.supportsNaN = a, this.supportsNegativeInfinity = b, this.supportsPositiveInfinity = c;
            }
            return b.prototype.getWarningMessages = function(b) {
                this.loadWarningStatus(b);
                var c = [];
                return this.hasNaN && !this.supportsNaN && c.push(new a.NaNNotSupportedWarning()), 
                (this.hasNegativeInfinity && !this.supportsNegativeInfinity || this.hasPositiveInfinity && !this.supportsPositiveInfinity) && c.push(new a.InfinityValuesNotSupportedWarning()), 
                this.hasOutOfRange && c.push(new a.ValuesOutOfRangeWarning()), c;
            }, b.prototype.loadWarningStatus = function(a) {
                this.hasNaN = !1, this.hasNegativeInfinity = !1, this.hasOutOfRange = !1, this.hasPositiveInfinity = !1;
                for (var b = 0; b < a.length; b++) {
                    var c = a[b], d = c && c.categorical && c.categorical.values ? c.categorical.values : null;
                    if (!d) return;
                    for (var e = d.length, f = 0; e > f; f++) {
                        var g = d[f];
                        if (g.values) for (var h = g.values.length, i = 0; h > i; i++) {
                            var j = g.values[i];
                            isNaN(j) ? this.hasNaN = !0 : j === Number.POSITIVE_INFINITY ? this.hasPositiveInfinity = !0 : j === Number.NEGATIVE_INFINITY ? this.hasNegativeInfinity = !0 : (-1e300 > j || j > 1e300) && (this.hasOutOfRange = !0);
                        }
                    }
                }
            }, b;
        }();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b(a) {
                return new d(a, 1);
            }
            function c(a) {
                return new d(a, 0);
            }
            a.createHTMLListView = b, a.createSVGListView = c;
        }(b = a.ListViewFactory || (a.ListViewFactory = {}));
        var c;
        !function(a) {
            a[a.SVG = 0] = "SVG", a[a.HTML = 1] = "HTML";
        }(c || (c = {}));
        var d = function() {
            function b(a, c) {
                var d = this;
                this.options = a, this.mode = c, this.options.baseContainer.style("overflow-y", "auto").on("scroll", function() {
                    return d.render(!1);
                }), this.scrollContainer = a.baseContainer.append(0 === c ? "svg" : "div").attr("class", "scrollRegion"), 
                this.visibleGroupContainer = this.scrollContainer.append(0 === c ? "g" : "div").attr("class", "visibleGroup"), 
                b.SetDefaultOptions(a), this.position = 0;
            }
            return b.SetDefaultOptions = function(a) {
                a.rowHeight = a.rowHeight || 1;
            }, b.prototype.rowHeight = function(a) {
                return this.options.rowHeight = a, this;
            }, b.prototype.data = function(a, b) {
                return this._data = a, this._dataIdFunction = b, this._totalRows = a ? a.length : 0, 
                this;
            }, b.prototype.viewport = function(a) {
                return this.options.viewport = a, this;
            }, b.prototype.empty = function() {
                this._data = [], this.render(!1, !0);
            }, b.prototype.render = function(a, b) {
                if (void 0 === a && (a = !1), void 0 === b && (b = !1), this._data && this.options) {
                    var c, d = this.options, e = d.rowHeight;
                    if (b ? (this.position = 0, c = 0, $(d.baseContainer.node()).scrollTop(c)) : c = d.baseContainer.node().scrollTop, 
                    a) {
                        var f = d.viewport.height;
                        this.visibleRows = Math.ceil(f / e) + 1;
                    }
                    var g = Math.max(0, this._totalRows * e);
                    this.scrollContainer.style("height", g + "px").attr("height", g);
                    var h = this.position, i = this.position = Math.floor(c / e);
                    this.delta = i - h, this.scrollToFrame(i);
                }
            }, b.prototype.scrollToFrame = function(c) {
                var d = this.options, e = this.visibleGroupContainer, f = this._totalRows, g = d.rowHeight, h = this.visibleRows, i = c * g;
                e.attr("transform", function(b) {
                    return a.SVGUtil.translate(0, i);
                }).style("transform", function(b) {
                    return a.SVGUtil.translateWithPixels(0, i);
                });
                var j = Math.max(0, Math.min(c, f - h + 1)), k = j + h, l = e.selectAll(".row").data(this._data.slice(j, Math.min(k, f)), this._dataIdFunction);
                l.enter().append("g").classed("row", !0).call(function(a) {
                    return d.enter(a);
                }), l.order();
                var m = e.selectAll(".row:not(.transitioning)");
                m.call(function(a) {
                    return d.update(a);
                }), 0 === this.mode && m.each(function(b, c) {
                    var d = a.SVGUtil.translate(0, c * g);
                    d3.select(this).attr("transform", function(a) {
                        return d;
                    }).style("transform", function(a) {
                        return d;
                    });
                }), l.exit().call(function(a) {
                    return d.exit(a);
                }).remove(), k >= f * b.loadMoreDataThreshold && d.loadMoreData();
            }, b.loadMoreDataThreshold = .8, b;
        }();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = a.data.Selector, d = function() {
            function b(a, b) {
                this.selector = a, this.highlight = b, this.key = JSON.stringify({
                    selector: a ? c.getKey(a) : null,
                    highlight: b
                });
            }
            return b.prototype.equals = function(a) {
                return this.selector && a.selector ? this.highlight === a.highlight && c.equals(this.selector, a.selector) : !this.selector == !a.selector && this.highlight === a.highlight;
            }, b.prototype.includes = function(b, c) {
                void 0 === c && (c = !1);
                var d = this.selector, e = b.selector;
                if (!d || !e) return !1;
                var f = d.data, g = e.data;
                if (!f && d.metadata && d.metadata !== e.metadata) return !1;
                if (!c && this.highlight !== b.highlight) return !1;
                if (f) {
                    if (!g) return !1;
                    if (f.length > 0) for (var h = 0, i = f.length; i > h; h++) {
                        var j = f[h];
                        if (!g.some(function(b) {
                            return a.DataViewScopeIdentity.equals(j, b);
                        })) return !1;
                    }
                }
                return !0;
            }, b.prototype.getKey = function() {
                return this.key;
            }, b.prototype.hasIdentity = function() {
                return this.selector && !!this.selector.data;
            }, b.prototype.getSelector = function() {
                return this.selector;
            }, b.createNull = function(a) {
                return void 0 === a && (a = !1), new b(null, a);
            }, b.createWithId = function(a, c) {
                void 0 === c && (c = !1);
                var d = null;
                return a && (d = {
                    data: [ a ]
                }), new b(d, c);
            }, b.createWithMeasure = function(a, c) {
                void 0 === c && (c = !1);
                var d = {};
                return a && (d.metadata = a), new b(d, c);
            }, b.createWithIdAndMeasure = function(a, c, d) {
                void 0 === d && (d = !1);
                var e = {};
                return a && (e.data = [ a ]), c && (e.metadata = c), a || c || (e = null), new b(e, d);
            }, b.createWithIds = function(a, c, d) {
                void 0 === d && (d = !1);
                var e = null, f = b.idArray(a, c);
                return f && (e = {
                    data: f
                }), new b(e, d);
            }, b.createWithIdsAndMeasure = function(a, c, d, e) {
                void 0 === e && (e = !1);
                var f = {}, g = b.idArray(a, c);
                return g && (f.data = g), d && (f.metadata = d), a || c || d || (f = null), new b(f, e);
            }, b.createWithHighlight = function(a) {
                return new b(a.getSelector(), !0);
            }, b.idArray = function(a, b) {
                if (a || b) {
                    var c = [];
                    return a && c.push(a), b && b !== a && c.push(b), c;
                }
            }, b;
        }();
        b.SelectionId = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        "use strict";
        var c;
        !function(b) {
            var c, d = jsCommon.Utility;
            !function(b) {
                function c(a, b, c) {
                    var d = a.x + b >= 0 ? a.x + b : 0, e = a.y + c >= 0 ? a.y + c : 0;
                    return {
                        x: d,
                        y: e
                    };
                }
                function e(a, b) {
                    return void 0 !== a && null !== a && void 0 !== b && null !== b && a.x === b.x && a.y === b.y;
                }
                function f(a) {
                    return null !== a ? {
                        x: a.x,
                        y: a.y
                    } : null;
                }
                function g(a) {
                    return "{x:" + a.x + ", y:" + a.y + "}";
                }
                function h(a) {
                    return a.x + "," + a.y;
                }
                function i(a, b) {
                    if (null === a || null === b) return null;
                    var c = b.x - a.x, d = b.y - a.y;
                    return Math.sqrt(c * c + d * d);
                }
                function j(b, c) {
                    return b === c || void 0 !== b && void 0 !== c && a.Double.equalWithPrecision(b.x, c.x) && a.Double.equalWithPrecision(b.y, c.y);
                }
                function k(a, b) {
                    if (null === a) return void 0 === b ? null : b;
                    if (void 0 === a) return void 0 === b ? null : b;
                    if (2 === a.length) return {
                        x: d.parseNumber(a[0]),
                        y: d.parseNumber(a[1])
                    };
                    if ("string" == typeof a) {
                        var c = a.split(",");
                        return 2 !== c.length ? void 0 === b ? null : b : {
                            x: d.parseNumber(c[0]),
                            y: d.parseNumber(c[1])
                        };
                    }
                    return 2 !== a.length && "string" != typeof a ? void 0 === b ? null : b : {
                        x: d.parseNumber(a.x),
                        y: d.parseNumber(a.y)
                    };
                }
                b.offset = c, b.equals = e, b.clone = f, b.toString = g, b.serialize = h, b.getDistance = i, 
                b.equalWithPrecision = j, b.parsePoint = k;
            }(c = b.Point || (b.Point = {}));
            var e;
            !function(b) {
                function c(a) {
                    return 0 === a.width && 0 === a.height;
                }
                function e(a, b) {
                    return void 0 !== a && null !== a && void 0 !== b && null !== b && a.width === b.width && a.height === b.height;
                }
                function f(a) {
                    return null !== a ? {
                        width: a.width,
                        height: a.height
                    } : null;
                }
                function g(a, b) {
                    var c = f(a);
                    return b && (c.width += b.left + b.right, c.height += b.top + b.bottom), c;
                }
                function h(a, b) {
                    var c = f(a);
                    return b && (c.width = c.width - b.left - b.right, c.width < 0 && (c.width = 0), 
                    c.height = c.height - b.top - b.bottom, c.height < 0 && (c.height = 0)), c;
                }
                function i(a, b) {
                    return b && (a.width = Math.max(a.width, b.width), a.height = Math.max(a.height, b.height)), 
                    a;
                }
                function j(a) {
                    return {
                        left: 0,
                        top: 0,
                        width: a.width,
                        height: a.height
                    };
                }
                function k(a) {
                    return "{width:" + a.width + ", height:" + a.height + "}";
                }
                function l(a, b) {
                    return a === b || void 0 !== a && void 0 !== b && a.width === b.width && a.height === b.height;
                }
                function m(b, c) {
                    return b === c || void 0 !== b && void 0 !== c && a.Double.equalWithPrecision(b.width, c.width) && a.Double.equalWithPrecision(b.height, c.height);
                }
                function n(a, b) {
                    if (null === a) return void 0 === b ? null : b;
                    if (void 0 === a) return void 0 === b ? null : b;
                    if (2 === a.length) return {
                        width: d.parseNumber(a[0]),
                        height: d.parseNumber(a[1])
                    };
                    if ("string" == typeof a) {
                        var c = a.split(",");
                        return 2 !== c.length ? void 0 === b ? null : b : {
                            width: d.parseNumber(c[0]),
                            height: d.parseNumber(c[1])
                        };
                    }
                    return 2 !== a.length && "string" != typeof a ? void 0 === b ? null : b : {
                        width: d.parseNumber(a.width),
                        height: d.parseNumber(a.height)
                    };
                }
                b.isEmpty = c, b.equals = e, b.clone = f, b.inflate = g, b.deflate = h, b.combine = i, 
                b.toRect = j, b.toString = k, b.equal = l, b.equalWithPrecision = m, b.parseSize = n;
            }(e = b.Size || (b.Size = {}));
            var f;
            !function(b) {
                function c(a) {
                    return {
                        x: a.left,
                        y: a.top
                    };
                }
                function e(a) {
                    return {
                        width: a.width,
                        height: a.height
                    };
                }
                function f(a, b) {
                    a.width = b.width, a.height = b.height;
                }
                function g(a) {
                    return a.left + a.width;
                }
                function h(a) {
                    return a.top + a.height;
                }
                function i(a) {
                    return {
                        x: a.left,
                        y: a.top
                    };
                }
                function j(a) {
                    return {
                        x: a.left + a.width,
                        y: a.top
                    };
                }
                function k(a) {
                    return {
                        x: a.left,
                        y: a.top + a.height
                    };
                }
                function l(a) {
                    return {
                        x: a.left + a.width,
                        y: a.top + a.height
                    };
                }
                function m(a, b) {
                    return void 0 !== b && null !== b && a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height;
                }
                function n(a) {
                    return null !== a ? {
                        left: a.left,
                        top: a.top,
                        width: a.width,
                        height: a.height
                    } : null;
                }
                function o(a) {
                    return "{left:" + a.left + ", top:" + a.top + ", width:" + a.width + ", height:" + a.height + "}";
                }
                function p(a, b, c) {
                    var d = a.left + b >= 0 ? a.left + b : 0, e = a.top + c >= 0 ? a.top + c : 0;
                    return {
                        left: d,
                        top: e,
                        width: a.width,
                        height: a.height
                    };
                }
                function q(a, b) {
                    var c = n(a);
                    return b && (c.left -= b.left, c.top -= b.top, c.width += b.left + b.right, c.height += b.top + b.bottom), 
                    c;
                }
                function r(a, b) {
                    var c = n(a);
                    return b && (c.left += b.left, c.top += b.top, c.width -= b.left + b.right, c.height -= b.top + b.bottom), 
                    c;
                }
                function s(a, b) {
                    return {
                        left: a.left - b,
                        top: a.top - b,
                        width: a.width + b + b,
                        height: a.height + b + b
                    };
                }
                function t(a, b) {
                    return {
                        left: a.left + b,
                        top: a.top + b,
                        width: a.width - b - b,
                        height: a.height - b - b
                    };
                }
                function u(a, b, c) {
                    return {
                        x: Math.min(Math.max(a.left, b), a.left + a.width),
                        y: Math.min(Math.max(a.top, c), a.top + a.height)
                    };
                }
                function v(a, b) {
                    return a === b || void 0 !== a && void 0 !== b && a.left === b.left && a.top === b.top && a.width === b.width && a.height === b.height;
                }
                function w(b, c) {
                    return b === c || void 0 !== b && void 0 !== c && a.Double.equalWithPrecision(b.left, c.left) && a.Double.equalWithPrecision(b.top, c.top) && a.Double.equalWithPrecision(b.width, c.width) && a.Double.equalWithPrecision(b.height, c.height);
                }
                function x(a) {
                    return void 0 === a || null === a || 0 === a.width && 0 === a.height;
                }
                function y(a, b) {
                    return null === a || null === b ? !1 : a.left <= b.x && b.x <= a.left + a.width && a.top <= b.y && b.y <= a.top + a.height;
                }
                function z(a, b) {
                    if (!a || !b) return !1;
                    var c = Math.max(a.left, b.left), d = Math.min(a.left + a.width, b.left + b.width);
                    if (c > d) return !1;
                    var e = Math.max(a.top, b.top), f = Math.min(a.top + a.height, b.top + b.height);
                    return f >= e;
                }
                function A(a, b) {
                    if (!a) return b;
                    if (!b) return a;
                    var c = Math.max(a.left, b.left), d = Math.max(a.top, b.top), e = Math.min(a.left + a.width, b.left + b.width), f = Math.min(a.top + a.height, b.top + b.height);
                    return e >= c && f >= d ? {
                        left: c,
                        top: d,
                        width: e - c,
                        height: f - d
                    } : {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                function B(a, b) {
                    if (!a) return b;
                    if (!b) return a;
                    var c = Math.min(a.left, b.left), d = Math.min(a.top, b.top), e = Math.max(a.left + a.width, b.left + b.width), f = Math.max(a.top + a.height, b.top + b.height);
                    return {
                        left: c,
                        top: d,
                        width: e - c,
                        height: f - d
                    };
                }
                function C(a, b) {
                    if (null === a) return void 0 === b ? null : b;
                    if (void 0 === a) return void 0 === b ? null : b;
                    if (4 === a.length) return {
                        left: d.parseNumber(a[0]),
                        top: d.parseNumber(a[1]),
                        width: d.parseNumber(a[2]),
                        height: d.parseNumber(a[3])
                    };
                    if ("string" == typeof a) {
                        var c = a.split(",");
                        return 4 !== c.length ? void 0 === b ? null : b : {
                            left: d.parseNumber(c[0]),
                            top: d.parseNumber(c[1]),
                            width: d.parseNumber(c[2]),
                            height: d.parseNumber(c[3])
                        };
                    }
                    return 4 !== a.length && "string" != typeof a ? void 0 === b ? null : b : {
                        left: d.parseNumber(a.left),
                        top: d.parseNumber(a.top),
                        width: d.parseNumber(a.width),
                        height: d.parseNumber(a.height)
                    };
                }
                b.getOffset = c, b.getSize = e, b.setSize = f, b.right = g, b.bottom = h, b.topLeft = i, 
                b.topRight = j, b.bottomLeft = k, b.bottomRight = l, b.equals = m, b.clone = n, 
                b.toString = o, b.offset = p, b.inflate = q, b.deflate = r, b.inflateBy = s, b.deflateBy = t, 
                b.getClosestPoint = u, b.equal = v, b.equalWithPrecision = w, b.isEmpty = x, b.containsPoint = y, 
                b.isIntersecting = z, b.intersect = A, b.combine = B, b.parseRect = C;
            }(f = b.Rect || (b.Rect = {}));
            var g;
            !function(b) {
                function c(a, b) {
                    var c = g(a);
                    return b && (c.left = a.left + b.left, c.right = a.right + b.right, c.bottom = a.bottom + b.bottom, 
                    c.top = a.top + b.top), c;
                }
                function e(a) {
                    return a.left + a.right;
                }
                function f(a) {
                    return a.top + a.bottom;
                }
                function g(a) {
                    return null !== a ? {
                        left: a.left,
                        top: a.top,
                        right: a.right,
                        bottom: a.bottom
                    } : null;
                }
                function h(a, b) {
                    return void 0 !== a && null !== a && void 0 !== b && null !== b && a.left === b.left && a.bottom === b.bottom && a.right === b.right && a.top === b.top;
                }
                function i(a) {
                    var b = a.right;
                    a.right = a.left, a.left = b;
                }
                function j(a) {
                    var b = a.top;
                    a.top = a.bottom, a.bottom = b;
                }
                function k(a) {
                    return "{top:" + a.top + ", left:" + a.left + ", right:" + a.right + ", bottom:" + a.bottom + "}";
                }
                function l(a) {
                    return a.top + "px " + a.right + "px " + a.bottom + "px " + a.left + "px";
                }
                function m(a) {
                    return 0 === a.left && 0 === a.top && 0 === a.right && 0 === a.bottom;
                }
                function n(a, b) {
                    return a === b || void 0 !== a && void 0 !== b && a.left === b.left && a.top === b.top && a.right === b.right && a.bottom === b.bottom;
                }
                function o(b, c) {
                    return b === c || void 0 !== b && void 0 !== c && a.Double.equalWithPrecision(b.left, c.left) && a.Double.equalWithPrecision(b.top, c.top) && a.Double.equalWithPrecision(b.right, c.right) && a.Double.equalWithPrecision(b.bottom, c.bottom);
                }
                function p(a, b, c) {
                    if (null === a) return void 0 === b ? null : b;
                    if (void 0 === a) return void 0 === b ? null : b;
                    if (4 === a.length) return {
                        left: d.parseNumber(a[0]),
                        top: d.parseNumber(a[1]),
                        right: d.parseNumber(a[2]),
                        bottom: d.parseNumber(a[3])
                    };
                    if ("string" == typeof a) {
                        var e = a.split(",");
                        return 4 !== e.length ? void 0 === b ? null : b : {
                            left: d.parseNumber(e[0]),
                            top: d.parseNumber(e[1]),
                            right: d.parseNumber(e[2]),
                            bottom: d.parseNumber(e[3])
                        };
                    }
                    return 4 !== a.length && "string" != typeof a ? void 0 === b ? null : b : {
                        left: d.parseNumber(a.left),
                        top: d.parseNumber(a.top),
                        right: d.parseNumber(a.right),
                        bottom: d.parseNumber(a.bottom)
                    };
                }
                b.inflate = c, b.getWidth = e, b.getHeight = f, b.clone = g, b.equals = h, b.flipHorizontal = i, 
                b.flipVertical = j, b.toString = k, b.toCssString = l, b.isEmpty = m, b.equal = n, 
                b.equalWithPrecision = o, b.parseThickness = p;
            }(g = b.Thickness || (b.Thickness = {}));
            var h;
            !function(b) {
                function c(a) {
                    return 0 === a.x && 0 === a.y;
                }
                function d(a, b) {
                    return void 0 !== a && null !== a && void 0 !== b && null !== b && a.x === b.x && a.y === b.y;
                }
                function e(a) {
                    return null !== a ? {
                        x: a.x,
                        y: a.y
                    } : null;
                }
                function f(a) {
                    return "{x:" + a.x + ", y:" + a.y + "}";
                }
                function g(a) {
                    return Math.sqrt(a.x * a.x + a.y * a.y);
                }
                function h(a) {
                    return a.x * a.x + a.y * a.y;
                }
                function i(a, b) {
                    return {
                        x: a.x * b,
                        y: a.y * b
                    };
                }
                function j(a) {
                    return c(a) ? a : i(a, 1 / g(a));
                }
                function k(a) {
                    return {
                        x: a.y,
                        y: -a.x
                    };
                }
                function l(a) {
                    return {
                        x: -a.y,
                        y: a.x
                    };
                }
                function m(a, b) {
                    var c = a.x * Math.cos(b) - a.y * Math.sin(b), d = a.x * Math.sin(b) + a.y * Math.cos(b);
                    return {
                        x: c,
                        y: d
                    };
                }
                function n(a, b) {
                    return a === b || void 0 !== a && void 0 !== b && a.x === b.x && a.y === b.y;
                }
                function o(b, c) {
                    return b === c || void 0 !== b && void 0 !== c && a.Double.equalWithPrecision(b.x, c.x) && a.Double.equalWithPrecision(b.y, c.y);
                }
                function p(a, b) {
                    return a && b ? {
                        x: a.x + b.x,
                        y: a.y + b.y
                    } : void 0;
                }
                function q(a, b) {
                    return a && b ? {
                        x: a.x - b.x,
                        y: a.y - b.y
                    } : void 0;
                }
                function r(a, b) {
                    return a && b ? a.x * b.x + a.y * b.y : void 0;
                }
                function s(a, b) {
                    return a && b ? {
                        x: b.x - a.x,
                        y: b.y - a.y
                    } : void 0;
                }
                b.isEmpty = c, b.equals = d, b.clone = e, b.toString = f, b.getLength = g, b.getLengthSqr = h, 
                b.scale = i, b.normalize = j, b.rotate90DegCW = k, b.rotate90DegCCW = l, b.rotate = m, 
                b.equal = n, b.equalWithPrecision = o, b.add = p, b.subtract = q, b.dotProduct = r, 
                b.getDeltaVector = s;
            }(h = b.Vector || (b.Vector = {}));
        }(c = b.shapes || (b.shapes = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b(a, b) {
                return "translate(" + a + "," + b + ")";
            }
            function c(a) {
                return "translateX(" + a + "px)";
            }
            function d(a, b) {
                return "translate(" + a + "px," + b + "px)";
            }
            function e(a, b, c, d, e) {
                return "translate(" + a + "," + b + ") rotate(" + e + "," + c + "," + d + ")";
            }
            function f() {
                var a = Date.now;
                Date.now = function() {
                    return 1 / 0;
                }, d3.timer.flush(), Date.now = a;
            }
            function g(a) {
                if (a) {
                    var b = a, c = a;
                    c.animation && (b = c.animation), b && b.transitionImmediate && f();
                }
            }
            function h(a) {
                a.getAttribute("d") || a.setAttribute("d", "");
            }
            function i(a) {
                isNaN(a.x) && (a.x = 0), isNaN(a.y) && (a.y = 0);
            }
            function j(a) {
                if (!a || 0 === a.length) return {
                    x: "0",
                    y: "0"
                };
                var b, c = a.split(/[\s,]+/), d = "0", e = c[0];
                if (1 === c.length) b = e.substring(10, e.length - 1); else {
                    var f = c[1];
                    d = f.substring(0, f.length - 1);
                    var b = e.substring(10, e.length);
                }
                return {
                    x: b,
                    y: d
                };
            }
            function k(a) {
                return a + "px";
            }
            a.AlmostZero = 1e-6, a.translate = b, a.translateXWithPixels = c, a.translateWithPixels = d, 
            a.translateAndRotate = e, a.flushAllD3Transitions = f, a.flushAllD3TransitionsIfNeeded = g, 
            a.ensureDAttribute = h, a.ensureValidSVGPoint = i, a.parseTranslateTransform = j, 
            a.convertToPixelString = k;
        }(b = a.SVGUtil || (a.SVGUtil = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b(a) {
                return a.toString().replace(new RegExp(" ", "g"), "&nbsp");
            }
            a.removeBreakingSpaces = b;
        }(b = a.TextUtil || (a.TextUtil = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b, c = jsCommon.Utility;
        !function(a) {
            function b(a, b) {
                return null != a && null != a.type && null != a.type.misc && null != a.type.misc.webUrl && a.type.misc.webUrl && null != b && c.isValidUrl(b);
            }
            a.isValidUrl = b;
        }(b = a.UrlHelper || (a.UrlHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(c) {
            function d(a) {
                if (a) for (var b in a) {
                    var c = a[b];
                    for (var d in c.properties) {
                        var e = c.properties[d];
                        if (e.type && e.type.fillRule) return e.rule.inputRole;
                    }
                }
            }
            function e(a) {
                var b = a && a.query && a.query.projections && a.query.projections.Gradient ? !0 : !1;
                return b;
            }
            function f(a) {
                var b;
                if (a && !$.isEmptyObject(a)) {
                    b = i();
                    for (var c in b) {
                        var d = a.hasOwnProperty(c);
                        if (d) {
                            var e = a[c];
                            e && e.solid && e.solid.color && (e = e.solid.color), b[c] = e;
                        }
                    }
                }
                return b;
            }
            function g(a) {
                if (a && a.values) {
                    var c = a.values.grouped();
                    return b.DataRoleHelper.getMeasureIndexOfRole(c, "Gradient");
                }
                return -1;
            }
            function h(a) {
                var b = g(a);
                return b >= 0;
            }
            function i() {
                var a = n(), b = {
                    diverging: !1,
                    minColor: a.minColor,
                    midColor: y,
                    maxColor: a.maxColor,
                    minValue: void 0,
                    midValue: void 0,
                    maxValue: void 0
                };
                return b;
            }
            function j() {
                return p();
            }
            function k(a, b, c) {
                var d, e = c.dataPoint[0].properties, f = e.fillRule;
                f && ($.isNumeric(b) && (d = void 0 !== b ? x["double"](+b) : void 0), "minColor" === a ? r(f, b) : "midColor" === a ? s(f, b) : "maxColor" === a ? t(f, b) : "minValue" === a ? u(f, d) : "midValue" === a ? v(f, d) : "maxValue" === a ? w(f, d) : "diverging" === a ? (f = b ? q(f) : p(f), 
                e.fillRule = f) : "revertToDefault" === a && (f = this.getDefaultFillRuleDefinition(), 
                e.fillRule = f));
            }
            function l(a) {
                return a ? o(a) : i();
            }
            function m(a) {
                return a && a.dataPoint && a.dataPoint.length > 0 && a.dataPoint[0].properties ? a.dataPoint[0].properties.fillRule : null;
            }
            function n() {
                var b = new a.visuals.DataColorPalette(), c = b.getColor(0), d = d3.scale.linear().domain([ 0, 100 ]).range([ "#ffffff", c.value ]), e = c.value, f = d(20), g = y;
                return {
                    minColor: f,
                    midColor: g,
                    maxColor: e
                };
            }
            function o(a) {
                var b, c, d, e, f, g = y, h = void 0 !== a.linearGradient3;
                if (a.linearGradient2) {
                    var i = a.linearGradient2.max.color, j = a.linearGradient2.min.color, k = a.linearGradient2.max.value, l = a.linearGradient2.min.value;
                    b = i.value, c = j.value, k && (d = k.value), l && (f = l.value);
                } else if (a.linearGradient3) {
                    var i = a.linearGradient3.max.color, m = a.linearGradient3.mid.color, j = a.linearGradient3.min.color, k = a.linearGradient3.max.value, n = a.linearGradient3.mid.value, l = a.linearGradient3.min.value;
                    b = i.value, g = m.value, c = j.value, k && (d = k.value), n && (e = n.value), l && (f = l.value);
                }
                return {
                    diverging: h,
                    minColor: c,
                    midColor: g,
                    maxColor: b,
                    minValue: f,
                    midValue: e,
                    maxValue: d
                };
            }
            function p(a) {
                var b = l(a), c = {
                    linearGradient2: {
                        max: {
                            color: x.text(b.maxColor)
                        },
                        min: {
                            color: x.text(b.minColor)
                        }
                    }
                };
                return c;
            }
            function q(a) {
                var b = l(a), c = {
                    linearGradient3: {
                        max: {
                            color: x.text(b.maxColor)
                        },
                        mid: {
                            color: x.text(b.midColor)
                        },
                        min: {
                            color: x.text(b.minColor)
                        }
                    }
                };
                return c;
            }
            function r(a, b) {
                a.linearGradient2 ? a.linearGradient2.min.color = x.text(b) : a.linearGradient3 && (a.linearGradient3.min.color = x.text(b));
            }
            function s(a, b) {
                a.linearGradient3 && (a.linearGradient3.mid.color = x.text(b));
            }
            function t(a, b) {
                a.linearGradient2 ? a.linearGradient2.max.color = x.text(b) : a.linearGradient3 && (a.linearGradient3.max.color = x.text(b));
            }
            function u(a, b) {
                a.linearGradient2 ? a.linearGradient2.min.value = b : a.linearGradient3 && (a.linearGradient3.min.value = b);
            }
            function v(a, b) {
                a.linearGradient3 && (a.linearGradient3.mid.value = b);
            }
            function w(a, b) {
                a.linearGradient2 ? a.linearGradient2.max.value = b : a.linearGradient3 && (a.linearGradient3.max.value = b);
            }
            var x = a.data.SQExprBuilder, y = "#ffffff";
            c.getFillRuleRole = d, c.shouldShowGradient = e, c.getUpdatedGradientSettings = f, 
            c.getGradientMeasureIndex = g, c.hasGradientRole = h, c.getDefaultGradientSettings = i, 
            c.getDefaultFillRuleDefinition = j, c.updateFillRule = k, c.getGradientSettings = l, 
            c.getFillRule = m, c.getGradientSettingsFromRule = o;
        }(c = b.GradientUtils || (b.GradientUtils = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b() {
                return "#FFF";
            }
            function c() {
                return 50;
            }
            function d() {
                return !0;
            }
            function e() {
                return {
                    color: b(),
                    transparency: c(),
                    show: d()
                };
            }
            a.getDefaultColor = b, a.getDefaultTransparency = c, a.getDefaultShow = d, a.getDefaultValues = e;
        }(b = a.visualBackgroundHelper || (a.visualBackgroundHelper = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b = a.visuals.shapes;
    !function(a) {
        a[a.None = 0] = "None", a[a.TopLeft = 1] = "TopLeft", a[a.TopCenter = 2] = "TopCenter", 
        a[a.TopRight = 4] = "TopRight", a[a.MiddleLeft = 8] = "MiddleLeft", a[a.MiddleCenter = 16] = "MiddleCenter", 
        a[a.MiddleRight = 32] = "MiddleRight", a[a.BottomLeft = 64] = "BottomLeft", a[a.BottomCenter = 128] = "BottomCenter", 
        a[a.BottomRight = 256] = "BottomRight", a[a.InsideCenter = 512] = "InsideCenter", 
        a[a.InsideBase = 1024] = "InsideBase", a[a.InsideEnd = 2048] = "InsideEnd", a[a.OutsideBase = 4096] = "OutsideBase", 
        a[a.OutsideEnd = 8192] = "OutsideEnd", a[a.All = a.TopLeft | a.TopCenter | a.TopRight | a.MiddleLeft | a.MiddleCenter | a.MiddleRight | a.BottomLeft | a.BottomCenter | a.BottomRight | a.InsideCenter | a.InsideBase | a.InsideEnd | a.OutsideBase | a.OutsideEnd] = "All";
    }(a.ContentPositions || (a.ContentPositions = {}));
    a.ContentPositions;
    !function(a) {
        a[a.None = 0] = "None", a[a.VerticalBottomTop = 1] = "VerticalBottomTop", a[a.VerticalTopBottom = 2] = "VerticalTopBottom", 
        a[a.HorizontalLeftRight = 3] = "HorizontalLeftRight", a[a.HorizontalRightLeft = 4] = "HorizontalRightLeft";
    }(a.RectOrientation || (a.RectOrientation = {}));
    a.RectOrientation;
    !function(a) {
        a[a.Allowed = 0] = "Allowed", a[a.Disallowed = 1] = "Disallowed", a[a.Partial = 2] = "Partial";
    }(a.OutsidePlacement || (a.OutsidePlacement = {}));
    var c = (a.OutsidePlacement, function() {
        function c() {
            this.movingStep = 3, this.hideOverlapped = !0, this._defaultSettings = {
                anchorMargin: c.DefaultAnchorMargin,
                anchorRectOrientation: 0,
                contentPosition: 128,
                outsidePlacement: 1,
                maximumMovingDistance: c.DefaultMaximumMovingDistance,
                minimumMovingDistance: c.DefaultMinimumMovingDistance,
                validContentPositions: 128,
                opacity: 1
            };
        }
        return Object.defineProperty(c.prototype, "defaultSettings", {
            get: function() {
                return this._defaultSettings;
            },
            enumerable: !0,
            configurable: !0
        }), c.prototype.hideCollidedLabels = function(a, b, e) {
            this._size = {
                width: a.width,
                height: a.height
            };
            for (var f = new d(this._size, b, e), g = [], h = 0, i = b.length; i > h; h++) if (e.filter(b[h])) {
                var j = this.getLabelInfo(b[h]);
                j.anchorPoint = {
                    x: e.labelLayout.x(b[h]),
                    y: e.labelLayout.y(b[h])
                };
                var k = this.calculateContentPosition(j, j.contentPosition, b[h].size, j.anchorMargin);
                c.isValid(k) && !this.hasCollisions(f, j, k, this._size) && (b[h].labelX = k.left, 
                b[h].labelY = k.top, f.add(j, k), g.push(b[h]));
            }
            return g;
        }, c.prototype.getLabelInfo = function(a) {
            var b = this._defaultSettings;
            return a.anchorMargin = void 0 !== a.anchorMargin ? a.anchorMargin : b.anchorMargin, 
            a.anchorRectOrientation = void 0 !== a.anchorRectOrientation ? a.anchorRectOrientation : b.anchorRectOrientation, 
            a.contentPosition = void 0 !== a.contentPosition ? a.contentPosition : b.contentPosition, 
            a.maximumMovingDistance = void 0 !== a.maximumMovingDistance ? a.maximumMovingDistance : b.maximumMovingDistance, 
            a.minimumMovingDistance = void 0 !== a.minimumMovingDistance ? a.minimumMovingDistance : b.minimumMovingDistance, 
            a.outsidePlacement = void 0 !== a.outsidePlacement ? a.outsidePlacement : b.outsidePlacement, 
            a.validContentPositions = void 0 !== a.validContentPositions ? a.validContentPositions : b.validContentPositions, 
            a.opacity = void 0 !== a.opacity ? a.opacity : b.opacity, a.maximumMovingDistance += a.anchorMargin, 
            a;
        }, c.prototype.calculateContentPositionFromPoint = function(a, b, c, d) {
            var e = {
                x: 0,
                y: 0
            };
            if (a) {
                if (void 0 !== a.x && isFinite(a.x)) switch (e.x = a.x, b) {
                  case 1:
                  case 8:
                  case 64:
                    e.x -= c.width / 2;
                    break;

                  case 4:
                  case 32:
                  case 256:
                    e.x += c.width / 2;
                }
                if (void 0 !== a.y && isFinite(a.y)) switch (e.y = a.y, b) {
                  case 8:
                  case 16:
                  case 32:
                    e.y -= c.height / 2;
                    break;

                  case 4:
                  case 1:
                  case 2:
                    e.y -= c.height;
                }
                if (void 0 !== d && isFinite(d)) switch (b) {
                  case 1:
                    e.x -= d, e.y -= d;
                    break;

                  case 8:
                    e.x -= d;
                    break;

                  case 64:
                    e.x -= d, e.y += d;
                    break;

                  case 2:
                    e.y -= d;
                    break;

                  case 16:
                    break;

                  case 128:
                    e.y += d;
                    break;

                  case 4:
                    e.x += d, e.y -= d;
                    break;

                  case 32:
                    e.x += d;
                    break;

                  case 256:
                    e.x += d, e.y += d;
                }
            }
            return {
                left: e.x,
                top: e.y,
                width: c.width,
                height: c.height
            };
        }, c.prototype.calculateContentPositionFromRect = function(a, b, c, d, e) {
            switch (c) {
              case 512:
                return this.handleInsideCenterPosition(b, d, a, e);

              case 2048:
                return this.handleInsideEndPosition(b, d, a, e);

              case 1024:
                return this.handleInsideBasePosition(b, d, a, e);

              case 8192:
                return this.handleOutsideEndPosition(b, d, a, e);

              case 4096:
                return this.handleOutsideBasePosition(b, d, a, e);
            }
            return {
                left: 0,
                top: 0,
                width: -1,
                height: -1
            };
        }, c.prototype.handleInsideCenterPosition = function(a, b, c, d) {
            switch (a) {
              case 1:
              case 2:
                return e.middleVertical(b, c, d);

              case 3:
              case 4:
              default:
                return e.middleHorizontal(b, c, d);
            }
        }, c.prototype.handleInsideEndPosition = function(a, b, c, d) {
            switch (a) {
              case 1:
                return e.topInside(b, c, d);

              case 2:
                return e.bottomInside(b, c, d);

              case 4:
                return e.leftInside(b, c, d);

              case 3:
              default:
                return e.rightInside(b, c, d);
            }
        }, c.prototype.handleInsideBasePosition = function(a, b, c, d) {
            switch (a) {
              case 1:
                return e.bottomInside(b, c, d);

              case 2:
                return e.topInside(b, c, d);

              case 4:
                return e.rightInside(b, c, d);

              case 3:
              default:
                return e.leftInside(b, c, d);
            }
        }, c.prototype.handleOutsideEndPosition = function(a, b, c, d) {
            switch (a) {
              case 1:
                return e.topOutside(b, c, d);

              case 2:
                return e.bottomOutside(b, c, d);

              case 4:
                return e.leftOutside(b, c, d);

              case 3:
              default:
                return e.rightOutside(b, c, d);
            }
        }, c.prototype.handleOutsideBasePosition = function(a, b, c, d) {
            switch (a) {
              case 1:
                return e.bottomOutside(b, c, d);

              case 2:
                return e.topOutside(b, c, d);

              case 4:
                return e.rightOutside(b, c, d);

              case 3:
              default:
                return e.leftOutside(b, c, d);
            }
        }, c.prototype.calculateContentPosition = function(a, b, c, d) {
            return 2048 !== b && 512 !== b && 1024 !== b && 4096 !== b && 8192 !== b ? this.calculateContentPositionFromPoint(a.anchorPoint, b, c, d) : this.calculateContentPositionFromRect(a.anchorRect, a.anchorRectOrientation, b, c, d);
        }, c.prototype.hasCollisions = function(d, e, f, g) {
            var h = b.Rect;
            if (d.hasConflict(f)) return !0;
            var i = {
                left: 0,
                top: f.height / 2,
                width: g.width,
                height: g.height
            };
            if (i = h.inflate(i, {
                left: c.InflateAmount,
                top: 0,
                right: c.InflateAmount,
                bottom: 0
            }), i = h.intersect(i, f), h.isEmpty(i)) return !0;
            var j = a.Double.lessWithPrecision;
            switch (e.outsidePlacement) {
              case 1:
                return j(i.width, f.width) || j(i.height, f.height / 2);

              case 2:
                return j(i.width, f.width / 2) || j(i.height, f.height / 4);
            }
            return !1;
        }, c.isValid = function(a) {
            return !b.Rect.isEmpty(a) && a.width > 0 && a.height > 0;
        }, c.DefaultAnchorMargin = 0, c.DefaultMaximumMovingDistance = 12, c.DefaultMinimumMovingDistance = 3, 
        c.InflateAmount = 5, c;
    }());
    a.DataLabelManager = c;
    var d = function() {
        function c(b, d, e) {
            this._grid = [], (0 === b.width || 0 === b.height) && (this._cellSize = b, this._rowCount = this._colCount = 0), 
            this._cellSize = {
                width: 0,
                height: 0
            };
            for (var f = 0, g = d.length; g > f; f++) {
                var h = d[f];
                h.labeltext = e.labelText(h);
                var i = {
                    fontFamily: a.visuals.dataLabelUtils.LabelTextProperties.fontFamily,
                    fontSize: a.visuals.dataLabelUtils.LabelTextProperties.fontSize,
                    fontWeight: a.visuals.dataLabelUtils.LabelTextProperties.fontWeight,
                    text: h.labeltext
                };
                h.size = {
                    width: a.TextMeasurementService.measureSvgTextWidth(i),
                    height: a.TextMeasurementService.measureSvgTextHeight(i)
                };
                var j = 2 * h.size.width, k = 2 * h.size.height;
                j > this._cellSize.width && (this._cellSize.width = j), k > this._cellSize.height && (this._cellSize.height = k);
            }
            0 === this._cellSize.width && (this._cellSize.width = b.width), 0 === this._cellSize.height && (this._cellSize.height = b.height), 
            this._colCount = this.getGridRowColCount(this._cellSize.width, b.width, c.ARRANGEGRID_MIN_COUNT, c.ARRANGEGRID_MAX_COUNT), 
            this._rowCount = this.getGridRowColCount(this._cellSize.height, b.height, c.ARRANGEGRID_MIN_COUNT, c.ARRANGEGRID_MAX_COUNT), 
            this._cellSize.width = b.width / this._colCount, this._cellSize.height = b.height / this._rowCount;
            for (var l = this._grid, m = 0; m < this._colCount; m++) {
                l[m] = [];
                for (var n = 0; n < this._rowCount; n++) l[m][n] = [];
            }
        }
        return c.prototype.add = function(a, b) {
            for (var c = this.getGridIndexRect(b), d = this._grid, e = c.left; e < c.right; e++) for (var f = c.top; f < c.bottom; f++) d[e][f].push({
                element: a,
                rect: b
            });
        }, c.prototype.hasConflict = function(a) {
            for (var c = this.getGridIndexRect(a), d = this._grid, e = b.Rect.isIntersecting, f = c.left; f < c.right; f++) for (var g = c.top; g < c.bottom; g++) for (var h = 0; h < d[f][g].length; h++) {
                var i = d[f][g][h];
                if (e(i.rect, a)) return !0;
            }
            return !1;
        }, c.prototype.getGridRowColCount = function(a, b, c, d) {
            return Math.min(Math.max(Math.ceil(b / a), c), d);
        }, c.prototype.getGridIndexRect = function(a) {
            var b = function(a, b, c) {
                return Math.min(Math.max(a, b), c);
            };
            return {
                left: b(Math.floor(a.left / this._cellSize.width), 0, this._colCount),
                top: b(Math.floor(a.top / this._cellSize.height), 0, this._rowCount),
                right: b(Math.ceil((a.left + a.width) / this._cellSize.width), 0, this._colCount),
                bottom: b(Math.ceil((a.top + a.height) / this._cellSize.height), 0, this._rowCount)
            };
        }, c.ARRANGEGRID_MIN_COUNT = 1, c.ARRANGEGRID_MAX_COUNT = 100, c;
    }();
    a.DataLabelArrangeGrid = d;
    var e;
    !function(a) {
        function b(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2,
                top: b.top + c,
                width: a.width,
                height: a.height
            };
        }
        function c(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2,
                top: b.top + b.height - a.height - c,
                width: a.width,
                height: a.height
            };
        }
        function d(a, b, c) {
            return {
                left: b.left + b.width - a.width - c,
                top: b.top + b.height / 2 - a.height / 2,
                width: a.width,
                height: a.height
            };
        }
        function e(a, b, c) {
            return {
                left: b.left + c,
                top: b.top + b.height / 2 - a.height / 2,
                width: a.width,
                height: a.height
            };
        }
        function f(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2,
                top: b.top - a.height - c,
                width: a.width,
                height: a.height
            };
        }
        function g(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2,
                top: b.top + b.height + c,
                width: a.width,
                height: a.height
            };
        }
        function h(a, b, c) {
            return {
                left: b.left + b.width + c,
                top: b.top + b.height / 2 - a.height / 2,
                width: a.width,
                height: a.height
            };
        }
        function i(a, b, c) {
            return {
                left: b.left - a.width - c,
                top: b.top + b.height / 2 - a.height / 2,
                width: a.width,
                height: a.height
            };
        }
        function j(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2 + c,
                top: b.top + b.height / 2 - a.height / 2,
                width: a.width,
                height: a.height
            };
        }
        function k(a, b, c) {
            return {
                left: b.left + b.width / 2 - a.width / 2,
                top: b.top + b.height / 2 - a.height / 2 + c,
                width: a.width,
                height: a.height
            };
        }
        a.topInside = b, a.bottomInside = c, a.rightInside = d, a.leftInside = e, a.topOutside = f, 
        a.bottomOutside = g, a.rightOutside = h, a.leftOutside = i, a.middleHorizontal = j, 
        a.middleVertical = k;
    }(e || (e = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b = function() {
        function b(a) {
            this.unit = a, this.sequence = [], this.min = new Date("9999-12-31T23:59:59.999"), 
            this.max = new Date("0001-01-01T00:00:00.000");
        }
        return b.prototype.add = function(a) {
            a < this.min && (this.min = a), a > this.max && (this.max = a), this.sequence.push(a);
        }, b.prototype.extendToCover = function(a, c) {
            for (var d = this.min; d > a; ) d = b.addInterval(d, -this.interval, this.unit), 
            this.sequence.splice(0, 0, d);
            for (this.min = d, d = this.max; c > d; ) d = b.addInterval(d, this.interval, this.unit), 
            this.sequence.push(d);
            this.max = d;
        }, b.prototype.moveToCover = function(a, c) {
            var d = b.getDelta(a, c, this.unit), e = Math.floor(d / this.interval);
            for (this.min = b.addInterval(this.min, e * this.interval, this.unit), this.sequence = [], 
            this.sequence.push(this.min), this.max = this.min; this.max < c; ) this.max = b.addInterval(this.max, this.interval, this.unit), 
            this.sequence.push(this.max);
        }, b.calculate = function(a, c, d, e) {
            switch (e || (e = b.getIntervalUnit(a, c, d)), e) {
              case 0:
                return b.calculateYears(a, c, d);

              case 1:
                return b.calculateMonths(a, c, d);

              case 2:
                return b.calculateWeeks(a, c, d);

              case 3:
                return b.calculateDays(a, c, d);

              case 4:
                return b.calculateHours(a, c, d);

              case 5:
                return b.calculateMinutes(a, c, d);

              case 6:
                return b.calculateSeconds(a, c, d);

              case 7:
                return b.calculateMilliseconds(a, c, d);
            }
        }, b.calculateYears = function(c, d, e) {
            for (var f = a.NumericSequenceRange.calculateDataRange(c.getFullYear(), d.getFullYear(), !1), g = a.NumericSequence.calculate(f, e, 0), h = g.sequence, i = new b(0), j = 0; j < h.length; j++) {
                var k = h[j];
                k && i.add(new Date(k, 0, 1));
            }
            return i.interval = g.interval, i.intervalOffset = g.intervalOffset, i;
        }, b.calculateMonths = function(c, d, e) {
            var f = c.getFullYear(), g = d.getFullYear(), h = c.getMonth(), i = 12 * (g - f) + d.getMonth(), j = new Date(f, 0, 1), k = a.NumericSequence.calculateUnits(h, i, e, [ 1, 2, 3, 6, 12 ]), l = b.fromNumericSequence(j, k, 1);
            return l;
        }, b.calculateWeeks = function(c, d, e) {
            var f = 0, g = c.getDay(), h = (g - f + 7) % 7, i = c.getDate() - h, j = new Date(c.getFullYear(), c.getMonth(), i), k = 0, l = a.Double.ceilWithPrecision(b.getDelta(j, d, 2)), m = a.NumericSequence.calculateUnits(k, l, e, [ 1, 2, 4, 8 ]), n = b.fromNumericSequence(j, m, 2);
            return n;
        }, b.calculateDays = function(c, d, e) {
            var f = new Date(c.getFullYear(), c.getMonth(), c.getDate()), g = 0, h = a.Double.ceilWithPrecision(b.getDelta(c, d, 3)), i = a.NumericSequence.calculateUnits(g, h, e, [ 1, 2, 7, 14 ]), j = b.fromNumericSequence(f, i, 3);
            return j;
        }, b.calculateHours = function(c, d, e) {
            var f = new Date(c.getFullYear(), c.getMonth(), c.getDate()), g = a.Double.floorWithPrecision(b.getDelta(f, c, 4)), h = a.Double.ceilWithPrecision(b.getDelta(f, d, 4)), i = a.NumericSequence.calculateUnits(g, h, e, [ 1, 2, 3, 6, 12, 24 ]), j = b.fromNumericSequence(f, i, 4);
            return j;
        }, b.calculateMinutes = function(c, d, e) {
            var f = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours()), g = a.Double.floorWithPrecision(b.getDelta(f, c, 5)), h = a.Double.ceilWithPrecision(b.getDelta(f, d, 5)), i = a.NumericSequence.calculateUnits(g, h, e, [ 1, 2, 5, 10, 15, 30, 60, 120, 180, 360, 720, 1440 ]), j = b.fromNumericSequence(f, i, 5);
            return j;
        }, b.calculateSeconds = function(c, d, e) {
            var f = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes()), g = a.Double.floorWithPrecision(b.getDelta(f, c, 6)), h = a.Double.ceilWithPrecision(b.getDelta(f, d, 6)), i = a.NumericSequence.calculateUnits(g, h, e, [ 1, 2, 5, 10, 15, 30, 60, 120, 300, 600, 900, 1800, 3600 ]), j = b.fromNumericSequence(f, i, 6);
            return j;
        }, b.calculateMilliseconds = function(c, d, e) {
            var f = new Date(c.getFullYear(), c.getMonth(), c.getDate(), c.getHours(), c.getMinutes(), c.getSeconds()), g = b.getDelta(f, c, 7), h = b.getDelta(f, d, 7), i = a.NumericSequence.calculate(a.NumericSequenceRange.calculate(g, h), e, 0), j = b.fromNumericSequence(f, i, 7);
            return j;
        }, b.fromNumericSequence = function(a, c, d) {
            for (var e = new b(d), f = 0; f < c.sequence.length; f++) {
                var g = c.sequence[f], h = b.addInterval(a, g, d);
                e.add(h);
            }
            return e.interval = c.interval, e.intervalOffset = c.intervalOffset, e;
        }, b.addInterval = function(a, b, d) {
            switch (b = Math.round(b), d) {
              case 0:
                return c.addYears(a, b);

              case 1:
                return c.addMonths(a, b);

              case 2:
                return c.addWeeks(a, b);

              case 3:
                return c.addDays(a, b);

              case 4:
                return c.addHours(a, b);

              case 5:
                return c.addMinutes(a, b);

              case 6:
                return c.addSeconds(a, b);

              case 7:
                return c.addMilliseconds(a, b);
            }
        }, b.getDelta = function(a, b, c) {
            var d = 0;
            switch (c) {
              case 0:
                d = b.getFullYear() - a.getFullYear();
                break;

              case 1:
                d = 12 * (b.getFullYear() - a.getFullYear()) + b.getMonth() - a.getMonth();
                break;

              case 2:
                d = (b.getTime() - a.getTime()) / 6048e5;
                break;

              case 3:
                d = (b.getTime() - a.getTime()) / 864e5;
                break;

              case 4:
                d = (b.getTime() - a.getTime()) / 36e5;
                break;

              case 5:
                d = (b.getTime() - a.getTime()) / 6e4;
                break;

              case 6:
                d = (b.getTime() - a.getTime()) / 1e3;
                break;

              case 7:
                d = b.getTime() - a.getTime();
            }
            return d;
        }, b.getIntervalUnit = function(a, c, d) {
            d = Math.max(d, 2);
            var e = b.getDelta(a, c, 3);
            if (e > 356 && e >= 180 * d) return 0;
            if (e > 60 && e > 7 * d) return 1;
            if (e > 14 && e > 2 * d) return 2;
            var f = b.getDelta(a, c, 4);
            if (e > 2 && f > 12 * d) return 3;
            if (f >= 24 && f >= d) return 4;
            var g = b.getDelta(a, c, 5);
            if (g > 2 && g >= d) return 5;
            var h = b.getDelta(a, c, 6);
            if (h > 2 && h >= .8 * d) return 6;
            var i = b.getDelta(a, c, 7);
            if (i > 0) return 7;
            var j = a;
            return 0 !== j.getMilliseconds() ? 7 : 0 !== j.getSeconds() ? 6 : 0 !== j.getMinutes() ? 5 : 0 !== j.getHours() ? 4 : 1 !== j.getDate() ? 3 : 0 !== j.getMonth() ? 1 : 0;
        }, b.MIN_COUNT = 1, b.MAX_COUNT = 1e3, b;
    }();
    a.DateTimeSequence = b;
    var c;
    !function(a) {
        function b(a) {
            return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;
        }
        function c(a, c) {
            return b(a) ? m[c] : l[c];
        }
        function d(a, c) {
            var d = a.getFullYear(), e = a.getMonth(), f = a.getDate(), g = 2 === e && 29 === f, h = new Date(a.getTime()), d = d + c;
            return g && !b(d) && (f = 28), h.setFullYear(d, e, f), h;
        }
        function e(a, b) {
            var d = a.getFullYear(), e = a.getMonth(), f = a.getDate(), g = new Date(a.getTime());
            return d += (b - b % 12) / 12, e += b % 12, e > 11 && (e %= 12, d++), f = Math.min(f, c(d, e)), 
            g.setFullYear(d, e, f), g;
        }
        function f(a, b) {
            return g(a, 7 * b);
        }
        function g(a, b) {
            var c = a.getFullYear(), d = a.getMonth(), e = a.getDate(), f = new Date(a.getTime());
            return f.setFullYear(c, d, e + b), f;
        }
        function h(a, b) {
            return new Date(a.getTime() + 36e5 * b);
        }
        function i(a, b) {
            return new Date(a.getTime() + 6e4 * b);
        }
        function j(a, b) {
            return new Date(a.getTime() + 1e3 * b);
        }
        function k(a, b) {
            return new Date(a.getTime() + b);
        }
        var l = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ], m = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
        a.addYears = d, a.addMonths = e, a.addWeeks = f, a.addDays = g, a.addHours = h, 
        a.addMinutes = i, a.addSeconds = j, a.addMilliseconds = k;
    }(c = a.DateUtils || (a.DateUtils = {}));
}(powerbi || (powerbi = {}));

var __extends = this.__extends || function(a, b) {
    function c() {
        this.constructor = a;
    }
    for (var d in b) b.hasOwnProperty(d) && (a[d] = b[d]);
    c.prototype = b.prototype, a.prototype = new c();
}, powerbi;

!function(a) {
    function b(b, e) {
        for (var f = [], g = 3; d > g; g++) {
            var h = b(g);
            h && c(f, a.Double.pow10(g), h.title, h.format, e);
        }
        return f;
    }
    function c(a, b, c, d, e) {
        if (c || d) {
            var f = b;
            if (a.length > 0) {
                var h = a[a.length - 1];
                e && (f = e(b, h.value, f)), h.applicableRangeMax = f;
            }
            var i = new g();
            i.value = b, i.applicableRangeMin = f, i.applicableRangeMax = 1e3 * f, i.title = c, 
            i.labelFormat = d, a.push(i);
        }
    }
    var d = 24, e = 1e14, f = 1e-4, g = function() {
        function b() {}
        return b.prototype.project = function(a) {
            return this.value ? a / this.value : a;
        }, b.prototype.reverseProject = function(a) {
            return this.value ? a * this.value : a;
        }, b.prototype.isApplicableTo = function(b) {
            b = Math.abs(b);
            var c = a.Double.getPrecision(b, 3);
            return a.Double.greaterOrEqualWithPrecision(b, this.applicableRangeMin, c) && a.Double.lessWithPrecision(b, this.applicableRangeMax, c);
        }, b;
    }();
    a.DisplayUnit = g;
    var h = function() {
        function b(a) {
            this.units = a ? a : [];
        }
        return Object.defineProperty(b.prototype, "title", {
            get: function() {
                return this.displayUnit ? this.displayUnit.title : void 0;
            },
            enumerable: !0,
            configurable: !0
        }), b.prototype.update = function(a) {
            void 0 !== a && (this._unitBaseValue = a, this.displayUnit = this.findApplicableDisplayUnit(a));
        }, b.prototype.findApplicableDisplayUnit = function(a) {
            for (var b = this.units.length, c = 0; b > c; c++) {
                var d = this.units[c];
                if (d.isApplicableTo(a)) return d;
            }
            return void 0;
        }, b.prototype.format = function(c, d, e, f) {
            if (!b.UNSUPPORTED_FORMATS.test(d)) {
                if (this.displayUnit) {
                    var g = this.displayUnit.project(c), h = f ? b.getNonScientificFormatWithPrecision(this.displayUnit.labelFormat, e) : this.displayUnit.labelFormat;
                    return this.formatHelper(c, g, h, d, e, f);
                }
                if (null != e) {
                    if (f && d && b.NUMBER_FORMAT.test(d)) {
                        var i = b.getFormatWithPrecision(e);
                        return d = d.replace(/0\.0*/g, i), this.formatHelper(c, c, "", d, e, f);
                    }
                    if (f) {
                        var h = b.getNonScientificFormatWithPrecision("{0}", e);
                        return this.formatHelper(c, c, h, d, e, f);
                    }
                    return this.formatHelper(c, c, "", d, e, f);
                }
            }
            return d = this.removeFractionIfNecessary(d), a.formattingService.formatValue(c, d);
        }, b.prototype.formatHelper = function(c, d, e, f, g, h) {
            var i = null != g ? a.Double.pow10(g) : a.Double.getPrecision(c), j = a.Double.roundToPrecision(d, i);
            if (f && !a.formattingService.isStandardNumberFormat(f)) return a.formattingService.formatNumberWithCustomOverride(j, f, e);
            var k = h ? b.getFormatWithPrecision(g) : "G", l = a.formattingService.formatValue(j, k);
            return a.formattingService.format(e, [ l ]);
        }, b.getNonScientificFormatWithPrecision = function(a, c) {
            if (!c || void 0 === a) return a;
            var d = "{0:" + b.getFormatWithPrecision(c) + "}";
            return a.replace("{0}", d);
        }, b.getFormatWithPrecision = function(a) {
            return null == a ? "G" : "0." + jsCommon.StringExtensions.repeat("0", Math.abs(a));
        }, b.prototype.formatSingleValue = function(b, c, d) {
            return this.update(this.shouldUseValuePrecision(b) ? a.Double.getPrecision(b, 8) : b), 
            this.format(b, c, d);
        }, b.prototype.shouldUseValuePrecision = function(a) {
            return 0 === this.units.length ? !0 : Math.abs(a) < this.units[0].applicableRangeMin;
        }, b.prototype.removeFractionIfNecessary = function(a) {
            return a && (Math.abs(this._unitBaseValue) >= .01 && (a = a.replace(/^(p\d*)$/i, "p0")), 
            Math.abs(this._unitBaseValue) >= 1 && (a = a.replace(/[#0]\.[#0]+$/, "0"), a = a.replace(/^(n\d*)$/i, "n0"), 
            a = a.replace(/^(f\d*)$/i, "f0"), a = a.replace(/^(c\d*)$/i, "c0"))), a;
        }, b.UNSUPPORTED_FORMATS = /^(p\d*)|(.*\%)|(e\d*)$/i, b.NUMBER_FORMAT = /#|0/, b;
    }();
    a.DisplayUnitSystem = h;
    var i = function(a) {
        function b() {
            a.call(this, []);
        }
        return __extends(b, a), b;
    }(h);
    a.NoDisplayUnitSystem = i;
    var j = function(a) {
        function c(b) {
            a.call(this, c.getUnits(b));
        }
        return __extends(c, a), c.prototype.format = function(b, c, d, e) {
            return !this.displayUnit && this.isScientific(b) && (!c || c.toUpperCase().indexOf("E") < 0) && (c = "0.######E+0"), 
            a.prototype.format.call(this, b, c, d, e);
        }, c.prototype.isScientific = function(a) {
            return -e > a || a > e || a > -f && f > a && 0 !== a;
        }, c.reset = function() {
            c._units = null;
        }, c.getUnits = function(a) {
            if (!c._units) {
                c._units = b(a, function(a, b, c) {
                    return a - b >= 1e3 ? a / 10 : c;
                }), c._scientificBigNumbersBoundary = e;
                for (var d = 0, f = c._units.length; f > d; ++d) {
                    var g = c._units[d];
                    g.applicableRangeMax > c._scientificBigNumbersBoundary && (c._scientificBigNumbersBoundary = g.applicableRangeMax);
                }
            }
            return c._units;
        }, c;
    }(h);
    a.DefaultDisplayUnitSystem = j;
    var k = function(a) {
        function c(b) {
            a.call(this, c.getUnits(b));
        }
        return __extends(c, a), c.reset = function() {
            c._units = null;
        }, c.getUnits = function(a) {
            return c._units || (c._units = b(a)), c._units;
        }, c;
    }(h);
    a.WholeUnitsDisplayUnitSystem = k;
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b = function() {
        function b() {}
        return b.calculate = function(c, d, e, f, g, h) {
            var i = new b();
            if (d = void 0 === d ? 10 : a.Double.ensureInRange(d, b.MIN_COUNT, b.MAX_COUNT), 
            void 0 === f && (f = a.Double.MIN_EXP), void 0 === g && (g = !1), void 0 === e && (e = 1), 
            void 0 === h && (h = [ 1, 2, 5 ]), c.forcedSingleStop) return i.interval = c.getSize(), 
            i.intervalOffset = i.interval - (c.forcedSingleStop - c.min), i.min = c.min, i.max = c.max, 
            i.sequence = [ c.forcedSingleStop ], i;
            var j = 0, k = 0, l = 9, m = e > 0 && !c.hasFixedMin, n = e > 0 && !c.hasFixedMax, o = c.getSize(), p = a.Double.log10(o), q = a.Double.log10(h[0]);
            p -= q;
            var r = a.Double.log10(d);
            if (p -= r, p = Math.max(p, f - q + 1), 0 !== j) {
                var s = a.Double.pow10(p), t = a.Double.floorToPrecision(c.min, s), u = a.Double.ceilToPrecision(c.max, s), v = a.NumericSequenceRange.calculateFixedRange(t, u);
                v.shrinkByStep(c, j), k = v.min, l = v.max;
                var w = Math.floor(v.getSize() / j);
            } else {
                var x;
                for (x = 0; 3 > x; x++) {
                    for (var y = p + x, s = a.Double.pow10(y), t = a.Double.floorToPrecision(c.min, s), u = a.Double.ceilToPrecision(c.max, s), z = h.length, A = a.Double.pow10(y - 1), B = 0; z > B; B++) {
                        var C = h[B] * A, v = a.NumericSequenceRange.calculateFixedRange(t, u, g);
                        if (v.shrinkByStep(c, C), m && c.min === v.min && e >= 1 && (v.min -= C), n && c.max === v.max && e >= 1 && (v.max += C), 
                        w = a.Double.ceilWithPrecision(v.getSize() / C), d >= w || 2 === x && B === z - 1 || 1 === d && 2 === w && (C > c.getSize() || c.min < 0 && c.max > 0 && 2 * C >= c.getSize())) {
                            j = C, k = v.min, l = v.max;
                            break;
                        }
                    }
                    if (0 !== j) break;
                }
            }
            (w > 32 * d || w > b.MAX_COUNT) && (w = Math.min(32 * d, b.MAX_COUNT), j = (l - k) / w), 
            i.min = k, i.max = l, i.interval = j, i.intervalOffset = k - c.min, i._maxAllowedMargin = e, 
            i._canExtendMin = m, i._canExtendMax = n;
            var D = a.Double.getPrecision(j, 0);
            i.precision = D;
            var E = [], F = a.Double.roundToPrecision(k, D);
            E.push(F);
            for (var B = 0; w > B; B++) F = a.Double.roundToPrecision(F + j, D), E.push(F);
            return i.sequence = E, i.trimMinMax(c.min, c.max), i;
        }, b.calculateUnits = function(c, d, e, f) {
            e = a.Double.ensureInRange(e, b.MIN_COUNT, b.MAX_COUNT), c === d && (d = c + 1);
            for (var g = 0, h = 0, i = 0; i < f.length; i++) {
                h = f[i];
                var j = a.Double.ceilWithPrecision(d / h), k = a.Double.floorWithPrecision(c / h);
                if (g = j - k, e >= g) break;
            }
            var l = -c;
            l %= h;
            var m = new b();
            m.sequence = [];
            for (var n = c + l; m.sequence.push(n), !(n >= d); n += h) ;
            return m.interval = h, m.intervalOffset = l, m.min = m.sequence[0], m.max = m.sequence[m.sequence.length - 1], 
            m;
        }, b.prototype.trimMinMax = function(a, b) {
            var c = (a - this.min) / this.interval, d = (this.max - b) / this.interval, e = .001;
            (!this._canExtendMin || c > this._maxAllowedMargin && c > e) && (this.min = a), 
            (!this._canExtendMax || d > this._maxAllowedMargin && d > e) && (this.max = b);
        }, b.MIN_COUNT = 1, b.MAX_COUNT = 1e3, b;
    }();
    a.NumericSequence = b;
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b = function() {
        function b() {}
        return b.prototype._ensureIncludeZero = function() {
            this.includeZero && (this.min > 0 && !this.hasFixedMin && (this.min = 0), this.max < 0 && !this.hasFixedMax && (this.max = 0));
        }, b.prototype._ensureNotEmpty = function() {
            if (this.min === this.max) if (this.min) {
                var c, d = this.min, e = a.Double.log10(Math.abs(d));
                e >= 0 && 4 > e ? (c = .5, this.forcedSingleStop = d) : (c = a.Double.pow10(e) / 2, 
                this.forcedSingleStop = null), this.min = d - c, this.max = d + c;
            } else this.min = 0, this.max = b.DEFAULT_MAX, this.hasFixedMin = !0, this.hasFixedMax = !0;
        }, b.prototype._ensureDirection = function() {
            if (this.min > this.max) {
                var a = this.min;
                this.min = this.max, this.max = a;
            }
        }, b.prototype.getSize = function() {
            return this.max - this.min;
        }, b.prototype.shrinkByStep = function(a, b) {
            var c = this.min / b, d = a.min / b, e = Math.floor(d - c);
            this.min += e * b, c = this.max / b, d = a.max / b, e = Math.ceil(d - c), this.max += e * b;
        }, b.calculate = function(d, e, f, g, h) {
            var i = new b();
            return i.includeZero = h ? !0 : !1, i.hasDataRange = c.hasValue(d) && c.hasValue(e), 
            i.hasFixedMin = c.hasValue(f), i.hasFixedMax = c.hasValue(g), d = a.Double.ensureInRange(d, b.MIN_SUPPORTED_DOUBLE, b.MAX_SUPPORTED_DOUBLE), 
            e = a.Double.ensureInRange(e, b.MIN_SUPPORTED_DOUBLE, b.MAX_SUPPORTED_DOUBLE), i.hasFixedMin && i.hasFixedMax ? (i.min = f, 
            i.max = g) : i.hasFixedMin ? (i.min = f, i.max = e > f ? e : f) : i.hasFixedMax ? (i.min = g > d ? d : g, 
            i.max = g) : i.hasDataRange ? (i.min = d, i.max = e) : (i.min = 0, i.max = 0), i._ensureIncludeZero(), 
            i._ensureNotEmpty(), i._ensureDirection(), 0 === i.min ? i.hasFixedMin = !0 : 0 === i.max && (i.hasFixedMax = !0), 
            i;
        }, b.calculateDataRange = function(a, d, e) {
            return c.hasValue(a) && c.hasValue(d) ? b.calculate(a, d, null, null, e) : b.calculateFixedRange(0, b.DEFAULT_MAX);
        }, b.calculateFixedRange = function(a, c, d) {
            var e = new b();
            return e.hasDataRange = !1, e.includeZero = d, e.min = a, e.max = c, e._ensureIncludeZero(), 
            e._ensureNotEmpty(), e._ensureDirection(), e.hasFixedMin = !0, e.hasFixedMax = !0, 
            e;
        }, b.DEFAULT_MAX = 10, b.MIN_SUPPORTED_DOUBLE = -1e307, b.MAX_SUPPORTED_DOUBLE = 1e307, 
        b;
    }();
    a.NumericSequenceRange = b;
    var c;
    !function(a) {
        function b(a) {
            return void 0 !== a && null !== a;
        }
        a.hasValue = b;
    }(c = a.ValueUtil || (a.ValueUtil = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            function c(a) {
                var b = w[a];
                return b ? x[b] || a : a;
            }
            function d(a) {
                var b = x["DisplayUnitSystem_E" + a + "_Title"], c = x["DisplayUnitSystem_E" + a + "_LabelFormat"];
                return b || c ? {
                    title: b,
                    format: c
                } : void 0;
            }
            function e(a) {
                return x[a];
            }
            function f(b) {
                return a.NumberFormat.getCustomFormatMetadata(b);
            }
            function g(b) {
                y = b, a.DefaultDisplayUnitSystem.reset(), a.WholeUnitsDisplayUnitSystem.reset();
            }
            function h(a, b) {
                void 0 === b && (b = !1);
                var c = b ? y.beautify(a) : a;
                return {
                    format: function(a) {
                        return null == a ? y["null"] : s(a, c);
                    }
                };
            }
            function i(b) {
                var c = b.allowFormatBeautification ? y.beautify(b.format) : b.format;
                if (m(b)) {
                    var d = l(b.displayUnitSystemType), e = !!b.formatSingleValues;
                    d.update(Math.max(Math.abs(b.value || 0), Math.abs(b.value2 || 0)));
                    var f, g = null != b.precision;
                    return g ? f = -b.precision : d.displayUnit && (f = -z), {
                        format: function(b) {
                            var h = t(b, !0);
                            return v.isNullOrUndefinedOrWhiteSpaceString(h) ? (b && !d.displayUnit && Math.abs(b) < A && !g && (b = a.Double.roundToPrecision(b, a.Double.pow10(a.Double.getPrecision(b)))), 
                            e ? d.formatSingleValue(b, c, f) : d.format(b, c, f, g)) : h;
                        },
                        displayUnit: d.displayUnit
                    };
                }
                if (n(b.value, b.value2, b.tickCount)) {
                    var i = a.DateTimeSequence.getIntervalUnit(b.value, b.value2, b.tickCount);
                    return {
                        format: function(b) {
                            if (null == b) return y["null"];
                            var c = a.formattingService.dateFormatString(i);
                            return s(b, c);
                        }
                    };
                }
                return h(c);
            }
            function j(a, b, c) {
                return null == a ? y["null"] : s(a, c ? y.beautify(b) : b);
            }
            function k(a, b) {
                return s(a, b);
            }
            function l(b) {
                if (null == b) return new a.DefaultDisplayUnitSystem(y.describe);
                switch (b) {
                  case 0:
                    return new a.DefaultDisplayUnitSystem(y.describe);

                  case 2:
                    return new a.WholeUnitsDisplayUnitSystem(y.describe);

                  case 1:
                    return new a.NoDisplayUnitSystem();

                  default:
                    return new a.DefaultDisplayUnitSystem(y.describe);
                }
            }
            function m(a) {
                var b = a.value, c = a.value2;
                return "number" == typeof b || "number" == typeof c ? !0 : void 0;
            }
            function n(a, b, c) {
                return a instanceof Date && b instanceof Date && void 0 !== c && null !== c;
            }
            function o(b, c, d) {
                if (b) {
                    if (c) {
                        var e = a.DataViewObjects.getValue(b.objects, c);
                        if (e) return e;
                    }
                    if (!d) {
                        var f = b.type;
                        if (f) {
                            if (f.dateTime) return "d";
                            if (f.integer) return "g";
                            if (f.numeric) return "#,0.00";
                        }
                    }
                }
            }
            function p(a, b) {
                var c;
                if (!a) return null;
                var d = a.length;
                if (d > 0) {
                    c = a[0];
                    for (var e = d - 1, f = 1, g = e; g > f; f++) {
                        var h = a[f];
                        c = v.format(y.restatementComma, c, h);
                    }
                    if (d > 1) {
                        var h = a[e];
                        c = v.format(b, c, h);
                    }
                } else c = null;
                return c;
            }
            function q(a) {
                return p(a, y.restatementCompoundAnd);
            }
            function r(a) {
                return p(a, y.restatementCompoundOr);
            }
            function s(b, c) {
                var d = t(b, !1);
                return v.isNullOrUndefinedOrWhiteSpaceString(d) ? a.formattingService.formatValue(b, c) : d;
            }
            function t(a, b) {
                return null == a && b ? y["null"] : a === !0 ? y["true"] : a === !1 ? y["false"] : "number" == typeof a && isNaN(a) ? y.NaN : a === Number.NEGATIVE_INFINITY ? y.negativeInfinity : a === Number.POSITIVE_INFINITY ? y.infinity : "";
            }
            function u(a) {
                var b = l(a);
                return b.units;
            }
            var v = jsCommon.StringExtensions, w = {
                "0.00 %;-0.00 %;0.00 %": "Percentage",
                "0.0 %;-0.0 %;0.0 %": "Percentage1"
            }, x = {
                NullValue: "(Blank)",
                BooleanTrue: "True",
                BooleanFalse: "False",
                NaNValue: "NaN",
                InfinityValue: "+Infinity",
                NegativeInfinityValue: "-Infinity",
                RestatementComma: "{0}, {1}",
                RestatementCompoundAnd: "{0} and {1}",
                RestatementCompoundOr: "{0} or {1}",
                DisplayUnitSystem_E3_LabelFormat: "{0}K",
                DisplayUnitSystem_E3_Title: "Thousands",
                DisplayUnitSystem_E6_LabelFormat: "{0}M",
                DisplayUnitSystem_E6_Title: "Millions",
                DisplayUnitSystem_E9_LabelFormat: "{0}bn",
                DisplayUnitSystem_E9_Title: "Billions",
                DisplayUnitSystem_E12_LabelFormat: "{0}T",
                DisplayUnitSystem_E12_Title: "Trillions",
                Percentage: "#,0.##%",
                Percentage1: "#,0.#%",
                TableTotalLabel: "Total",
                Tooltip_HighlightedValueDisplayName: "Highlighted",
                GeotaggingString_Continent: "continent",
                GeotaggingString_Continents: "continents",
                GeotaggingString_Country: "country",
                GeotaggingString_Countries: "countries",
                GeotaggingString_State: "state",
                GeotaggingString_States: "states",
                GeotaggingString_City: "city",
                GeotaggingString_Cities: "cities",
                GeotaggingString_Town: "town",
                GeotaggingString_Towns: "towns",
                GeotaggingString_Province: "province",
                GeotaggingString_Provinces: "provinces",
                GeotaggingString_County: "county",
                GeotaggingString_Counties: "counties",
                GeotaggingString_Village: "village",
                GeotaggingString_Villages: "villages",
                GeotaggingString_Post: "post",
                GeotaggingString_Zip: "zip",
                GeotaggingString_Code: "code",
                GeotaggingString_Place: "place",
                GeotaggingString_Places: "places",
                GeotaggingString_Address: "address",
                GeotaggingString_Addresses: "addresses",
                GeotaggingString_Street: "street",
                GeotaggingString_Streets: "streets",
                GeotaggingString_Longitude: "longitude",
                GeotaggingString_Longitude_Short: "lon",
                GeotaggingString_Latitude: "latitude",
                GeotaggingString_Latitude_Short: "lat",
                GeotaggingString_PostalCode: "postal code",
                GeotaggingString_PostalCodes: "postal codes",
                GeotaggingString_ZipCode: "zip code",
                GeotaggingString_ZipCodes: "zip codes",
                GeotaggingString_Territory: "territory",
                GeotaggingString_Territories: "territories"
            };
            b.getLocalizedString = e;
            var y = {
                "null": x.NullValue,
                "true": x.BooleanTrue,
                "false": x.BooleanFalse,
                NaN: x.NaNValue,
                infinity: x.InfinityValue,
                negativeInfinity: x.NegativeInfinityValue,
                beautify: function(a) {
                    return c(a);
                },
                describe: function(a) {
                    return d(a);
                },
                restatementComma: x.RestatementComma,
                restatementCompoundAnd: x.RestatementCompoundAnd,
                restatementCompoundOr: x.RestatementCompoundOr
            }, z = 2, A = 1e3;
            b.getFormatMetadata = f, b.setLocaleOptions = g, b.createDefaultFormatter = h, b.create = i, 
            b.format = j, b.formatRaw = k, b.getFormatString = o, b.formatListAnd = q, b.formatListOr = r, 
            b.getDisplayUnits = u;
        }(c = b.valueFormatter || (b.valueFormatter = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        function b() {
            return new c();
        }
        a.createColorAllocatorFactory = b;
        var c = function() {
            function a() {}
            return a.prototype.linearGradient2 = function(a) {
                return new d(a);
            }, a.prototype.linearGradient3 = function(a) {
                return new e(a);
            }, a;
        }(), d = function() {
            function a(a) {
                var b = a.min, c = a.max;
                this.scale = d3.scale.linear().domain([ b.value, c.value ]).range([ b.color, c.color ]).clamp(!0);
            }
            return a.prototype.color = function(a) {
                return this.scale(a);
            }, a;
        }(), e = function() {
            function a(a) {
                var b = a.min, c = a.mid, d = a.max;
                this.scale = d3.scale.linear().domain([ b.value, c.value, d.value ]).range([ b.color, c.color, d.color ]).clamp(!0);
            }
            return a.prototype.color = function(a) {
                return this.scale(a);
            }, a;
        }();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = {
            "0.00 %;-0.00 %;0.00 %": "Percentage",
            "0.0 %;-0.0 %;0.0 %": "Percentage1"
        }, c = {
            NullValue: "(Blank)",
            BooleanTrue: "True",
            BooleanFalse: "False",
            NaNValue: "NaN",
            InfinityValue: "+Infinity",
            NegativeInfinityValue: "-Infinity",
            Restatement_Comma: "{0}, {1}",
            Restatement_CompoundAnd: "{0} and {1}",
            DisplayUnitSystem_E3_LabelFormat: "{0}K",
            DisplayUnitSystem_E3_Title: "Thousands",
            DisplayUnitSystem_E6_LabelFormat: "{0}M",
            DisplayUnitSystem_E6_Title: "Millions",
            DisplayUnitSystem_E9_LabelFormat: "{0}bn",
            DisplayUnitSystem_E9_Title: "Billions",
            DisplayUnitSystem_E12_LabelFormat: "{0}T",
            DisplayUnitSystem_E12_Title: "Trillions",
            Percentage: "#,0.##%",
            Percentage1: "#,0.#%",
            TableTotalLabel: "Total",
            Tooltip_HighlightedValueDisplayName: "Highlighted",
            GeotaggingString_Continent: "continent",
            GeotaggingString_Continents: "continents",
            GeotaggingString_Country: "country",
            GeotaggingString_Countries: "countries",
            GeotaggingString_State: "state",
            GeotaggingString_States: "states",
            GeotaggingString_City: "city",
            GeotaggingString_Cities: "cities",
            GeotaggingString_Town: "town",
            GeotaggingString_Towns: "towns",
            GeotaggingString_Province: "province",
            GeotaggingString_Provinces: "provinces",
            GeotaggingString_County: "county",
            GeotaggingString_Counties: "counties",
            GeotaggingString_Village: "village",
            GeotaggingString_Villages: "villages",
            GeotaggingString_Post: "post",
            GeotaggingString_Zip: "zip",
            GeotaggingString_Code: "code",
            GeotaggingString_Place: "place",
            GeotaggingString_Places: "places",
            GeotaggingString_Address: "address",
            GeotaggingString_Addresses: "addresses",
            GeotaggingString_Street: "street",
            GeotaggingString_Streets: "streets",
            GeotaggingString_Longitude: "longitude",
            GeotaggingString_Longitude_Short: "lon",
            GeotaggingString_Latitude: "latitude",
            GeotaggingString_Latitude_Short: "lat",
            GeotaggingString_PostalCode: "postal code",
            GeotaggingString_PostalCodes: "postal codes",
            GeotaggingString_ZipCode: "zip code",
            GeotaggingString_ZipCodes: "zip codes",
            GeotaggingString_Territory: "territory",
            GeotaggingString_Territories: "territories"
        }, d = function() {
            function d() {}
            return d.initialize = function() {
                a.valueFormatter.setLocaleOptions(d.createLocaleOptions()), a.TooltipManager.setLocalizedStrings(d.createTooltipLocaleOptions());
            }, d.createLocaleOptions = function() {
                return {
                    "null": c.NullValue,
                    "true": c.BooleanTrue,
                    "false": c.BooleanFalse,
                    NaN: c.NaNValue,
                    infinity: c.InfinityValue,
                    negativeInfinity: c.NegativeInfinityValue,
                    beautify: function(a) {
                        return d.beautify(a);
                    },
                    describe: function(a) {
                        return d.describeUnit(a);
                    },
                    restatementComma: c.Restatement_Comma,
                    restatementCompoundAnd: c.Restatement_CompoundAnd,
                    restatementCompoundOr: c.Restatement_CompoundOr
                };
            }, d.createTooltipLocaleOptions = function() {
                return {
                    highlightedValueDisplayName: c.Tooltip_HighlightedValueDisplayName
                };
            }, d.prototype.getLocalizedString = function(a) {
                return c[a];
            }, d.prototype.onDragStart = function() {}, d.prototype.canSelect = function() {
                return !1;
            }, d.prototype.onSelect = function() {}, d.prototype.loadMoreData = function() {}, 
            d.prototype.persistProperties = function(a) {}, d.prototype.onCustomSort = function(a) {}, 
            d.prototype.getViewMode = function() {
                return 0;
            }, d.prototype.setWarnings = function(a) {}, d.prototype.setToolbar = function(a) {}, 
            d.beautify = function(a) {
                var d = b[a];
                return d ? c[d] || a : a;
            }, d.describeUnit = function(a) {
                var b = c["DisplayUnitSystem_E" + a + "_Title"], d = c["DisplayUnitSystem_E" + a + "_LabelFormat"];
                return b || d ? {
                    title: b,
                    format: d
                } : void 0;
            }, d;
        }();
        a.DefaultVisualHostServices = d, a.defaultVisualHostServices = new d();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a) {
            return new g(a);
        }
        function d(a) {
            return a.append("rect").classed("clearCatcher", !0).attr({
                width: "100%",
                height: "100%"
            });
        }
        function e(a) {
            for (var b = 0, c = a.length; c > b; b++) if (a[b].selected) return !0;
            return !1;
        }
        var f = jsCommon.ArrayExtensions;
        b.createInteractivityService = c, b.appendClearCatcher = d, b.dataHasSelection = e;
        var g = function() {
            function c(a) {
                this.sendSelectionToVisual = function() {}, this.sendSelectionToLegend = function() {}, 
                this.sendSelectionToSecondVisual = function() {}, this.selectedIds = [], this.hasColumnChart = !1, 
                this.hostService = a;
            }
            return c.prototype.clearSelection = function() {
                this.clearSelectionInternal(), this.sendSelectionToVisual(), this.sendSelectionToLegend(), 
                this.sendSelectionToSecondVisual();
            }, c.prototype.hasSelection = function() {
                return this.selectedIds.length > 0;
            }, c.prototype.legendHasSelection = function() {
                return e(this.selectableLegendDataPoints);
            }, c.prototype.select = function(a, b) {
                void 0 === b && (b = d3.event.ctrlKey), a.identity.highlight && (a = _.find(this.selectableDataPoints, function(b) {
                    return !b.identity.highlight && a.identity.includes(b.identity, !0);
                }));
                var c = a.identity;
                if (c) {
                    var d = !a.selected || !b && this.selectedIds.length > 1;
                    b && (d ? (a.selected = !0, this.selectedIds.push(c)) : (a.selected = !1, this.removeId(c))), 
                    b && this.hostService.canSelect({
                        data: this.selectedIds.map(function(a) {
                            return a.getSelector();
                        })
                    }) || (this.clearSelectionInternal(), d && (a.selected = !0, this.selectedIds.push(c))), 
                    this.syncSelectionState();
                }
            }, c.prototype.removeId = function(a) {
                for (var b = this.selectedIds, c = b.length - 1; c > -1; c--) {
                    var d = b[c];
                    a.includes(d) && b.splice(c, 1);
                }
            }, c.isSelected = function(b, c, d) {
                return null != c.objects && c.objects[d] && a.DataViewObjects.getValue(c.objects[d], b);
            }, c.prototype.createPropertiesToHost = function(b) {
                var c = {};
                if (this.selectedIds.length > 0) {
                    var d = a.data.Selector.filterFromSelector(this.selectedIds.map(function(a) {
                        return a.getSelector();
                    }), !1);
                    c[b.propertyName] = d;
                }
                return [ {
                    objectName: b.objectName,
                    selector: void 0,
                    properties: c
                } ];
            }, c.prototype.sendPersistPropertiesToHost = function(a) {
                this.hostService.persistProperties(this.createPropertiesToHost(a));
            }, c.prototype.sendSelectToHost = function() {
                var a = this.hostService;
                a.onSelect && a.onSelect({
                    data: this.selectedIds.filter(function(a) {
                        return a.hasIdentity();
                    }).map(function(a) {
                        return a.getSelector();
                    })
                });
            }, c.prototype.sendSelectionToHost = function(a) {
                a && this.sendPersistPropertiesToHost(a), this.sendSelectToHost();
            }, c.prototype.clearSelectionInternal = function() {
                f.clear(this.selectedIds);
                var a = this.selectableDataPoints, b = this.selectableLegendDataPoints, c = this.secondSelectableDataPoints;
                if (a) for (var d = a.length - 1; d > -1; d--) a[d].selected = !1;
                if (c) for (var d = c.length - 1; d > -1; d--) c[d].selected = !1;
                if (b) for (var d = b.length - 1; d > -1; d--) b[d].selected = !1;
            }, c.prototype.applySelectionStateToData = function(a) {
                for (var b = !1, c = 0, d = a.length; d > c; c++) {
                    var e = a[c];
                    e.selected = this.selectedIds.some(function(a) {
                        return a.includes(e.identity);
                    }), e.selected && (b = !0);
                }
                return b;
            }, c.prototype.initAndSyncSelectionState = function(a) {
                var b = this.selectableDataPoints, c = this.selectableLegendDataPoints, d = this.secondSelectableDataPoints, e = this.selectedIds;
                if (b && 0 === e.length) {
                    if (b) for (var f = 0, g = b.length; g > f; f++) b[f].selected && e.push(b[f].identity);
                    if (d) for (var f = 0, g = d.length; g > f; f++) d[f].selected && e.push(d[f].identity);
                    if (c) for (var f = 0, g = c.length; g > f; f++) c[f].selected && e.push(c[f].identity);
                }
                this.syncSelectionState(a);
            }, c.prototype.syncSelectionState = function(a) {
                var b = this.selectedIds, c = this.selectableDataPoints, d = this.selectableLegendDataPoints, e = this.secondSelectableDataPoints, f = !1;
                if (c) {
                    for (var g = 0, h = c.length; h > g; g++) {
                        var i = c[g];
                        b.some(function(a) {
                            return a.includes(i.identity);
                        }) ? (i.selected || (i.selected = !0), f = !0) : i.selected && (i.selected = !1);
                    }
                    if (e) for (var g = 0, h = e.length; h > g; g++) {
                        var i = e[g];
                        b.some(function(a) {
                            return a.includes(i.identity);
                        }) ? (i.selected || (i.selected = !0), f = !0) : i.selected && (i.selected = !1);
                    }
                    if (d) for (var g = 0, h = d.length; h > g; g++) {
                        var j = d[g];
                        b.some(function(a) {
                            return a.includes(j.identity);
                        }) ? j.selected = !0 : j.selected && (j.selected = !1);
                    }
                    !f && b.length > 0 && (this.clearSelectionInternal(), this.sendSelectionToHost(a));
                }
            }, c.prototype.apply = function(a, b) {
                a.accept(this, b);
            }, c.prototype.visitColumnChart = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.ColumnChartWebBehavior()), this.selectableDataPoints = a.datapoints, 
                this.initAndSyncSelectionState();
                var e = a.bars, f = a.clearCatcher, g = a.hasHighlights, h = a.mainGraphicsContext;
                e.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, h, g), c.sendSelectionToHost(), c.sendSelectionToLegend && c.sendSelectionToLegend(), 
                    c.sendSelectionToSecondVisual();
                }), f.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, h, g);
                }, this.hasColumnChart = !0;
            }, c.prototype.visitLineChart = function(a) {
                this.hasColumnChart ? this.visitLineChartCombo(a) : this.visitLineChartNoCombo(a);
            }, c.prototype.visitLineChartNoCombo = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.LineChartWebBehavior()), this.selectableDataPoints = a.dataPoints, 
                this.initAndSyncSelectionState();
                var e = a.lines, f = a.interactivityLines, g = a.dots, h = a.clearCatcher, i = a.areas, j = function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, g, i), c.sendSelectionToHost(), c.sendSelectionToLegend();
                };
                f.on("click", j), g.on("click", j), i && i.on("click", j), h.on("click", function() {
                    c.clearSelection(), d.select(!1, e, g, i), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, g, i);
                };
            }, c.prototype.visitLineChartCombo = function(a) {
                var c = this, d = this.secondBehavior;
                d || (d = this.secondBehavior = new b.LineChartWebBehavior()), this.secondSelectableDataPoints = a.dataPoints, 
                this.initAndSyncSelectionState();
                var e = a.lines, f = a.interactivityLines, g = a.dots, h = a.areas, i = function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, g, h), c.sendSelectionToHost(), c.sendSelectionToLegend && c.sendSelectionToLegend(), 
                    c.sendSelectionToVisual && c.sendSelectionToVisual();
                };
                f.on("click", i), g.on("click", i), h && h.on("click", i), this.sendSelectionToSecondVisual = function() {
                    d.select(c.hasSelection(), e, g, h);
                };
            }, c.prototype.visitDataDotChart = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.DataDotChartWebBehavior()), this.selectableDataPoints = a.datapoints, 
                this.initAndSyncSelectionState();
                var e = a.dots, f = a.clearCatcher;
                e.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e), c.sendSelectionToHost();
                }), f.on("click", function() {
                    c.clearSelection(), d.select(!1, e), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e);
                };
            }, c.prototype.visitDonutChart = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.DonutChartWebBehavior(a)), this.selectableDataPoints = a.datapoints, 
                this.initAndSyncSelectionState();
                var e = a.slices, f = a.highlightSlices, g = a.clearCatcher, h = a.hasHighlights, i = function(a) {
                    c.select(a.data), d.select(c.hasSelection(), e, !1, h, a.data), d.select(c.hasSelection(), f, !0, h, a.data), 
                    c.sendSelectionToHost(), c.sendSelectionToLegend();
                };
                e.on("click", i), f.on("click", i), e.on("mouseover", function(a) {
                    return d.mouseOver(a.data);
                }), f.on("mouseover", function(a) {
                    return d.mouseOver(a.data);
                }), e.on("mouseout", function(a) {
                    return d.mouseOut(a.data);
                }), f.on("mouseout", function(a) {
                    return d.mouseOut(a.data);
                }), g.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost(), c.sendSelectionToLegend();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, !1, h), d.select(c.hasSelection(), f, !0, h);
                };
            }, c.prototype.visitFunnel = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.FunnelWebBehavior()), this.selectableDataPoints = a.datapoints, 
                this.initAndSyncSelectionState();
                var e = a.bars, f = a.labels, g = a.clearCatcher, h = a.hasHighlights;
                e.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, h), c.sendSelectionToHost();
                }), f && f.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, h), c.sendSelectionToHost();
                }), g.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, h);
                };
            }, c.prototype.visitScatterChart = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.ScatterChartWebBehavior()), this.selectableDataPoints = a.data.dataPoints, 
                this.initAndSyncSelectionState();
                var e = a.dataPointsSelection, f = a.clearCatcher;
                e.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e), c.sendSelectionToHost(), c.sendSelectionToLegend();
                }), f.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), a.dataPointsSelection);
                };
            }, c.prototype.visitTreemap = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.TreemapWebBehavior()), this.selectableDataPoints = a.nodes, 
                this.initAndSyncSelectionState();
                var e = a.shapes, f = a.highlightShapes, g = a.labels, h = a.hasHighlights, i = function(a) {
                    c.select(a), d.select(c.hasSelection(), e, !1), d.select(c.hasSelection(), f, !0), 
                    c.sendSelectionToHost(), c.sendSelectionToLegend();
                };
                e.on("click", i), f.on("click", i), g.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, h), c.sendSelectionToHost(), c.sendSelectionToLegend();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, h);
                };
            }, c.prototype.visitSlicer = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.SlicerWebBehavior());
                var e = b.slicerProps.filterPropertyIdentifier;
                this.selectableDataPoints = a.datapoints, this.initAndSyncSelectionState(e);
                var f = a.slicerItemContainers, g = a.slicerItemLabels, h = a.slicerItemInputs, i = a.slicerClear;
                f.on("mouseover", function(a) {
                    a.mouseOver = !0, a.mouseOut = !1, d.mouseInteractions(g);
                }), f.on("mouseout", function(a) {
                    a.mouseOver = !1, a.mouseOut = !0, d.mouseInteractions(g);
                }), g.on("click", function(a) {
                    c.select(a, c.hasSelection()), d.select(g), c.sendSelectionToHost(e);
                }), i.on("click", function(a) {
                    c.clearSelection(), d.clearSlicers(g, h), c.sendSelectionToHost(e);
                }), this.sendSelectionToVisual = function() {
                    d.select(g);
                }, this.sendSelectionToVisual();
            }, c.prototype.visitWaterfallChart = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.WaterfallChartWebBehavior()), this.selectableDataPoints = a.datapoints, 
                this.initAndSyncSelectionState();
                var e = a.bars, f = a.clearCatcher;
                e.on("click", function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e), c.sendSelectionToHost();
                }), f.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e);
                };
            }, c.prototype.visitMap = function(a) {
                var c = this, d = this.behavior;
                d || (d = this.behavior = new b.MapBehavior()), this.selectableDataPoints = a.dataPoints, 
                this.initAndSyncSelectionState();
                var e = a.bubbles, f = a.slices, g = a.shapes, h = a.clearCatcher, i = function(a, b) {
                    c.select(a), d.select(c.hasSelection(), e, f, g), c.sendSelectionToHost();
                };
                e && e.on("click", i), f && f.on("click", function(a, b) {
                    c.select(a.data), d.select(c.hasSelection(), e, f, g), c.sendSelectionToHost();
                }), g && g.on("click", i), h.on("click", function() {
                    c.clearSelection(), c.sendSelectionToHost();
                }), this.sendSelectionToVisual = function() {
                    d.select(c.hasSelection(), e, f, g);
                };
            }, c.prototype.visitLegend = function(a) {
                var c = this, d = new b.LegendWebBehavior();
                this.selectableLegendDataPoints = a.datapoints, this.initAndSyncSelectionState();
                var e = a.legendItems, f = a.legendIcons, g = a.clearCatcher;
                e.on("click", function(a) {
                    c.select(a), d.select(c.legendHasSelection(), f), c.sendSelectionToVisual(), c.sendSelectionToSecondVisual(), 
                    c.sendSelectionToHost();
                }), g.on("click", function() {
                    h(!0), c.sendSelectionToVisual(), c.sendSelectionToSecondVisual();
                }), this.sendSelectionToLegend = function() {
                    d.select(c.legendHasSelection(), f);
                }, this.sendSelectionToLegend();
                var h = function(a) {
                    c.clearSelection(), d.select(c.legendHasSelection(), f), a && c.sendSelectionToHost();
                };
            }, c;
        }();
        b.WebInteractivityService = g;
        var h = function() {
            function a() {}
            return a.prototype.apply = function(a, b) {
                a.accept(this, b);
            }, a.prototype.makeDataPointsSelectable = function() {
                for (var a = this, b = [], c = 0; c < arguments.length; c++) b[c - 0] = arguments[c];
                for (var d = 0, e = b.length; e > d; d++) {
                    var f = b[d];
                    f.on("click", function(b, c) {
                        a.behavior.select(!0, f, b, c);
                    });
                }
                return this;
            }, a.prototype.makeRootSelectable = function(a) {
                var b = this;
                return a.on("click", function(a, c) {
                    b.behavior.selectRoot();
                }), this;
            }, a.prototype.makeDragable = function() {
                for (var a = this, b = [], c = 0; c < arguments.length; c++) b[c - 0] = arguments[c];
                for (var d = 0, e = b.length; e > d; d++) {
                    var f = b[d], g = d3.behavior.drag().on("drag", function(b) {
                        a.behavior.drag(0);
                    }).on("dragend", function(b) {
                        a.behavior.drag(1);
                    });
                    f.call(g);
                }
                return this;
            }, a.prototype.clearSelection = function() {}, a.prototype.applySelectionStateToData = function(a) {
                return !1;
            }, a.prototype.visitColumnChart = function(a) {}, a.prototype.visitLineChart = function(a) {}, 
            a.prototype.visitDataDotChart = function(a) {}, a.prototype.visitDonutChart = function(a) {}, 
            a.prototype.visitFunnel = function(a) {}, a.prototype.visitScatterChart = function(a) {
                var c = this.behavior;
                a.data.dataPoints.length > 0 && (c || (c = this.behavior = new b.ScatterChartMobileBehavior()), 
                c.setOptions(a), this.makeDataPointsSelectable(a.dataPointsSelection).makeRootSelectable(a.root).makeDragable(a.root).makeDragable(a.background), 
                c.selectRoot());
            }, a.prototype.visitTreemap = function(a) {}, a.prototype.visitSlicer = function(a) {}, 
            a.prototype.visitWaterfallChart = function(a) {}, a.prototype.visitMap = function(a) {}, 
            a.prototype.visitLegend = function(a) {}, a;
        }();
        b.MobileInteractivityService = h;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            var c;
            !function(b) {
                function c(a, b) {
                    return new d(a, b);
                }
                b.createGeocodingCache = c;
                var d = function() {
                    function b(a, b) {
                        this.geocodeCache = {}, this.maxCacheSize = a, this.maxCacheSizeOverflow = b;
                    }
                    return b.prototype.getCoordinates = function(b) {
                        var c = this.geocodeCache[b.key];
                        return c ? (c.query.incrementCacheHit(), c.coordinate) : (c = a.localStorageService.getData(b.key), 
                        c ? (this.registerInMemory(b, c.coordinate), c.coordinate) : void 0);
                    }, b.prototype.registerCoordinates = function(a, b) {
                        this.registerInMemory(a, b), this.registerInStorage(a, b);
                    }, b.prototype.registerInMemory = function(a, b) {
                        var c = this.geocodeCache, d = Object.keys(c), e = d.length, f = this.maxCacheSize;
                        if (d.length > f + this.maxCacheSizeOverflow) for (var g = d.sort(function(a, b) {
                            var d = c[a].query.getCacheHits(), e = c[b].query.getCacheHits();
                            return e > d ? -1 : d > e ? 1 : 0;
                        }), h = 0; e - f > h; h++) c[g[h]] = void 0;
                        c[a.key] = {
                            query: a,
                            coordinate: b
                        };
                    }, b.prototype.registerInStorage = function(b, c) {
                        a.localStorageService.setData(b.key, {
                            query: b,
                            coordinate: c
                        });
                    }, b;
                }();
            }(c = b.Services || (b.Services = {}));
        }(c = b.BI || (b.BI = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(c) {
            function d(b, c, d) {
                var e = a.Prototype.inherit(c);
                e.create = d, b[c.name] = e;
            }
            function e() {
                return new i();
            }
            function f(a) {
                return new j(a);
            }
            function g(a) {
                return new k(a);
            }
            function h(a) {
                return new l(a);
            }
            var i = function() {
                function b() {
                    this._plugins = a.visuals.plugins;
                }
                return b.prototype.getVisuals = function() {
                    var a = this._plugins, b = Object.keys(a);
                    return b.map(function(b) {
                        return a[b];
                    });
                }, b.prototype.getPlugin = function(a) {
                    if (a) {
                        var b = this._plugins[a];
                        if (b) return b;
                    }
                }, b.prototype.capabilities = function(a) {
                    var b = this.getPlugin(a);
                    return b ? b.capabilities : void 0;
                }, b;
            }();
            c.VisualPluginService = i;
            var j = function(c) {
                function e(e) {
                    c.call(this), this.featureSwitches = e, this.visualPlugins = {}, this.featureSwitches.devToolsEnabled && this.addCustomVisualizations([]), 
                    d(this.visualPlugins, a.visuals.plugins.barChart, function() {
                        return new b.CartesianChart({
                            chartType: 5,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.card, function() {
                        return new b.Card({
                            isScrollable: !0
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.clusteredBarChart, function() {
                        return new b.CartesianChart({
                            chartType: 4,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.clusteredColumnChart, function() {
                        return new b.CartesianChart({
                            chartType: 2,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.columnChart, function() {
                        return new b.CartesianChart({
                            chartType: 3,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.dataDotClusteredColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 14,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.dataDotStackedColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 15,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.donutChart, function() {
                        return new b.DonutChart({
                            animator: new b.WebDonutChartAnimator(),
                            isScrollable: !0
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.funnel, function() {
                        return new b.FunnelChart({
                            animator: new b.WebFunnelAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.hundredPercentStackedBarChart, function() {
                        return new b.CartesianChart({
                            chartType: 6,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.hundredPercentStackedColumnChart, function() {
                        return new b.CartesianChart({
                            chartType: 7,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.lineChart, function() {
                        return new b.CartesianChart({
                            chartType: 0,
                            isScrollable: !0,
                            animator: new b.NullAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.areaChart, function() {
                        return new b.CartesianChart({
                            chartType: 1,
                            isScrollable: !0,
                            animator: new b.NullAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.lineClusteredColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 12,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.lineStackedColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 13,
                            isScrollable: !0,
                            animator: new b.WebColumnChartAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.pieChart, function() {
                        return new b.DonutChart({
                            sliceWidthRatio: 0,
                            animator: new b.WebDonutChartAnimator(),
                            isScrollable: !0
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.scatterChart, function() {
                        return new b.CartesianChart({
                            chartType: 8,
                            isScrollable: !0,
                            animator: new b.NullAnimator()
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.treemap, function() {
                        return new b.Treemap({
                            animator: new b.WebTreemapAnimator(),
                            isScrollable: !0
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.waterfallChart, function() {
                        return new b.CartesianChart({
                            chartType: 11,
                            isScrollable: !0
                        });
                    });
                }
                return __extends(e, c), e.prototype.getVisuals = function() {
                    var b = [ a.visuals.plugins.barChart, a.visuals.plugins.columnChart, a.visuals.plugins.clusteredBarChart, a.visuals.plugins.clusteredColumnChart, a.visuals.plugins.hundredPercentStackedBarChart, a.visuals.plugins.hundredPercentStackedColumnChart, a.visuals.plugins.lineChart, a.visuals.plugins.areaChart, a.visuals.plugins.lineStackedColumnComboChart, a.visuals.plugins.lineClusteredColumnComboChart, a.visuals.plugins.waterfallChart, a.visuals.plugins.scatterChart, a.visuals.plugins.pieChart, a.visuals.plugins.treemap, a.visuals.plugins.map, a.visuals.plugins.table, a.visuals.plugins.matrix, a.visuals.plugins.filledMap, a.visuals.plugins.funnel, a.visuals.plugins.gauge, a.visuals.plugins.multiRowCard, a.visuals.plugins.card, a.visuals.plugins.slicer, a.visuals.plugins.donutChart ];
                    return this.featureSwitches.devToolsEnabled && this.addCustomVisualizations(b), 
                    this.featureSwitches.dataDotChartEnabled && (b.push(a.visuals.plugins.dataDotClusteredColumnComboChart), 
                    b.push(a.visuals.plugins.dataDotStackedColumnComboChart)), b;
                }, e.prototype.addCustomVisualizations = function(b) {
                    var c = a.localStorageService.getData("customVisualizations");
                    if (c) for (var d = c.length, e = 0; d > e; e++) {
                        var f = c[e].pluginName, g = this.getPlugin(f);
                        if (!g) {
                            var h = c[e].javaScriptCode, i = $("<script/>", {
                                html: h + "//# sourceURL=" + f + ".js\n//# sourceMappingURL=" + f + ".js.map"
                            });
                            i.attr("pluginName", f), $("body").append(i);
                            var j = $("<style/>", {
                                html: c[e].cssCode
                            });
                            j.attr("pluginName", f), $("head").append(j), g = this.getPlugin(f);
                        }
                        b.push(g);
                    }
                }, e.prototype.getPlugin = function(a) {
                    return this.visualPlugins[a] ? this.visualPlugins[a] : c.prototype.getPlugin.call(this, a);
                }, e;
            }(i);
            c.MinervaVisualPluginService = j;
            var k = function(a) {
                function b(b) {
                    a.call(this), this.featureSwitches = b, this.visualPlugins = {};
                }
                return __extends(b, a), b.prototype.getPlugin = function(b) {
                    return this.visualPlugins[b] ? this.visualPlugins[b] : a.prototype.getPlugin.call(this, b);
                }, b;
            }(i);
            c.DashboardPluginService = k;
            var l = function(c) {
                function e(f) {
                    var g = this;
                    c.call(this), this.smallViewPortProperties = f || {
                        CartesianSmallViewPortProperties: {
                            hideAxesOnSmallViewPort: !0,
                            hideLegendOnSmallViewPort: !0,
                            MinHeightLegendVisible: e.MinHeightLegendVisible,
                            MinHeightAxesVisible: e.MinHeightAxesVisible
                        },
                        GaugeSmallViewPortProperties: {
                            hideGaugeSideNumbersOnSmallViewPort: !0,
                            smallGaugeMarginsOnSmallViewPort: !0,
                            MinHeightGaugeSideNumbersVisible: e.MinHeightGaugeSideNumbersVisible,
                            GaugeMarginsOnSmallViewPort: e.GaugeMarginsOnSmallViewPort
                        }
                    }, b.TooltipManager.ShowTooltips = !1, this.visualPlugins = {}, d(this.visualPlugins, a.visuals.plugins.lineChart, function() {
                        return new b.CartesianChart({
                            chartType: 0,
                            cartesianSmallViewPortProperties: g.smallViewPortProperties.CartesianSmallViewPortProperties
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.lineClusteredColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 12,
                            cartesianSmallViewPortProperties: g.smallViewPortProperties.CartesianSmallViewPortProperties
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.lineStackedColumnComboChart, function() {
                        return new b.CartesianChart({
                            chartType: 13,
                            cartesianSmallViewPortProperties: g.smallViewPortProperties.CartesianSmallViewPortProperties
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.scatterChart, function() {
                        return new b.CartesianChart({
                            chartType: 8,
                            cartesianSmallViewPortProperties: g.smallViewPortProperties.CartesianSmallViewPortProperties
                        });
                    }), d(this.visualPlugins, a.visuals.plugins.gauge, function() {
                        return new b.Gauge({
                            chartType: b.Gauge,
                            gaugeSmallViewPortProperties: g.smallViewPortProperties.GaugeSmallViewPortProperties
                        });
                    });
                }
                return __extends(e, c), e.prototype.getPlugin = function(a) {
                    return this.visualPlugins[a] ? this.visualPlugins[a] : c.prototype.getPlugin.call(this, a);
                }, e.MinHeightLegendVisible = 80, e.MinHeightAxesVisible = 80, e.MinHeightGaugeSideNumbersVisible = 80, 
                e.GaugeMarginsOnSmallViewPort = 10, e;
            }(i);
            c.MobileVisualPluginService = l, c.create = e, c.createMinerva = f, c.createDashboard = g, 
            c.createMobile = h;
        }(c = b.visualPluginFactory || (b.visualPluginFactory = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            function b(a, b) {
                if (a) for (var c = 0; c < a.length; c++) {
                    var d = a[c];
                    d(b);
                }
            }
            var c = "unselectable";
            a.fire = b;
            var d = function() {
                function b(a, b) {
                    this._owner = a, this._direction = b, this._timerHandle = void 0, this.createView();
                    var d = this;
                    this._element.addEventListener("mousedown", function(a) {
                        d.onMouseDown(a);
                    }), $(this._element).addClass(c), $(this._svg).addClass(c), $(this._polygon).addClass(c);
                }
                return Object.defineProperty(b.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.createView = function() {
                    var a = "http://www.w3.org/2000/svg";
                    this._polygon = document.createElementNS(a, "polygon"), this._polygon.setAttributeNS(null, "points", "3,3 6,3 13,8 6,13 3,13 10,8"), 
                    this._polygon.setAttributeNS(null, "fill", b.ARROW_COLOR), this._svg = document.createElementNS(a, "svg");
                    var c = this._svg.style;
                    c.position = "absolute", c.left = "0px", c.top = "0px", this._svg.appendChild(this._polygon), 
                    this._element = document.createElement("div"), this._element.className = e.arrowClassName, 
                    this._element.appendChild(this._svg), this._owner.element.appendChild(this._element);
                }, b.prototype.onMouseDown = function(a) {
                    var b = this;
                    if (clearTimeout(this._timerHandle), !this._mouseUpWrapper) {
                        a.cancelBubble = !0;
                        var b = this;
                        this._mouseUpWrapper = function(a) {
                            b.onMouseUp(a);
                        }, e.addDocumentMouseUpEvent(this._mouseUpWrapper);
                    }
                    this._owner._scrollSmallIncrement(this._direction), this._owner.refresh(), this._timerHandle = setTimeout(function() {
                        b.onMouseDown(a);
                    }, 100), a.preventDefault && a.preventDefault();
                }, b.prototype.onMouseUp = function(a) {
                    clearTimeout(this._timerHandle), e.removeDocumentMouseUpEvent(this._mouseUpWrapper), 
                    this._mouseUpWrapper = void 0;
                }, b.prototype.arrange = function(b, c, d) {
                    var e = Math.min(b, c), f = e / 16, g = (b - e) / 2, h = (c - e) / 2;
                    this._polygon.setAttributeNS(null, "transform", "translate(" + g + ", " + h + ") scale(" + f + ") rotate(" + d + ",8,8)"), 
                    this._svg.setAttributeNS(null, "width", b + "px"), this._svg.setAttributeNS(null, "height", c + "px"), 
                    a.HTMLElementUtils.setElementWidth(this._element, b), a.HTMLElementUtils.setElementHeight(this._element, c);
                }, b.MIN_WIDTH = 26, b.ARROW_COLOR = "#404040", b;
            }();
            a.ScrollbarButton = d;
            var e = function() {
                function e(a) {
                    this.MIN_BAR_SIZE = 10, this.min = 0, this.max = 10, this.viewMin = 0, this.viewSize = 2, 
                    this.smallIncrement = 1, this._onscroll = [], this._screenToOffsetScale = 1, this.createView(a);
                    var b = this;
                    this._element.addEventListener("mousedown", function(a) {
                        b.onBackgroundMouseDown(a);
                    }), this._middleBar.addEventListener("mousedown", function(a) {
                        b.onMiddleBarMouseDown(a);
                    }), this._timerHandle = void 0, this._visible = !0, this.element.winControl = this, 
                    $(this._touchPanel).addClass(c);
                }
                return e.prototype.scrollBy = function(a) {
                    this.scrollTo(this.viewMin + a);
                }, e.prototype.scrollUp = function() {
                    this.scrollBy(-this.smallIncrement);
                }, e.prototype.scrollDown = function() {
                    this.scrollBy(this.smallIncrement);
                }, e.prototype.scrollPageUp = function() {
                    this.scrollBy(-this.viewSize);
                }, e.prototype.scrollPageDown = function() {
                    this.scrollBy(this.viewSize);
                }, Object.defineProperty(e.prototype, "width", {
                    get: function() {
                        return this._width;
                    },
                    set: function(a) {
                        this._width = a, this._element.style.width = a, this.invalidateArrange();
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "height", {
                    get: function() {
                        return this._height;
                    },
                    set: function(a) {
                        this._height = a, this._element.style.height = a, this.invalidateArrange();
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.refresh = function() {}, Object.defineProperty(e.prototype, "element", {
                    get: function() {
                        return this._element;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "maxButton", {
                    get: function() {
                        return this._maxButton;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "middleBar", {
                    get: function() {
                        return this._middleBar;
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype._scrollSmallIncrement = function(a) {
                    this.scrollBy(this.smallIncrement * a);
                }, Object.defineProperty(e.prototype, "visible", {
                    get: function() {
                        return this._visible;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "isInMouseCapture", {
                    get: function() {
                        return void 0 !== this._timerHandle;
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.show = function(a) {
                    this._visible = a, this.element.style.visibility = a ? "visible" : "hidden", this.invalidateArrange();
                }, e.prototype._getMouseOffset = function(a) {
                    return void 0 !== a.offsetX ? {
                        x: a.offsetX,
                        y: a.offsetY
                    } : void 0 !== a.layerX ? {
                        x: a.layerX,
                        y: a.layerY
                    } : {
                        x: a.screenX,
                        y: a.screenY
                    };
                }, e.prototype._getOffsetXDelta = function(a) {
                    return (a.screenX - this._screenPrevMousePos.x) / this._screenToOffsetScale;
                }, e.prototype._getOffsetYDelta = function(a) {
                    return (a.screenY - this._screenPrevMousePos.y) / this._screenToOffsetScale;
                }, e.prototype._getOffsetXTouchDelta = function(a) {
                    return this._getMouseOffset(a).x - this._offsetTouchPrevPos.x;
                }, e.prototype._getOffsetYTouchDelta = function(a) {
                    return this._getMouseOffset(a).y - this._offsetTouchPrevPos.y;
                }, e.prototype.initTouch = function(a, b) {
                    var c = this;
                    this._touchPanel = a, this._allowMouseDrag = void 0 === b ? !0 : b, "ontouchmove" in a ? (a.addEventListener("touchstart", function(a) {
                        return c.onTouchStart(a);
                    }), a.addEventListener("touchmove", function(a) {
                        return c.onTouchMove(a);
                    }), a.addEventListener("touchend", function(a) {
                        return c.onTouchEnd(a);
                    })) : (a.addEventListener("mousedown", function(a) {
                        return c.onTouchMouseDown(a);
                    }), a.addEventListener("mousemove", function(a) {
                        return c.onTouchMouseMove(a);
                    }), a.addEventListener("mouseup", function(a) {
                        return c.onTouchMouseUp(a);
                    }));
                }, e.prototype.onTouchStart = function(a) {
                    1 === a.touches.length && this.onTouchMouseDown(a.touches[0]);
                }, e.prototype.onTouchMove = function(a) {
                    1 === a.touches.length && (a.preventDefault && a.preventDefault(), this.onTouchMouseMove(a.touches[0]));
                }, e.prototype.onTouchEnd = function(a) {
                    this.onTouchMouseUp(1 === a.touches.length ? a.touches[0] : a, !0);
                }, e.prototype.onTouchMouseDown = function(a) {
                    (this._allowMouseDrag || a.pointerType !== MSPointerEvent.MSPOINTER_TYPE_MOUSE) && ("setCapture" in this._touchPanel && this._touchPanel.setCapture(!0), 
                    this._offsetTouchPrevPos = this._offsetTouchStartPos = null, this._touchStarted = !0);
                }, e.prototype._getOffsetTouchDelta = function(a) {
                    return null;
                }, e.prototype.onTouchMouseMove = function(a) {
                    if (this._touchStarted) {
                        this._offsetTouchStartPos || (this._offsetTouchPrevPos = this._offsetTouchStartPos = this._getMouseOffset(a));
                        var b = this._getOffsetTouchDelta(a);
                        0 !== b && (this.scrollBy(-b / this._getRunningSize(!1) * this.viewSize), this._offsetTouchPrevPos = this._getMouseOffset(a)), 
                        a.preventDefault && a.preventDefault(), a.cancelBubble = !0;
                    }
                }, e.prototype.onTouchMouseUp = function(a, b) {
                    if (this._touchStarted && this._offsetTouchStartPos) {
                        var c = this._getMouseOffset(a);
                        !b && (Math.abs(this._offsetTouchStartPos.x - c.x) > 3 || Math.abs(this._offsetTouchStartPos.y - c.y) > 3) && (a.preventDefault && a.preventDefault(), 
                        a.cancelBubble = !0);
                    }
                    "releaseCapture" in this._touchPanel && this._touchPanel.releaseCapture(), this._touchStarted = !1;
                }, e.prototype.registerElementForMouseWheelScrolling = function(a) {
                    var b = this;
                    a.addEventListener("mousewheel", function(a) {
                        b.onMouseWheel(a);
                    }), a.addEventListener("DOMMouseScroll", function(a) {
                        b.onFireFoxMouseWheel(a);
                    });
                }, e.prototype.createView = function(a) {
                    this._element = document.createElement("div"), this._element.className = e.className, 
                    this._element.setAttribute("drag-resize-disabled", "true"), a.appendChild(this._element), 
                    this._minButton = new d(this, -1), this._maxButton = new d(this, 1), this._middleBar = document.createElement("div"), 
                    this._middleBar.className = e.barClassName, this._element.appendChild(this._middleBar);
                }, e.prototype.scrollTo = function(a) {
                    var c = Math.min(this.max - this.viewSize, Math.max(this.min, a));
                    c !== this.viewMin && (this.viewMin = c, b(this._onscroll, null));
                }, e.prototype._scrollByPage = function(a) {}, e.prototype._getRunningSize = function(a) {
                    return null;
                }, e.prototype._getOffsetDelta = function(a) {
                    return null;
                }, e.prototype.scroll = function(a) {
                    var b = this._getOffsetDelta(a) / this._getRunningSize(!0) * (this.max - this.min);
                    if (0 > b) {
                        if (this._getScreenMousePos(a) >= this._screenMaxMousePos) return;
                    } else if (b > 0 && this._getScreenMousePos(a) <= this._screenMinMousePos) return;
                    this.scrollBy(b);
                }, Object.defineProperty(e.prototype, "actualWidth", {
                    get: function() {
                        return void 0 === this._actualWidth && this.arrange(), this._actualWidth;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "actualHeight", {
                    get: function() {
                        return void 0 === !this._actualHeight && this.arrange(), this._actualHeight;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "actualButtonWidth", {
                    get: function() {
                        return void 0 === !this._actualButtonWidth && this.arrange(), this._actualButtonWidth;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(e.prototype, "actualButtonHeight", {
                    get: function() {
                        return void 0 === !this._actualButtonHeight && this.arrange(), this._actualButtonHeight;
                    },
                    enumerable: !0,
                    configurable: !0
                }), e.prototype.arrange = function() {
                    this._actualWidth || (this._actualWidth = this._element.offsetWidth, this._actualHeight = this._element.offsetHeight, 
                    this._actualButtonWidth = this._calculateButtonWidth(), this._actualButtonHeight = this._calculateButtonHeight(), 
                    this._minButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMinButtonAngle()), 
                    this._maxButton.arrange(this._actualButtonWidth, this._actualButtonHeight, this._getMaxButtonAngle()), 
                    this._setMaxButtonPosition());
                }, e.prototype._calculateButtonWidth = function() {
                    return null;
                }, e.prototype._calculateButtonHeight = function() {
                    return null;
                }, e.prototype._getMinButtonAngle = function() {
                    return null;
                }, e.prototype._getMaxButtonAngle = function() {
                    return null;
                }, e.prototype._setMaxButtonPosition = function() {}, e.prototype.invalidateArrange = function() {
                    this._actualWidth = void 0, this._actualHeight = void 0, this._actualButtonWidth = void 0, 
                    this._actualButtonHeight = void 0;
                }, e.prototype.onHoldBackgroundMouseDown = function(a) {
                    var b = this, c = this._timerHandle ? e.ScrollbarBackgroundMousedownHoldDelay : e.ScrollbarBackgroundFirstTimeMousedownHoldDelay;
                    this._timerHandle = setTimeout(function() {
                        b.onBackgroundMouseDown(a);
                    }, c);
                }, e.prototype.onBackgroundMouseDown = function(a) {
                    var b = this;
                    clearTimeout(this._timerHandle), this._backgroundMouseUpWrapper || (a.cancelBubble = !0, 
                    this._backgroundMouseUpWrapper = function(a) {
                        b.onBackgroundMouseUp(a);
                    }, e.addDocumentMouseUpEvent(this._backgroundMouseUpWrapper)), this._scrollByPage(a), 
                    this.refresh(), this.onHoldBackgroundMouseDown(a), a.preventDefault && a.preventDefault();
                }, e.prototype.onBackgroundMouseUp = function(a) {
                    clearTimeout(this._timerHandle), this._timerHandle = void 0, e.removeDocumentMouseUpEvent(this._backgroundMouseUpWrapper), 
                    this._backgroundMouseUpWrapper = void 0;
                }, e.prototype.getPinchZoomY = function() {
                    return document.documentElement.clientHeight / window.innerHeight;
                }, e.prototype.onMiddleBarMouseDown = function(b) {
                    b.cancelBubble = !0, this._screenPrevMousePos = {
                        x: b.screenX,
                        y: b.screenY
                    }, this._screenMinMousePos = this._getScreenMousePos(b) - (this._getScreenContextualLeft(this._middleBar) - this._getScreenContextualRight(this._minButton.element)), 
                    this._screenMaxMousePos = this._getScreenMousePos(b) + (this._getScreenContextualLeft(this._maxButton.element) - this._getScreenContextualRight(this._middleBar)), 
                    this._screenToOffsetScale = a.HTMLElementUtils.getAccumulatedScale(this.element) * this.getPinchZoomY();
                    var c = this;
                    this._middleBarMouseMoveWrapper = function(a) {
                        c.onMiddleBarMouseMove(a);
                    }, e.addDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), this._middleBarMouseUpWrapper = function(a) {
                        c.onMiddleBarMouseUp(a);
                    }, e.addDocumentMouseUpEvent(this._middleBarMouseUpWrapper), b.preventDefault && b.preventDefault();
                }, e.prototype.onMiddleBarMouseMove = function(a) {
                    this._screenPrevMousePos && (this.scroll(a), this.refresh(), this._screenPrevMousePos = {
                        x: a.screenX,
                        y: a.screenY
                    });
                }, e.prototype.onMiddleBarMouseUp = function(a) {
                    this._screenPrevMousePos = void 0, e.removeDocumentMouseMoveEvent(this._middleBarMouseMoveWrapper), 
                    this._middleBarMouseMoveWrapper = void 0, e.removeDocumentMouseUpEvent(this._middleBarMouseUpWrapper), 
                    this._middleBarMouseUpWrapper = void 0, a.preventDefault && a.preventDefault();
                }, e.prototype._getScreenContextualLeft = function(a) {
                    return null;
                }, e.prototype._getScreenContextualRight = function(a) {
                    return null;
                }, e.prototype.onMouseWheel = function(a) {
                    a.wheelDelta && this.mouseWheel(a.wheelDelta);
                }, e.prototype.onFireFoxMouseWheel = function(a) {
                    a.detail && this.mouseWheel(-a.detail);
                }, e.prototype.mouseWheel = function(a) {
                    this.visible && this.scrollBy(-a / 120 * this.smallIncrement);
                }, e.prototype._getScreenMousePos = function(a) {
                    return null;
                }, e.addDocumentMouseUpEvent = function(a) {
                    document.addEventListener("mouseup", a);
                }, e.removeDocumentMouseUpEvent = function(a) {
                    document.removeEventListener("mouseup", a);
                }, e.addDocumentMouseMoveEvent = function(a) {
                    document.addEventListener("mousemove", a);
                }, e.removeDocumentMouseMoveEvent = function(a) {
                    document.removeEventListener("mousemove", a);
                }, e.DefaultScrollbarWidth = "15px", e.ScrollbarBackgroundFirstTimeMousedownHoldDelay = 500, 
                e.ScrollbarBackgroundMousedownHoldDelay = 50, e.className = "scroll-bar-div", e.barClassName = "scroll-bar-part-bar", 
                e.arrowClassName = "scroll-bar-part-arrow", e;
            }();
            a.Scrollbar = e;
            var f = function(b) {
                function c(a) {
                    b.call(this, a), this.height = e.DefaultScrollbarWidth;
                }
                return __extends(c, b), c.prototype._calculateButtonWidth = function() {
                    return Math.min(this.actualWidth / 2, Math.max(this.actualHeight, d.MIN_WIDTH));
                }, c.prototype._calculateButtonHeight = function() {
                    return this.actualHeight;
                }, c.prototype._getMinButtonAngle = function() {
                    return -180;
                }, c.prototype._getMaxButtonAngle = function() {
                    return 0;
                }, c.prototype._setMaxButtonPosition = function() {
                    a.HTMLElementUtils.setElementLeft(this.maxButton.element, this.actualWidth - this.actualButtonWidth);
                }, c.prototype.refresh = function() {
                    this.arrange();
                    var b = this.actualWidth - 2 * this.actualButtonWidth - 2, c = this.viewSize / (this.max - this.min) * b;
                    c < this.MIN_BAR_SIZE && (b -= this.MIN_BAR_SIZE - c, c = this.MIN_BAR_SIZE), 0 > b && (b = 0, 
                    c = 0), c = Math.min(c, b);
                    var d = this.viewMin / (this.max - this.min) * b;
                    a.HTMLElementUtils.setElementWidth(this.middleBar, c), a.HTMLElementUtils.setElementHeight(this.middleBar, this.actualHeight), 
                    a.HTMLElementUtils.setElementLeft(this.middleBar, this.actualButtonWidth + 1 + d);
                }, c.prototype.show = function(c) {
                    c !== this.visible && (b.prototype.show.call(this, c), c ? this.element.style.height = this.height : a.HTMLElementUtils.setElementHeight(this.element, 0));
                }, c.prototype._scrollByPage = function(a) {
                    var b = this.middleBar.offsetLeft, c = b + this.middleBar.offsetWidth, d = void 0 === a.offsetX ? a.layerX : a.offsetX;
                    d > c ? this.scrollPageDown() : b > d && this.scrollPageUp();
                }, c.prototype._getRunningSize = function(a) {
                    var b = this.actualWidth;
                    if (a) {
                        var c = this.actualButtonWidth + 1;
                        b -= 2 * c;
                        var d = b * (this.viewSize / (this.max - this.min));
                        d < this.MIN_BAR_SIZE && (b -= this.MIN_BAR_SIZE - d);
                    }
                    return b;
                }, c.prototype._getOffsetDelta = function(a) {
                    return this._getOffsetXDelta(a);
                }, c.prototype._getOffsetTouchDelta = function(a) {
                    return this._getOffsetXTouchDelta(a);
                }, c.prototype._getScreenContextualLeft = function(a) {
                    return a.getBoundingClientRect().left;
                }, c.prototype._getScreenContextualRight = function(a) {
                    return a.getBoundingClientRect().right;
                }, c.prototype._getScreenMousePos = function(a) {
                    return a.screenX;
                }, c;
            }(e);
            a.HorizontalScrollbar = f;
            var g = function(b) {
                function c(a) {
                    b.call(this, a), this.width = e.DefaultScrollbarWidth;
                }
                return __extends(c, b), c.prototype._calculateButtonWidth = function() {
                    return this.actualWidth;
                }, c.prototype._calculateButtonHeight = function() {
                    return Math.min(this.actualHeight / 2, Math.max(this.actualWidth, d.MIN_WIDTH));
                }, c.prototype._getMinButtonAngle = function() {
                    return -90;
                }, c.prototype._getMaxButtonAngle = function() {
                    return 90;
                }, c.prototype._setMaxButtonPosition = function() {
                    a.HTMLElementUtils.setElementTop(this.maxButton.element, this.actualHeight - this.actualButtonHeight);
                }, c.prototype.refresh = function() {
                    this.arrange();
                    var b = this.actualHeight - 2 * this.actualButtonHeight - 2, c = this.viewSize / (this.max - this.min) * b;
                    c < this.MIN_BAR_SIZE && (b -= this.MIN_BAR_SIZE - c, c = this.MIN_BAR_SIZE), 0 > b && (b = 0, 
                    c = 0);
                    var d = this.viewMin / (this.max - this.min) * b;
                    a.HTMLElementUtils.setElementWidth(this.middleBar, this.actualWidth), a.HTMLElementUtils.setElementHeight(this.middleBar, c), 
                    a.HTMLElementUtils.setElementTop(this.middleBar, this.actualButtonHeight + 1 + d);
                }, c.prototype.show = function(c) {
                    c !== this.visible && (b.prototype.show.call(this, c), c ? this.element.style.width = this.width : a.HTMLElementUtils.setElementWidth(this.element, 0));
                }, c.prototype._scrollByPage = function(a) {
                    var b = this.middleBar.offsetTop, c = b + this.middleBar.offsetHeight, d = void 0 === a.offsetY ? a.layerY : a.offsetY;
                    d > c ? this.scrollPageDown() : b > d && this.scrollPageUp();
                }, c.prototype._getRunningSize = function(a) {
                    var b = this.actualHeight;
                    if (a) {
                        var c = this.actualButtonHeight + 1;
                        b -= 2 * c;
                        var d = b * (this.viewSize / (this.max - this.min));
                        d < this.MIN_BAR_SIZE && (b -= this.MIN_BAR_SIZE - d);
                    }
                    return b;
                }, c.prototype._getOffsetDelta = function(a) {
                    return this._getOffsetYDelta(a);
                }, c.prototype._getOffsetTouchDelta = function(a) {
                    return this._getOffsetYTouchDelta(a);
                }, c.prototype._getScreenContextualLeft = function(a) {
                    return a.getBoundingClientRect().top;
                }, c.prototype._getScreenContextualRight = function(a) {
                    return a.getBoundingClientRect().bottom;
                }, c.prototype._getScreenMousePos = function(a) {
                    return a.screenY;
                }, c;
            }(e);
            a.VerticalScrollbar = g;
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(a) {
                var b = function() {
                    function a(a, b) {
                        this._element = a, this._handler = b, this._elementMouseDownWrapper = null, this._elementMouseMoveWrapper = null, 
                        this._elementMouseOutWrapper = null, this._documentMouseMoveWrapper = null, this._documentMouseUpWrapper = null, 
                        this._startMousePosition = null, this._originalCursor = null;
                    }
                    return a.addDocumentMouseUpEvent = function(a) {
                        document.addEventListener("mouseup", a);
                    }, a.removeDocumentMouseUpEvent = function(a) {
                        document.removeEventListener("mouseup", a);
                    }, a.addDocumentMouseMoveEvent = function(a) {
                        document.addEventListener("mousemove", a);
                    }, a.removeDocumentMouseMoveEvent = function(a) {
                        document.removeEventListener("mousemove", a);
                    }, a.getMouseCoordinates = function(a) {
                        return {
                            x: a.pageX,
                            y: a.pageY
                        };
                    }, a.getMouseCoordinateDelta = function(a, b) {
                        return {
                            x: b.x - a.x,
                            y: b.y - a.y
                        };
                    }, a.prototype.initialize = function() {
                        var a = this;
                        this._elementMouseDownWrapper = function(b) {
                            return a.onElementMouseDown(b);
                        }, this._element.addEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseMoveWrapper = function(b) {
                            return a.onElementMouseMove(b);
                        }, this._element.addEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseOutWrapper = function(b) {
                            return a.onElementMouseOut(b);
                        }, this._element.addEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseDoubleClickOutWrapper = function(b) {
                            return a.onElementMouseDoubleClick(b);
                        }, this._element.addEventListener("dblclick", this._elementMouseDoubleClickOutWrapper);
                    }, a.prototype.uninitialize = function() {
                        this._element.removeEventListener("mousedown", this._elementMouseDownWrapper), this._elementMouseDownWrapper = null, 
                        this._element.removeEventListener("mousemove", this._elementMouseMoveWrapper), this._elementMouseMoveWrapper = null, 
                        this._element.removeEventListener("mouseout", this._elementMouseOutWrapper), this._elementMouseOutWrapper = null, 
                        this._element.removeEventListener("dblclick", this._elementMouseDoubleClickOutWrapper), 
                        this._elementMouseDoubleClickOutWrapper = null;
                    }, Object.defineProperty(a.prototype, "cell", {
                        get: function() {
                            return null;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "element", {
                        get: function() {
                            return this._element;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype._hotSpot = function(a) {
                        return !1;
                    }, a.prototype.onElementMouseDown = function(b) {
                        var c = this, d = a.getMouseCoordinates(b);
                        this._hotSpot(d) && ("setCapture" in this._element && this._element.setCapture(), 
                        b.cancelBubble = !0, this._startMousePosition = d, this._documentMouseMoveWrapper = function(a) {
                            return c.onDocumentMouseMove(a);
                        }, a.addDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(a) {
                            return c.onDocumentMouseUp(a);
                        }, a.addDocumentMouseUpEvent(this._documentMouseUpWrapper), document.documentElement && (this._originalCursor = document.documentElement.style.cursor, 
                        document.documentElement.style.cursor = a.resizeCursor), this._handler.onStartResize(this.cell, this._startMousePosition.x, this._startMousePosition.y));
                    }, a.prototype.onElementMouseMove = function(b) {
                        this._startMousePosition || (this._hotSpot(a.getMouseCoordinates(b)) ? null === this._originalCursor && (this._originalCursor = this._element.style.cursor, 
                        this._element.style.cursor = a.resizeCursor) : null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null));
                    }, a.prototype.onElementMouseOut = function(a) {
                        this._startMousePosition || null !== this._originalCursor && (this._element.style.cursor = this._originalCursor, 
                        this._originalCursor = null);
                    }, a.prototype.onElementMouseDoubleClick = function(b) {
                        this._hotSpot(a.getMouseCoordinates(b)) && this._handler.onReset(this.cell);
                    }, a.prototype.onDocumentMouseMove = function(b) {
                        if (this._startMousePosition) {
                            var c = a.getMouseCoordinateDelta(this._startMousePosition, a.getMouseCoordinates(b));
                            this._handler.onResize(this.cell, c.x, c.y);
                        }
                    }, a.prototype.onDocumentMouseUp = function(b) {
                        this._startMousePosition = null, "releaseCapture" in this._element && this._element.releaseCapture(), 
                        a.removeDocumentMouseMoveEvent(this._documentMouseMoveWrapper), this._documentMouseMoveWrapper = null, 
                        a.removeDocumentMouseUpEvent(this._documentMouseUpWrapper), this._documentMouseUpWrapper = null, 
                        document.documentElement && (document.documentElement.style.cursor = this._originalCursor), 
                        b.preventDefault && b.preventDefault(), this._handler.onEndResize(this.cell);
                    }, a.resizeHandleSize = 4, a.resizeCursor = "e-resize", a;
                }();
                a.TablixResizer = b;
                var c = function() {
                    function a(a, b, c) {
                        this._scrollable = !1, this._presenter = a, this.extension = b, this._presenter.initialize(this), 
                        this._row = c, this.item = null, this.type = null, this._horizontalOffset = 0, this._verticalOffset = 0, 
                        this._colSpan = 1, this._rowSpan = 1, this._contentWidth = -1, this._contentHeight = -1;
                    }
                    return Object.defineProperty(a.prototype, "colSpan", {
                        get: function() {
                            return this._colSpan;
                        },
                        set: function(a) {
                            this._colSpan !== a && (this._presenter.onColumnSpanChanged(a), this._colSpan = a);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "rowSpan", {
                        get: function() {
                            return this._rowSpan;
                        },
                        set: function(a) {
                            this._rowSpan !== a && (this._presenter.onRowSpanChanged(a), this._rowSpan = a);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "textAlign", {
                        get: function() {
                            return this._textAlign;
                        },
                        set: function(a) {
                            a !== this._textAlign && (this._presenter.onTextAlignChanged(a), this._textAlign = a);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "horizontalOffset", {
                        get: function() {
                            return this._horizontalOffset;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "verticalOffset", {
                        get: function() {
                            return this._verticalOffset;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.isScrollable = function() {
                        return this._scrollable;
                    }, a.prototype.clear = function() {
                        this.isScrollable() && this.initializeScrolling(), this._presenter.onClear(), this.setContentWidth(-1), 
                        this.setContentHeight(-1);
                    }, a.prototype.initializeScrolling = function() {
                        this._presenter.onInitializeScrolling(), this._horizontalOffset = 0, this._verticalOffset = 0, 
                        this.setContentWidth(-1), this.setContentHeight(-1);
                    }, a.prototype.prepare = function(a) {
                        this.isScrollable() && this.initializeScrolling(), this._scrollable = a;
                    }, a.prototype.scrollVertically = function(a, b) {
                        if (this.isScrollable()) {
                            var c = -a * b;
                            this._verticalOffset = c, this._presenter.onVerticalScroll(a, c), this.setContentHeight(a + c);
                        }
                    }, a.prototype.scrollHorizontally = function(a, b) {
                        if (this.isScrollable()) {
                            var c = -a * b;
                            this._horizontalOffset = c, this._presenter.onHorizontalScroll(a, c), this.setContentWidth(a + c);
                        }
                    }, a.prototype.setContentWidth = function(a) {
                        a !== this._contentWidth && (this._contentWidth = a, this._presenter.onContentWidthChanged(a));
                    }, a.prototype.setContentHeight = function(a) {
                        a !== this._contentHeight && (this._contentHeight = a, this._presenter.onContentHeightChanged(a));
                    }, a.prototype.enableHorizontalResize = function(a, b) {
                        this._presenter.enableHorizontalResize(a, b);
                    }, a;
                }();
                a.TablixCell = c;
                var d = function() {
                    function a(a) {
                        this._presenter = a, this._presenter.initialize(this), this._contentWidth = -1, 
                        this._width = -1, this._sizeFixed = !1, this._aligningWidth = -1, this._fixedToAligningWidth = !1, 
                        this._items = [], this._itemType = null, this._footerCell = null;
                    }
                    return a.prototype.initialize = function(a) {
                        this._owner = a, this._realizedRowHeaders = [], this._realizedColumnHeaders = [], 
                        this._realizedCornerCells = [], this._realizedBodyCells = [];
                    }, Object.defineProperty(a.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.getType = function() {
                        return this._realizedCornerCells.length > 0 ? 0 : 2;
                    }, a.prototype.getColumnHeadersOrCorners = function() {
                        return this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders;
                    }, a.prototype.columnHeadersOrCornersEqual = function(a, b, c) {
                        if (this._items.length !== b.length) return !1;
                        for (var d = this._items.length, e = 0; d > e; e++) if (!this.columnHeaderOrCornerEquals(this._itemType, this._items[e], a, b[e].item, c)) return !1;
                        return !0;
                    }, Object.defineProperty(a.prototype, "itemType", {
                        get: function() {
                            return this._itemType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.getLeafItem = function() {
                        return 0 === this._items.length ? null : this._items[this._items.length - 1];
                    }, a.prototype.columnHeaderOrCornerEquals = function(a, b, c, d, e) {
                        if (a !== c) return !1;
                        if (0 === a) {
                            if (!e.cornerCellItemEquals(b, d)) return !1;
                        } else if (!e.headerItemEquals(b, d)) return !1;
                        return !0;
                    }, a.prototype.OnLeafRealized = function(a) {
                        var b = this.getType(), c = this.getColumnHeadersOrCorners();
                        if (this.columnHeadersOrCornersEqual(b, c, a)) this.clearSpanningCellsWidth(this._realizedColumnHeaders); else {
                            var d = c.length;
                            this._items = [];
                            for (var e = 0; d > e; e++) this._items.push(c[e].item);
                            this._itemType = b, this.clearSize();
                        }
                    }, a.prototype.clearSpanningCellsWidth = function(a) {
                        for (var b = 0; b < a.length; b++) {
                            var c = a[b];
                            c.colSpan > 1 && c.setContentWidth(-1);
                        }
                    }, a.prototype.addCornerCell = function(a) {
                        a._column = this, this._realizedCornerCells.push(a), a.setContentWidth(this._contentWidth);
                    }, a.prototype.addRowHeader = function(a) {
                        a._column = this, this._realizedRowHeaders.push(a), a.setContentWidth(this._contentWidth);
                    }, a.prototype.addColumnHeader = function(a, b) {
                        a._column = this, this._realizedColumnHeaders.push(a), b && a.setContentWidth(this._contentWidth);
                    }, a.prototype.addBodyCell = function(a) {
                        a._column = this, this._realizedBodyCells.push(a), a.setContentWidth(this._contentWidth);
                    }, Object.defineProperty(a.prototype, "footer", {
                        get: function() {
                            return this._footerCell;
                        },
                        set: function(a) {
                            this._footerCell = a, a._column = this, a.setContentWidth(this._contentWidth);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.resize = function(a) {
                        a !== this.getContentContextualWidth() && (this._contentWidth = a, this.setContentWidth(this._contentWidth), 
                        this._sizeFixed = !0, this._fixedToAligningWidth = !1, this._aligningWidth = -1);
                    }, a.prototype.fixSize = function() {
                        var a = -1 !== this._aligningWidth, b = a !== this._fixedToAligningWidth;
                        (!this._sizeFixed || b || a) && (-1 === this._aligningWidth ? (this._contentWidth += 1, 
                        this.setContentWidth(this._contentWidth)) : this.setContentWidth(this._aligningWidth), 
                        this._sizeFixed = !0, this._fixedToAligningWidth = -1 !== this._aligningWidth);
                    }, a.prototype.clearSize = function() {
                        this._contentWidth = -1, this.setContentWidth(this._contentWidth), this._sizeFixed = !1;
                    }, a.prototype.getContentContextualWidth = function() {
                        return this._contentWidth;
                    }, a.prototype.getCellIContentContextualWidth = function(a) {
                        return this._presenter.getCellContentWidth(a);
                    }, a.prototype.getCellSpanningWidthWithScrolling = function(a, b) {
                        var c = this.getContextualWidth() + this.getScrollingOffset();
                        if (a.colSpan > 1) for (var d = this.getIndex(b), e = b.realizedColumns, f = 1; f < a.colSpan; f++) c += e[f + d].getContextualWidth();
                        return c;
                    }, a.prototype.getScrollingOffset = function() {
                        var a = 0;
                        return this._realizedColumnHeaders.length > 0 && (a = this._realizedColumnHeaders[this._realizedColumnHeaders.length - 1].horizontalOffset), 
                        a;
                    }, a.prototype.getContextualWidth = function() {
                        return (-1 === this._width || -1 === this._contentWidth) && (this._width = this._presenter.getWidth()), 
                        this._width;
                    }, a.prototype.calculateSize = function() {
                        if (!this._sizeFixed) {
                            for (var a = 0, b = this._realizedColumnHeaders.length, c = 0; b > c; c++) {
                                var d = this._realizedColumnHeaders[c];
                                1 === d.colSpan && (a = Math.max(a, this._presenter.getCellContentWidth(d)));
                            }
                            b = this._realizedRowHeaders.length;
                            for (var c = 0; b > c; c++) {
                                var d = this._realizedRowHeaders[c];
                                1 === d.colSpan && (a = Math.max(a, this._presenter.getCellContentWidth(d)));
                            }
                            b = this._realizedCornerCells.length;
                            for (var c = 0; b > c; c++) a = Math.max(a, this._presenter.getCellContentWidth(this._realizedCornerCells[c]));
                            b = this._realizedBodyCells.length;
                            for (var c = 0; b > c; c++) a = Math.max(a, this._presenter.getCellContentWidth(this._realizedBodyCells[c]));
                            null !== this._footerCell && 1 === this._footerCell.colSpan && (a = Math.max(a, this._presenter.getCellContentWidth(this._footerCell))), 
                            this._contentWidth = a;
                        }
                    }, a.prototype.setAligningContextualWidth = function(a) {
                        this._aligningWidth = a;
                    }, a.prototype.getAligningContextualWidth = function() {
                        return this._aligningWidth;
                    }, a.prototype.setContentWidth = function(a) {
                        for (var b = this._realizedColumnHeaders.length, c = 0; b > c; c++) {
                            var d = this._realizedColumnHeaders[c];
                            1 === d.colSpan && d.setContentWidth(a);
                        }
                        b = this._realizedRowHeaders.length;
                        for (var c = 0; b > c; c++) {
                            var d = this._realizedRowHeaders[c];
                            1 === d.colSpan && d.setContentWidth(a);
                        }
                        b = this._realizedCornerCells.length;
                        for (var c = 0; b > c; c++) this._realizedCornerCells[c].setContentWidth(a);
                        b = this._realizedBodyCells.length;
                        for (var c = 0; b > c; c++) this._realizedBodyCells[c].setContentWidth(a);
                        null !== this._footerCell && 1 === this._footerCell.colSpan && this._footerCell.setContentWidth(a), 
                        this._width = -1;
                    }, a.prototype.getTablixCell = function() {
                        var a = this._realizedColumnHeaders.length > 0 ? this._realizedColumnHeaders : this._realizedCornerCells;
                        return a[a.length - 1];
                    }, a.prototype.getIndex = function(a) {
                        return a.realizedColumns.indexOf(this);
                    }, a.prototype.getHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, a.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedRowHeaders;
                    }, a.prototype.getCellContextualSpan = function(a) {
                        return a.colSpan;
                    }, a.prototype.getOtherDimensionOwner = function(a) {
                        return a._row;
                    }, a;
                }();
                a.TablixColumn = d;
                var e = function() {
                    function a(a) {
                        this._contentHeight = -1, this._presenter = a, this._presenter.initialize(this), 
                        this._allocatedCells = [], this._heightFixed = !1, this._contentHeight = -1, this._height = -1;
                    }
                    return a.prototype.initialize = function(a) {
                        this._owner = a, this._realizedRowHeaders = [], this._realizedBodyCells = [], this._realizedCornerCells = [], 
                        this._realizedColumnHeaders = [], this._realizedCellsCount = 0;
                    }, Object.defineProperty(a.prototype, "presenter", {
                        get: function() {
                            return this._presenter;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.releaseUnusedCells = function(a) {
                        this.releaseCells(a, this._realizedCellsCount);
                    }, a.prototype.releaseAllCells = function(a) {
                        this.releaseCells(a, 0);
                    }, a.prototype.releaseCells = function(a, b) {
                        for (var c = this._allocatedCells, d = c.length, e = b; d > e; e++) {
                            var f = c[e];
                            a._unbindCell(f), f.clear();
                        }
                    }, a.prototype.moveScrollableCellsToEnd = function(a) {
                        for (var b = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), c = b; b + a > c; c++) {
                            var d = this._allocatedCells[c];
                            this._presenter.onRemoveCell(d), this._presenter.onAppendCell(d), this._allocatedCells.push(d);
                        }
                        this._allocatedCells.splice(b, a);
                    }, a.prototype.moveScrollableCellsToStart = function(a) {
                        for (var b = Math.max(this._realizedRowHeaders.length, this._realizedCornerCells.length), c = b; b + a > c; c++) {
                            var d = this._allocatedCells.pop();
                            this._presenter.onRemoveCell(d), this._presenter.onInsertCellBefore(d, this._allocatedCells[b]), 
                            this._allocatedCells.splice(b, 0, d);
                        }
                    }, a.prototype.getOrCreateCornerCell = function(a) {
                        var b = this.getOrCreateCell();
                        return b.prepare(!1), a.addCornerCell(b), this._realizedCornerCells.push(b), b.setContentHeight(this._contentHeight), 
                        b;
                    }, a.prototype.getOrCreateRowHeader = function(a, b, c) {
                        var d = this.getOrCreateCell();
                        return d.prepare(b), a.addRowHeader(d), this._realizedRowHeaders.push(d), c && d.setContentHeight(this._contentHeight), 
                        d;
                    }, a.prototype.getOrCreateColumnHeader = function(a, b, c) {
                        var d = this.getOrCreateCell();
                        return d.prepare(b), a.addColumnHeader(d, c), this._realizedColumnHeaders.push(d), 
                        d.setContentHeight(this._contentHeight), d;
                    }, a.prototype.getOrCreateBodyCell = function(a, b) {
                        var c = this.getOrCreateCell();
                        return c.prepare(b), a.addBodyCell(c), this._realizedBodyCells.push(c), c.setContentHeight(this._contentHeight), 
                        c;
                    }, a.prototype.getOrCreateFooterRowHeader = function(a) {
                        var b = this.getOrCreateCell();
                        return b.prepare(!1), a.footer = b, this._realizedRowHeaders.push(b), b.setContentHeight(this._contentHeight), 
                        b;
                    }, a.prototype.getOrCreateFooterBodyCell = function(a, b) {
                        var c = this.getOrCreateCell();
                        return c.prepare(b), a.footer = c, this._realizedBodyCells.push(c), c.setContentHeight(this._contentHeight), 
                        c;
                    }, a.prototype.getRowHeaderLeafIndex = function() {
                        for (var a = -1, b = this._allocatedCells.length, c = 0; b > c && 1 === this._allocatedCells[c].type; c++) a++;
                        return a;
                    }, a.prototype.getAllocatedCellAt = function(a) {
                        return this._allocatedCells[a];
                    }, a.prototype.moveCellsBy = function(a) {
                        if (0 !== this._allocatedCells.length) if (a > 0) for (var b = this._allocatedCells[0], c = 0; a > c; c++) {
                            var d = this.createCell(this);
                            this._presenter.onInsertCellBefore(d, b), this._allocatedCells.unshift(d), b = d;
                        } else {
                            a = -a;
                            for (var c = 0; a > c; c++) this._presenter.onRemoveCell(this._allocatedCells[c]);
                            this._allocatedCells.splice(0, a);
                        }
                    }, a.prototype.getRealizedCellCount = function() {
                        return this._realizedCellsCount;
                    }, a.prototype.getRealizedHeadersCount = function() {
                        return this._realizedRowHeaders.length;
                    }, a.prototype.getRealizedHeaderAt = function(a) {
                        return this._realizedRowHeaders[a];
                    }, a.prototype.getTablixCell = function() {
                        var a;
                        return a = this._realizedRowHeaders.length > 0 ? this._realizedRowHeaders : this._realizedCornerCells.length > 0 ? this._realizedCornerCells : this._realizedColumnHeaders, 
                        a[a.length - 1];
                    }, a.prototype.getOrCreateEmptySpaceCell = function() {
                        var a = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === a && (a = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = a, 
                        this._presenter.onAppendCell(a)), a;
                    }, a.prototype.createCell = function(a) {
                        var b = this._presenter.createCellPresenter(this._owner.owner.layoutManager.getLayoutKind());
                        return new c(b, b, this);
                    }, a.prototype.getOrCreateCell = function() {
                        var a = this._allocatedCells[this._realizedCellsCount];
                        return void 0 === a ? (a = this.createCell(this), this._allocatedCells[this._realizedCellsCount] = a, 
                        this._presenter.onAppendCell(a)) : (a.colSpan = 1, a.rowSpan = 1), this._realizedCellsCount = this._realizedCellsCount + 1, 
                        a;
                    }, a.prototype.resize = function(a) {
                        a !== this.getContentContextualWidth() && (this._contentHeight = a, this.setContentHeight(), 
                        this._heightFixed = !0, this.setAligningContextualWidth(-1));
                    }, a.prototype.fixSize = function() {
                        this.sizeFixed() || (this.setContentHeight(), this._heightFixed = !0);
                    }, a.prototype.getContentContextualWidth = function() {
                        return this._contentHeight;
                    }, a.prototype.getCellIContentContextualWidth = function(a) {
                        return this.presenter.getCellContentHeight(a);
                    }, a.prototype.getCellSpanningHeight = function(a, b) {
                        var c = this.getContextualWidth();
                        if (a.rowSpan > 1) for (var d = this.getIndex(b), e = b.realizedRows, f = 1; f < a.rowSpan; f++) c += e[f + d].getContextualWidth();
                        return c;
                    }, a.prototype.getContextualWidth = function() {
                        return (-1 === this._height || -1 === this._contentHeight) && (this._height = this._presenter.getHeight()), 
                        this._height;
                    }, a.prototype.sizeFixed = function() {
                        return this._heightFixed;
                    }, a.prototype.calculateSize = function() {
                        if (!this._heightFixed) {
                            for (var a = 0, b = this._realizedRowHeaders.length, c = 0; b > c; c++) {
                                var d = this._realizedRowHeaders[c];
                                1 === d.rowSpan && (a = Math.max(a, this._presenter.getCellContentHeight(d)));
                            }
                            b = this._realizedCornerCells.length;
                            for (var c = 0; b > c; c++) a = Math.max(a, this._presenter.getCellContentHeight(this._realizedCornerCells[c]));
                            b = this._realizedColumnHeaders.length;
                            for (var c = 0; b > c; c++) {
                                var d = this._realizedColumnHeaders[c];
                                1 === d.rowSpan && (a = Math.max(a, this._presenter.getCellContentHeight(d)));
                            }
                            b = this._realizedBodyCells.length;
                            for (var c = 0; b > c; c++) a = Math.max(a, this._presenter.getCellContentHeight(this._realizedBodyCells[c]));
                            this._contentHeight = a;
                        }
                    }, a.prototype.setAligningContextualWidth = function(a) {}, a.prototype.getAligningContextualWidth = function() {
                        return -1;
                    }, a.prototype.setContentHeight = function() {
                        for (var a = this._realizedRowHeaders.length, b = 0; a > b; b++) {
                            var c = this._realizedRowHeaders[b];
                            c.rowSpan && c.setContentHeight(this._contentHeight);
                        }
                        a = this._realizedCornerCells.length;
                        for (var b = 0; a > b; b++) this._realizedCornerCells[b].setContentHeight(this._contentHeight);
                        a = this._realizedColumnHeaders.length;
                        for (var b = 0; a > b; b++) {
                            var c = this._realizedColumnHeaders[b];
                            1 === c.rowSpan && c.setContentHeight(this._contentHeight);
                        }
                        a = this._realizedBodyCells.length;
                        for (var b = 0; a > b; b++) this._realizedBodyCells[b].setContentHeight(this._contentHeight);
                        this._height = -1;
                    }, a.prototype.getIndex = function(a) {
                        return a.realizedRows.indexOf(this);
                    }, a.prototype.getHeaders = function() {
                        return this._realizedRowHeaders;
                    }, a.prototype.getOtherDimensionHeaders = function() {
                        return this._realizedColumnHeaders;
                    }, a.prototype.getCellContextualSpan = function(a) {
                        return a.rowSpan;
                    }, a.prototype.getOtherDimensionOwner = function(a) {
                        return a._column;
                    }, a;
                }();
                a.TablixRow = e;
                var f = function() {
                    function a(a) {
                        this._presenter = a, this._footerRow = null;
                    }
                    return a.prototype.initialize = function(a, b, c) {
                        this._owner = a, this._presenter.initialize(this, b, c, a), this.fillColumnsProportionally = !1, 
                        this._realizedRows = [], this._realizedColumns = [], this._emptySpaceHeaderCell = null, 
                        this._emptyFooterSpaceCell = null;
                    }, Object.defineProperty(a.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "fillColumnsProportionally", {
                        get: function() {
                            return this._fillColumnsProportionally;
                        },
                        set: function(a) {
                            this._fillColumnsProportionally !== a && (this._fillColumnsProportionally = a, this._presenter.onFillColumnsProportionallyChanged(a));
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "realizedColumns", {
                        get: function() {
                            return this._realizedColumns;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "realizedRows", {
                        get: function() {
                            return this._realizedRows;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "footerRow", {
                        get: function() {
                            return this._footerRow;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "emptySpaceHeaderCell", {
                        get: function() {
                            return this._emptySpaceHeaderCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "emptySpaceFooterCell", {
                        get: function() {
                            return this._emptyFooterSpaceCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.ShowEmptySpaceCells = function(a, b) {
                        0 !== this._realizedRows.length && (0 === this._realizedRows.length || this._emptySpaceHeaderCell || (this._emptySpaceHeaderCell = this._realizedRows[0].getOrCreateEmptySpaceCell(), 
                        this._emptySpaceHeaderCell.rowSpan = a, this._emptySpaceHeaderCell.colSpan = 1, 
                        this._emptySpaceHeaderCell.setContentWidth(b)), this._footerRow && null === this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell = this._footerRow.getOrCreateEmptySpaceCell(), 
                        this._emptyFooterSpaceCell.rowSpan = 1, this._emptyFooterSpaceCell.colSpan = 1, 
                        this._emptyFooterSpaceCell.setContentWidth(b)));
                    }, a.prototype.HideEmptySpaceCells = function() {
                        this._emptySpaceHeaderCell && (this._emptySpaceHeaderCell.clear(), this._emptySpaceHeaderCell = null), 
                        this._emptyFooterSpaceCell && (this._emptyFooterSpaceCell.clear(), this._emptyFooterSpaceCell = null);
                    }, a.prototype.onStartRenderingIteration = function(a) {
                        this.initializeRows(a), this.initializeColumns(a);
                    }, a.prototype.onEndRenderingIteration = function() {
                        var a = this._rows;
                        if (void 0 !== a) for (var b = a.length, c = 0; b > c; c++) a[c].releaseUnusedCells(this._owner);
                        this._footerRow && this._footerRow.releaseUnusedCells(this._owner);
                    }, a.prototype.onStartRenderingSession = function() {}, a.prototype.onEndRenderingSession = function() {}, 
                    a.prototype.getOrCreateRow = function(a) {
                        var b = this._rows[a];
                        return void 0 === b && (b = new e(this._presenter.createRowPresenter()), b.initialize(this), 
                        this._presenter.onAppendRow(b), this._rows[a] = b), void 0 === this._realizedRows[a] && (this._realizedRows[a] = b), 
                        b;
                    }, a.prototype.getOrCreateFootersRow = function() {
                        return null === this._footerRow && (this._footerRow = new e(this._presenter.createRowPresenter()), 
                        this._footerRow.initialize(this), this._presenter.onAddFooterRow(this._footerRow)), 
                        this._footerRow;
                    }, a.prototype.moveRowsToEnd = function(a, b) {
                        for (var c = 0; b > c; c++) {
                            var d = this._rows[c + a];
                            this._presenter.onRemoveRow(d), this._presenter.onAppendRow(d), this._rows.push(d);
                        }
                        this._rows.splice(a, b);
                    }, a.prototype.moveRowsToStart = function(a, b) {
                        for (var c = this._rows[a], d = 0; b > d; d++) {
                            var e = this._rows.pop();
                            this._presenter.onRemoveRow(e), this._presenter.onInsertRowBefore(e, c), this._rows.splice(a + d, 0, e);
                        }
                    }, a.prototype.moveColumnsToEnd = function(a, b) {
                        for (var c = this._rows[0]._realizedCornerCells.length, d = Math.max(this._columns[c]._realizedColumnHeaders.length - 1, 0), e = d; e < this._rows.length; e++) this._rows[e].moveScrollableCellsToEnd(b);
                        for (var e = 0; b > e; e++) {
                            var f = this._columns[e + a];
                            this._columns.push(f);
                        }
                        this._columns.splice(a, b);
                    }, a.prototype.moveColumnsToStart = function(a, b) {
                        for (var c = this._rows[0]._realizedCornerCells.length, d = Math.max(this._columns[c]._realizedColumnHeaders.length - 1, 0), e = d; e < this._rows.length; e++) this._rows[e].moveScrollableCellsToStart(b);
                        for (var e = 0; b > e; e++) {
                            var f = this._columns.pop();
                            this._columns.splice(a + e, 0, f);
                        }
                    }, a.prototype.getOrCreateColumn = function(a) {
                        var b = this._columns[a];
                        return void 0 === b && (b = new d(this._presenter.createColumnPresenter()), b.initialize(this), 
                        this._columns[a] = b), void 0 === this._realizedColumns[a] && (this._realizedColumns[a] = b), 
                        b;
                    }, a.prototype.initializeColumns = function(a) {
                        (void 0 === this._columns || a) && (this._columns = []);
                        for (var b = this._columns.length, c = 0; b > c; c++) this._columns[c].initialize(this);
                        this._realizedColumns = [];
                    }, a.prototype.initializeRows = function(a) {
                        var b = this._owner.rowDimension.hasFooter() && null !== this._footerRow;
                        if (a) {
                            var c = this._rows;
                            if (c) {
                                for (var d = c.length, e = 0; d > e; e++) c[e].releaseAllCells(this._owner);
                                b && this._footerRow.releaseAllCells(this._owner), this._presenter.onClear(), this._footerRow = null, 
                                this._rows = null;
                            }
                        }
                        this._realizedRows = [], this._rows || (this._rows = []);
                        for (var c = this._rows, d = c.length, e = 0; d > e; e++) c[e].initialize(this);
                        b && (this._footerRow || this.getOrCreateFootersRow(), this._footerRow.initialize(this));
                    }, a.prototype.getWidth = function() {
                        return this._presenter.getWidth();
                    }, a.prototype.getHeight = function() {
                        return this._presenter.getHeight();
                    }, a;
                }();
                a.TablixGrid = f;
            }(b = a.internal || (a.internal = {}));
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(b) {
                var c = "unselectable", d = function(a) {
                    function c(b, c, d) {
                        this._cell = b, a.call(this, c, d);
                    }
                    return __extends(c, a), Object.defineProperty(c.prototype, "cell", {
                        get: function() {
                            return this._cell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype._hotSpot = function(a) {
                        return a.x >= this.element.getBoundingClientRect().right - b.TablixResizer.resizeHandleSize;
                    }, c;
                }(b.TablixResizer);
                b.TablixDomResizer = d;
                var e = function() {
                    function c(a, d) {
                        this._tableCell = null, this._contentElement = b.TablixUtils.createDiv(), this._contentElement.style.position = "relative", 
                        a || this._contentElement.style.setProperty("float", "left"), this._contentHost = b.TablixUtils.createDiv(), 
                        this._contentHost.style.position = "relative", 1 === d && (this._contentHost.style.textOverflow = "ellipsis", 
                        this._contentHost.style.paddingRight = "2px"), this._contentElement.appendChild(this._contentHost), 
                        this._resizer = null, c.addNoMarginStyle();
                    }
                    return c.prototype.initialize = function(a) {
                        this._owner = a;
                    }, Object.defineProperty(c.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.registerTableCell = function(a) {
                        this._tableCell = a, a.appendChild(this._contentElement), a.className = c._noMarginsStyleName, 
                        a.style.verticalAlign = "top", a.style.lineHeight = "normal";
                    }, Object.defineProperty(c.prototype, "tableCell", {
                        get: function() {
                            return this._tableCell;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(c.prototype, "contentElement", {
                        get: function() {
                            return this._contentElement;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(c.prototype, "contentHost", {
                        get: function() {
                            return this._contentHost;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.registerClickHandler = function(a) {
                        this._contentElement.onclick = a;
                    }, c.prototype.unregisterClickHandler = function() {
                        this._contentElement.onclick = null;
                    }, c.prototype.onContentWidthChanged = function(b) {
                        a.HTMLElementUtils.setElementWidth(this._contentElement, b);
                    }, c.prototype.onContentHeightChanged = function(b) {
                        a.HTMLElementUtils.setElementHeight(this._contentElement, b);
                    }, c.prototype.onColumnSpanChanged = function(a) {
                        this._tableCell.colSpan = a;
                    }, c.prototype.onRowSpanChanged = function(a) {
                        this._tableCell.rowSpan = a;
                    }, c.prototype.onTextAlignChanged = function(a) {
                        this._tableCell.style.textAlign = a;
                    }, c.prototype.onClear = function() {
                        this._contentHost.className = "", this._contentHostStyle = "", this._tableCell.className = c._noMarginsStyleName, 
                        this._containerStyle = "";
                    }, c.prototype.onHorizontalScroll = function(b, c) {
                        a.HTMLElementUtils.setElementLeft(this._contentHost, c), a.HTMLElementUtils.setElementWidth(this._contentHost, b);
                    }, c.prototype.onVerticalScroll = function(b, c) {
                        a.HTMLElementUtils.setElementTop(this._contentHost, c), a.HTMLElementUtils.setElementHeight(this._contentHost, b);
                    }, c.prototype.onInitializeScrolling = function() {
                        a.HTMLElementUtils.setElementLeft(this._contentHost, 0), a.HTMLElementUtils.setElementTop(this._contentHost, 0), 
                        a.HTMLElementUtils.setElementWidth(this._contentHost, -1), a.HTMLElementUtils.setElementHeight(this._contentHost, -1);
                    }, c.prototype.setContentHostStyle = function(a) {
                        this._contentHostStyle !== a && (this._contentHostStyle = a, this._contentHost.className = this._contentHostStyle);
                    }, c.prototype.setContainerStyle = function(a) {
                        this._containerStyle !== a && (this._containerStyle = a, this._tableCell.className = this._containerStyle + " " + c._noMarginsStyleName);
                    }, c.prototype.clearContainerStyle = function() {
                        this._containerStyle = void 0, this._tableCell.className !== c._noMarginsStyleName && (this._tableCell.className = c._noMarginsStyleName);
                    }, c.prototype.enableHorizontalResize = function(a, b) {
                        a !== (null !== this._resizer) && (a ? (this._resizer = new d(this._owner, this._tableCell, b), 
                        this._resizer.initialize()) : (this._resizer.uninitialize(), this._resizer = null));
                    }, c.addNoMarginStyle = function() {
                        if (!c._noMarginsStyle) {
                            var a = document.createElement("style");
                            a.appendChild(document.createTextNode("." + c._noMarginsStyleName + "{ padding: 0px; margin: 0px}")), 
                            document.head.appendChild(a), c._noMarginsStyle = a;
                        }
                    }, c.prototype.disableDragResize = function() {
                        this._tableCell.setAttribute(c._dragResizeDisabledAttributeName, "true");
                    }, c._noMarginsStyleName = "bi-tablix-cellNoMarginStyle", c._dragResizeDisabledAttributeName = "drag-resize-disabled", 
                    c;
                }();
                b.TablixCellPresenter = e;
                var f = function() {
                    function a(a) {
                        this._tableRow = null, this._fitProportionally = a;
                    }
                    return a.prototype.initialize = function(a) {
                        this._row = a;
                    }, a.prototype.createCellPresenter = function(a) {
                        return new e(this._fitProportionally, a);
                    }, a.prototype.registerRow = function(a) {
                        this._tableRow = a;
                    }, a.prototype.onAppendCell = function(a) {
                        var b = a._presenter;
                        if (null === b.tableCell) {
                            var c = this._tableRow.insertCell(-1);
                            b.registerTableCell(c);
                        } else this._tableRow.appendChild(b.tableCell);
                    }, a.prototype.onInsertCellBefore = function(a, b) {
                        var c = a._presenter;
                        if (null === c.tableCell) {
                            var d = this._tableRow.insertCell(Math.max(0, b._presenter.tableCell.cellIndex - 1));
                            c.registerTableCell(d);
                        } else this._tableRow.insertBefore(a._presenter.tableCell, b._presenter.tableCell);
                    }, a.prototype.onRemoveCell = function(a) {
                        this._tableRow.removeChild(a._presenter.tableCell);
                    }, a.prototype.getHeight = function() {
                        return this.getCellHeight(this._row.getTablixCell());
                    }, a.prototype.getCellHeight = function(a) {
                        return -1;
                    }, a.prototype.getCellContentHeight = function(a) {
                        return -1;
                    }, Object.defineProperty(a.prototype, "tableRow", {
                        get: function() {
                            return this._tableRow;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a;
                }();
                b.TablixRowPresenter = f;
                var g = function(a) {
                    function b(b, c) {
                        a.call(this, c), this._gridPresenter = b;
                    }
                    return __extends(b, a), b.prototype.getCellHeight = function(a) {
                        return this._gridPresenter.sizeComputationManager.cellHeight;
                    }, b.prototype.getCellContentHeight = function(a) {
                        return this._gridPresenter.sizeComputationManager.contentHeight;
                    }, b;
                }(f);
                b.DashboardRowPresenter = g;
                var h = function(b) {
                    function c() {
                        b.apply(this, arguments);
                    }
                    return __extends(c, b), c.prototype.getCellHeight = function(b) {
                        return a.HTMLElementUtils.getElementHeight(b._presenter.tableCell);
                    }, c.prototype.getCellContentHeight = function(b) {
                        return a.HTMLElementUtils.getElementHeight(b._presenter.contentElement);
                    }, c;
                }(f);
                b.CanvasRowPresenter = h;
                var i = function() {
                    function a() {}
                    return a.prototype.initialize = function(a) {
                        this._column = a;
                    }, a.prototype.getWidth = function() {
                        return this.getCellWidth(this._column.getTablixCell());
                    }, a.prototype.getCellWidth = function(a) {
                        return -1;
                    }, a.prototype.getCellContentWidth = function(a) {
                        return -1;
                    }, a;
                }();
                b.TablixColumnPresenter = i;
                var j = function(a) {
                    function b(b) {
                        a.call(this), this._gridPresenter = b;
                    }
                    return __extends(b, a), b.prototype.getCellWidth = function(a) {
                        return this._gridPresenter.sizeComputationManager.cellWidth;
                    }, b.prototype.getCellContentWidth = function(a) {
                        return this._gridPresenter.sizeComputationManager.contentWidth;
                    }, b;
                }(i);
                b.DashboardColumnPresenter = j;
                var k = function(b) {
                    function c() {
                        b.apply(this, arguments);
                    }
                    return __extends(c, b), c.prototype.getCellWidth = function(b) {
                        return a.HTMLElementUtils.getElementWidth(b._presenter.tableCell);
                    }, c.prototype.getCellContentWidth = function(b) {
                        return a.HTMLElementUtils.getElementWidth(b._presenter.contentElement);
                    }, c;
                }(i);
                b.CanvasColumnPresenter = k;
                var l = function() {
                    function d() {
                        this._table = b.TablixUtils.createTable(), this._table.className = c, this._footerTable = b.TablixUtils.createTable(), 
                        this._footerTable.className = c;
                    }
                    return d.prototype.initialize = function(a, b, c, d) {
                        this._owner = a, b.appendChild(this._table), c.appendChild(this._footerTable);
                    }, d.prototype.getWidth = function() {
                        return -1;
                    }, d.prototype.getHeight = function() {
                        return -1;
                    }, d.prototype.getScreenToCssRatioX = function() {
                        return 1;
                    }, d.prototype.getScreenToCssRatioY = function() {
                        return 1;
                    }, d.prototype.createRowPresenter = function() {
                        return null;
                    }, d.prototype.createColumnPresenter = function() {
                        return null;
                    }, d.prototype.onAppendRow = function(a) {
                        var b = a.presenter;
                        if (null === b.tableRow) {
                            var c = this._table.insertRow(-1);
                            b.registerRow(c);
                        } else this._table.tBodies[0].appendChild(a.presenter.tableRow);
                    }, d.prototype.onInsertRowBefore = function(a, b) {
                        var c = a.presenter;
                        if (null === c.tableRow) {
                            var d = this._table.insertRow(Math.max(0, b.presenter.tableRow.rowIndex - 1));
                            c.registerRow(d);
                        } else this._table.tBodies[0].insertBefore(a.presenter.tableRow, b.presenter.tableRow);
                    }, d.prototype.onRemoveRow = function(a) {
                        this._table.tBodies[0].removeChild(a.presenter.tableRow);
                    }, d.prototype.onAddFooterRow = function(a) {
                        var b = a.presenter;
                        if (null === b.tableRow) {
                            var c = this._footerTable.insertRow(-1);
                            b.registerRow(c);
                        } else this._footerTable.tBodies[0].appendChild(a.presenter.tableRow);
                    }, d.prototype.onClear = function() {
                        a.HTMLElementUtils.clearChildren(this._table), a.HTMLElementUtils.clearChildren(this._footerTable);
                    }, d.prototype.onFillColumnsProportionallyChanged = function(a) {
                        a ? (this._table.style.width = "100%", this._footerTable.style.width = "100%") : (this._table.style.width = "auto", 
                        this._footerTable.style.width = "auto");
                    }, d;
                }();
                b.TablixGridPresenter = l;
                var m = function(a) {
                    function b(b) {
                        a.call(this), this._sizeComputationManager = b;
                    }
                    return __extends(b, a), b.prototype.createRowPresenter = function() {
                        return new g(this, this._owner.fillColumnsProportionally);
                    }, b.prototype.createColumnPresenter = function() {
                        return new j(this);
                    }, Object.defineProperty(b.prototype, "sizeComputationManager", {
                        get: function() {
                            return this._sizeComputationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.getWidth = function() {
                        return this._sizeComputationManager.gridWidth;
                    }, b.prototype.getHeight = function() {
                        return this._sizeComputationManager.gridHeight;
                    }, b;
                }(l);
                b.DashboardTablixGridPresenter = m;
                var n = function(b) {
                    function c() {
                        b.apply(this, arguments);
                    }
                    return __extends(c, b), c.prototype.createRowPresenter = function() {
                        return new h(this._owner.fillColumnsProportionally);
                    }, c.prototype.createColumnPresenter = function() {
                        return new k();
                    }, c.prototype.getWidth = function() {
                        return a.HTMLElementUtils.getElementWidth(this._table);
                    }, c.prototype.getHeight = function() {
                        return a.HTMLElementUtils.getElementHeight(this._table);
                    }, c;
                }(l);
                b.CanvasTablixGridPresenter = n;
            }(b = a.internal || (a.internal = {}));
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            var c;
            !function(b) {
                var c = function() {
                    function a(a) {
                        this._binder = a, this._adjustmentFactor = 1;
                    }
                    return a.prototype._getOwner = function() {
                        return null;
                    }, Object.defineProperty(a.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "adjustmentFactor", {
                        get: function() {
                            return this._adjustmentFactor;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "itemsToRealizeCount", {
                        get: function() {
                            return this._itemsToRealizeCount;
                        },
                        set: function(a) {
                            this._itemsToRealizeCount = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "itemsEstimatedContextualWidth", {
                        get: function() {
                            return this._itemsEstimatedContextualWidth;
                        },
                        set: function(a) {
                            this._itemsEstimatedContextualWidth = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.onStartRenderingIteration = function() {
                        var a = this._getOwner();
                        a.measureEnabled && !a.done && this._getEstimatedItemsToRealizeCount(), this._realizedLeavesCount = 0;
                    }, a.prototype.onEndRenderingIteration = function(a, b) {
                        b || this._getOwner().allItemsRealized || (this._adjustmentFactor *= this._getSizeAdjustment(a));
                    }, a.prototype.onEndRenderingSession = function() {
                        this._adjustmentFactor = 1;
                    }, a.prototype.onCornerCellRealized = function(a, b) {}, a.prototype.onHeaderRealized = function(a, b, c) {
                        c && this._realizedLeavesCount++;
                    }, Object.defineProperty(a.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizedLeavesCount < this._itemsToRealizeCount;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype._getEstimatedItemsToRealizeCount = function() {}, a.prototype._getSizeAdjustment = function(a) {
                        return 1;
                    }, a;
                }();
                b.TablixDimensionRealizationManager = c;
                var d = function(a) {
                    function b() {
                        a.apply(this, arguments);
                    }
                    return __extends(b, a), Object.defineProperty(b.prototype, "owner", {
                        set: function(a) {
                            this._owner = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype._getOwner = function() {
                        return this._owner;
                    }, b.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateRowsToRealizeCount();
                    }, b.prototype.estimateRowsToRealizeCount = function() {
                        return this._owner.dimension.model ? void (this._owner.alignToEnd ? this.itemsToRealizeCount = this._owner.dimension.getItemsCount() - this._owner.dimension.getIntegerScrollOffset() + 1 : this.itemsToRealizeCount = Math.ceil(this._owner.contextualWidthToFill / (this._owner.owner.getEstimatedRowHeight() * this.adjustmentFactor) + this._owner.dimension.getFractionScrollOffset()) - this._owner.otherLayoutManager.dimension.getDepth() + 1) : void (this.itemsToRealizeCount = 0);
                    }, b.prototype.getEstimatedRowHierarchyWidth = function() {
                        if (!this._owner.dimension.model || 0 === this._owner.dimension.getItemsCount()) return 0;
                        var a = new f();
                        this.updateRowHiearchyEstimatedWidth(this._owner.dimension.model, this._owner.dimension._hierarchyNavigator.getIndex(this._owner.dimension.getFirstVisibleItem(0)), a);
                        for (var b = a.items, c = b.length, d = 0, e = 0; c > e; e++) {
                            var g = b[e];
                            d += 0 !== g.maxNonLeafWidth ? g.maxNonLeafWidth : g.maxLeafWidth;
                        }
                        return d;
                    }, b.prototype.updateRowHiearchyEstimatedWidth = function(a, b, c) {
                        for (var d = this._owner.owner.owner.hierarchyNavigator, e = this.binder, f = d.getCount(a), h = b; f > h; h++) {
                            if (c.leafCount === this.itemsToRealizeCount) return;
                            var i = d.getAt(a, h), j = e.getHeaderLabel(i), k = this._owner.getEstimatedHeaderWidth(j, b), l = d.isLeaf(i), m = d.getLevel(i), n = c.items[m];
                            n || (n = new g(), c.items[m] = n), l ? (n.maxLeafWidth = Math.max(n.maxLeafWidth, k), 
                            c.leafCount = c.leafCount + 1) : (n.maxNonLeafWidth = Math.max(n.maxNonLeafWidth, k), 
                            this.updateRowHiearchyEstimatedWidth(d.getChildren(i), this._owner.dimension.getFirstVisibleChildIndex(i), c));
                        }
                    }, b.prototype._getSizeAdjustment = function(a) {
                        return a / ((this._owner.getRealizedItemsCount() - this._owner.dimension.getFractionScrollOffset()) * this._owner.owner.getEstimatedRowHeight());
                    }, b;
                }(c);
                b.RowRealizationManager = d;
                var e = function(c) {
                    function d() {
                        c.apply(this, arguments);
                    }
                    return __extends(d, c), Object.defineProperty(d.prototype, "owner", {
                        set: function(a) {
                            this._owner = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), d.prototype._getOwner = function() {
                        return this._owner;
                    }, d.prototype._getEstimatedItemsToRealizeCount = function() {
                        this.estimateColumnsToRealizeCount(this.getEstimatedRowHierarchyWidth());
                    }, Object.defineProperty(d.prototype, "rowRealizationManager", {
                        get: function() {
                            return this._owner.otherLayoutManager.realizationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), d.prototype.getEstimatedRowHierarchyWidth = function() {
                        return this._owner.otherLayoutManager.done ? this._owner.getOtherHierarchyContextualHeight() : this.rowRealizationManager.getEstimatedRowHierarchyWidth() * this.adjustmentFactor;
                    }, d.prototype.estimateColumnsToRealizeCount = function(c) {
                        var d = this._owner.contextualWidthToFill - c;
                        if (!this._owner.dimension.model || a.Double.lessOrEqualWithPrecision(d, 0, b.DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = 0);
                        var e = this.binder, f = this._owner.owner.owner.hierarchyNavigator, g = this._owner.dimension.getIntegerScrollOffset(), h = this._owner.dimension.getItemsCount();
                        this.itemsEstimatedContextualWidth = 0;
                        var i = this._owner.otherLayoutManager.dimension.getIntegerScrollOffset(), j = Math.min(i + this.rowRealizationManager.itemsToRealizeCount, this._owner.otherLayoutManager.dimension.getItemsCount() - 1), k = h - g;
                        if (this._owner.alignToEnd) return void (this.itemsToRealizeCount = k);
                        for (var l = g; h > l; l++) {
                            if (a.Double.greaterOrEqualWithPrecision(this.itemsEstimatedContextualWidth, d, b.DimensionLayoutManager._pixelPrecision)) return void (this.itemsToRealizeCount = l - g);
                            var m, n = 0;
                            m = l === g ? this._owner.getVisibleSizeRatio() : 1;
                            var o = f.getLeafAt(this._owner.dimension.model, l), p = e.getHeaderLabel(o);
                            n = Math.max(n, this._owner.getEstimatedHeaderWidth(p, l));
                            for (var q = i; j > q; q++) {
                                var r = f.getIntersection(f.getLeafAt(this._owner.otherLayoutManager.dimension.model, q), o);
                                p = e.getCellContent(r), n = Math.max(n, this._owner.getEstimatedBodyCellWidth(p));
                            }
                            this.itemsEstimatedContextualWidth += n * m * this.adjustmentFactor;
                        }
                        this.itemsToRealizeCount = k;
                    }, d.prototype._getSizeAdjustment = function(a) {
                        return a / (this.getEstimatedRowHierarchyWidth() + this.itemsEstimatedContextualWidth);
                    }, d;
                }(c);
                b.ColumnRealizationManager = e;
                var f = function() {
                    function a() {
                        this.items = [], this.leafCount = 0;
                    }
                    return a;
                }();
                b.RowWidths = f;
                var g = function() {
                    function a() {
                        this.maxLeafWidth = 0, this.maxNonLeafWidth = 0;
                    }
                    return a;
                }();
                b.RowWidth = g;
            }(c = b.internal || (b.internal = {}));
        }(c = b.controls || (b.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            var c;
            !function(c) {
                var d = function() {
                    function a() {}
                    return Object.defineProperty(a.prototype, "visibleWidth", {
                        get: function() {
                            return this._viewport ? this._viewport.width : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "visibleHeight", {
                        get: function() {
                            return this._viewport ? this._viewport.height : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "gridWidth", {
                        get: function() {
                            return this.visibleWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "gridHeight", {
                        get: function() {
                            return this.visibleHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "rowHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "cellWidth", {
                        get: function() {
                            return this._cellWidth;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "cellHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "contentWidth", {
                        get: function() {
                            return this._cellWidth - a.DashboardCellPaddingLeft - a.DashboardCellPaddingRight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "contentHeight", {
                        get: function() {
                            return this._cellHeight;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.updateColumnCount = function(a) {
                        this._columnCount = a;
                    }, a.prototype.updateViewport = function(b) {
                        this._viewport = b, this._cellWidth = this.computeColumnWidth(this._columnCount), 
                        this._cellHeight = a.DashboardRowHeight;
                    }, a.prototype.computeColumnWidth = function(a) {
                        var b = this._viewport.width;
                        return 250 >= b ? this.fitToColumnCount(3, a) : 510 >= b ? this.fitToColumnCount(4, a) : 770 >= b ? this.fitToColumnCount(7, a) : void 0;
                    }, a.prototype.fitToColumnCount = function(a, b) {
                        var c = Math.min(a, b);
                        return Math.floor(this._viewport.width / c);
                    }, a.DashboardCellPaddingLeft = 10, a.DashboardCellPaddingRight = 5, a.DashboardRowHeight = 19, 
                    a;
                }();
                c.SizeComputationManager = d;
                var e = function() {
                    function b(a, b, c) {
                        this._owner = a, this._grid = b, this._lastScrollOffset = null, this._isScrolling = !1, 
                        this._fixedSizeEnabled = !0, this._done = !1, this._realizationManager = c;
                    }
                    return Object.defineProperty(b.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b.prototype, "realizationManager", {
                        get: function() {
                            return this._realizationManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b.prototype, "fixedSizeEnabled", {
                        get: function() {
                            return this._fixedSizeEnabled;
                        },
                        set: function(a) {
                            this._fixedSizeEnabled = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.onCornerCellRealized = function(a, b, c) {
                        this._realizationManager.onCornerCellRealized(a, b);
                    }, b.prototype.onHeaderRealized = function(a, b, c) {
                        this._realizationManager.onHeaderRealized(a, b, c);
                    }, Object.defineProperty(b.prototype, "needsToRealize", {
                        get: function() {
                            return this._realizationManager.needsToRealize;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.getVisibleSizeRatio = function() {
                        return 1 - this.dimension.getFractionScrollOffset();
                    }, Object.defineProperty(b.prototype, "alignToEnd", {
                        get: function() {
                            return this._alignToEnd;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b.prototype, "done", {
                        get: function() {
                            return this._done;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype._requiresMeasure = function() {
                        return !0;
                    }, b.prototype.startScrollingSession = function() {
                        this._isScrolling = !0;
                    }, b.prototype.endScrollingSession = function() {
                        this._isScrolling = !1;
                    }, b.prototype.isScrolling = function() {
                        return this._isScrolling;
                    }, b.prototype.isResizing = function() {
                        return !1;
                    }, b.prototype.getOtherHierarchyContextualHeight = function() {
                        var a = this.dimension.otherDimension, b = a.getDepth(), c = 0, d = this._getRealizedItems();
                        if (d.length > 0) for (var e = 0; b > e; e++) c += d[e].getContextualWidth();
                        return c;
                    }, b.prototype._isAutoSized = function() {
                        return !1;
                    }, b.prototype.onStartRenderingSession = function() {
                        this._measureEnabled = this._requiresMeasure(), this._gridOffset = this.dimension.otherDimension.getDepth();
                    }, b.prototype.onEndRenderingSession = function() {
                        this._realizationManager.onEndRenderingSession(), this._alignToEnd = !1, this._done = !1, 
                        this._measureEnabled = !0, this._sendDimensionsToControl();
                    }, b.prototype._sendDimensionsToControl = function() {}, Object.defineProperty(b.prototype, "measureEnabled", {
                        get: function() {
                            return this._measureEnabled;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.getFooterContextualWidth = function() {
                        return 0;
                    }, b.prototype.onStartRenderingIteration = function(a, b) {
                        this._measureEnabled && !this._done && (this._contextualWidthToFill = (b - this.otherScrollbarContextualWidth) * this.getGridScale() - this.getFooterContextualWidth()), 
                        this._realizationManager.onStartRenderingIteration(), a ? this._lastScrollOffset = null : null !== this._lastScrollOffset && this.swapElements();
                    }, Object.defineProperty(b.prototype, "allItemsRealized", {
                        get: function() {
                            return this.getRealizedItemsCount() - this._gridOffset === this.dimension.getItemsCount() || 0 === this.dimension.getItemsCount();
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.onEndRenderingIteration = function() {
                        if (!this._done) {
                            if (!this._measureEnabled) return this._lastScrollOffset = this.dimension.scrollOffset, 
                            void (this._done = !0);
                            var c, d = this.getGridContextualWidth(), e = a.Double.greaterOrEqualWithPrecision(d, this._contextualWidthToFill, b._pixelPrecision), f = this.allItemsRealized;
                            c = e ? this.scrollForwardToAlignEnd(d) : this.scrollBackwardToFill(d), this._realizationManager.onEndRenderingIteration(d, e);
                            var g = this.dimension.scrollbar.visible;
                            this.updateScrollbar(d), this._done = (e || f) && this.dimension.scrollbar.visible === g && a.Double.equalWithPrecision(c, this.dimension.scrollOffset, b._scrollOffsetPrecision), 
                            this.dimension.scrollOffset = c, this._lastScrollOffset = this.dimension.scrollOffset;
                        }
                    }, b.prototype.getScrollDeltaWithinPage = function() {
                        if (null !== this._lastScrollOffset) {
                            var a = this.dimension.getIntegerScrollOffset() - Math.floor(this._lastScrollOffset);
                            if (Math.abs(a) < this.getRealizedItemsCount() - this.dimension.otherDimension.getDepth()) return a;
                        }
                        return null;
                    }, b.prototype.swapElements = function() {
                        var a = this.getScrollDeltaWithinPage();
                        if (null !== a) {
                            var b = this.dimension.otherDimension.getDepth();
                            Math.abs(a) < this.getRealizedItemsCount() - b && (a > 0 ? this._moveElementsToBottom(b, a) : 0 > a && this._moveElementsToTop(b, -a));
                        }
                    }, b.prototype._getRealizedItems = function() {
                        return null;
                    }, b.prototype.getRealizedItemsCount = function() {
                        return this._getRealizedItems().length;
                    }, b.prototype._moveElementsToBottom = function(a, b) {}, b.prototype._moveElementsToTop = function(a, b) {}, 
                    b.prototype.isScrollingWithinPage = function() {
                        return null !== this.getScrollDeltaWithinPage();
                    }, b.prototype.getGridContextualWidth = function() {
                        return 0;
                    }, b.prototype.updateScrollbar = function(a) {
                        var b = this.dimension.scrollbar;
                        b.viewMin = this.dimension.scrollOffset, b.min = 0, b.max = this.dimension.getItemsCount(), 
                        b.viewSize = this.getViewSize(a), this.dimension.scrollbar.show(this.canScroll(a));
                    }, b.prototype.getViewSize = function(c) {
                        var d = this.getRealizedItemsCount();
                        if (0 === d) return 0;
                        for (var e = this._gridOffset, f = 0, g = 0, h = this._contextualWidthToFill, i = h - this.getOtherHierarchyContextualHeight(), j = this.getMeaurementError(c), k = e; d > k; k++) {
                            var l;
                            l = k === e ? this.getVisibleSizeRatio() : 1;
                            var m = this.getItemContextualWidthWithScrolling(k) * j;
                            if (g += m, f += l, a.Double.greaterWithPrecision(g, i, b._pixelPrecision)) {
                                f -= (g - i) / m * l;
                                break;
                            }
                        }
                        return f;
                    }, b.prototype.isScrollableHeader = function(a, b, c) {
                        if (0 !== c || 0 === this.dimension.getFractionScrollOffset()) return !1;
                        var d = this.dimension._hierarchyNavigator;
                        if (d.isLeaf(a)) return !0;
                        var e = a, f = b;
                        do {
                            if (f = d.getChildren(e), e = this.dimension.getFirstVisibleItem(d.getLevel(e) + 1), 
                            void 0 === e) break;
                            if (!d.isLastItem(e, f)) return !1;
                        } while (!d.isLeaf(e));
                        return !0;
                    }, b.prototype.reachedEnd = function() {
                        return this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, b.prototype.scrollBackwardToFill = function(c) {
                        var d = this.dimension.scrollOffset;
                        if (this.reachedEnd()) {
                            var e = this._contextualWidthToFill - c;
                            if (this.dimension.getItemsCount() > 0) {
                                var f = c / (this.getRealizedItemsCount() - this.dimension.getFractionScrollOffset());
                                d = this.dimension.getValidScrollOffset(Math.floor(this.dimension.scrollOffset - e / f));
                            }
                            this._alignToEnd = !a.Double.equalWithPrecision(d, this.dimension.scrollOffset, b._scrollOffsetPrecision);
                        }
                        return d;
                    }, b.prototype.getItemContextualWidth = function(a) {
                        return this._getRealizedItems()[a].getContextualWidth();
                    }, b.prototype.getItemContextualWidthWithScrolling = function(a) {
                        return this.getSizeWithScrolling(this.getItemContextualWidth(a), a);
                    }, b.prototype.getSizeWithScrolling = function(a, b) {
                        var c;
                        return c = this._gridOffset === b ? this.getVisibleSizeRatio() : 1, a * c;
                    }, b.prototype.getGridContextualWidthFromItems = function() {
                        for (var a = this.getRealizedItemsCount(), b = 0, c = 0; a > c; c++) b += this.getItemContextualWidthWithScrolling(c);
                        return b;
                    }, b.prototype.getMeaurementError = function(a) {
                        return a / this.getGridContextualWidthFromItems();
                    }, b.prototype.scrollForwardToAlignEnd = function(c) {
                        var d = this.dimension.scrollOffset;
                        if (this._alignToEnd) {
                            var e = a.Double.equalWithPrecision(c, this._contextualWidthToFill, b._pixelPrecision);
                            if (!e) for (var f = this.getRealizedItemsCount(), g = this._gridOffset, h = c - this._contextualWidthToFill, i = this.getMeaurementError(c), j = g; f > j; j++) {
                                var k = this.getItemContextualWidth(j) * i;
                                if (!a.Double.lessWithPrecision(k, h, b._pixelPrecision)) {
                                    var l = g === j ? 1 - this.dimension.getFractionScrollOffset() : 1;
                                    d = this.dimension.getValidScrollOffset(this.dimension.scrollOffset + (j - g) + h * l / k);
                                    break;
                                }
                                h -= k;
                            }
                            this._alignToEnd = !e;
                        }
                        return d;
                    }, Object.defineProperty(b.prototype, "dimension", {
                        get: function() {
                            return null;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b.prototype, "otherLayoutManager", {
                        get: function() {
                            return this.dimension.otherDimension.layoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(b.prototype, "contextualWidthToFill", {
                        get: function() {
                            return this._contextualWidthToFill;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.getGridScale = function() {
                        return 0;
                    }, Object.defineProperty(b.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.getActualContextualWidth = function(a) {
                        return this._isAutoSized() && !this.canScroll(a) ? a : this._contextualWidthToFill;
                    }, b.prototype.canScroll = function(a) {
                        return !1;
                    }, b.prototype.calculateSizes = function() {
                        this.fixedSizeEnabled && (this.calculateContextualWidths(), this.calculateSpans());
                    }, b.prototype._calculateSize = function(a) {}, b.prototype.calculateContextualWidths = function() {
                        for (var a = this._getRealizedItems(), b = a.length, c = 0; b > c; c++) {
                            var d = a[c];
                            this.measureEnabled && d.setAligningContextualWidth(-1), this._calculateSize(d);
                        }
                    }, b.prototype.calculateSpans = function() {
                        this.measureEnabled && (this.updateNonScrollableItemsSpans(), this.updateScrollableItemsSpans());
                    }, b.prototype.updateNonScrollableItemsSpans = function() {
                        for (var a = this.otherLayoutManager._getRealizedItems(), b = a.length, c = this.dimension.getDepth(), d = c; b > d; d++) {
                            var e = a[d];
                            this.updateSpans(e, e.getHeaders());
                        }
                    }, b.prototype.updateScrollableItemsSpans = function() {
                        for (var a = this.otherLayoutManager._getRealizedItems(), b = Math.min(this.dimension.getDepth(), a.length), c = 0; b > c; c++) {
                            var d = a[c];
                            this.updateSpans(d, d.getOtherDimensionHeaders());
                        }
                    }, b.prototype.fixSizes = function() {
                        if (this.fixedSizeEnabled) for (var a = this._getRealizedItems(), b = a.length, c = 0; b > c; c++) a[c].fixSize();
                    }, b.prototype.updateSpans = function(a, b) {
                        for (var c = this._getRealizedItems(), d = b.length, e = 0; d > e; e++) {
                            var f = b[e], g = a.getOtherDimensionOwner(f), h = g.getCellContextualSpan(f);
                            if (h > 1) for (var i = 0, j = g.getIndex(this._grid), k = 0; h > k; k++) {
                                var l = c[k + j];
                                i += this.getSizeWithScrolling(l.getContentContextualWidth(), k + j), k === h - 1 && this.updateLastChildSize(f, l, i);
                            }
                        }
                    }, b.prototype.updateLastChildSize = function(a, b, c) {
                        var d = b.getCellIContentContextualWidth(a) - c;
                        d > 0 && b.setAligningContextualWidth(Math.max(b.getAligningContextualWidth(), d + b.getContentContextualWidth()));
                    }, b._pixelPrecision = 1.0001, b._scrollOffsetPrecision = .01, b;
                }();
                c.DimensionLayoutManager = e;
                var f = function() {
                    function a(a, b, c) {
                        this.column = a, this.item = a.getLeafItem(), this.itemType = a.itemType, this.startColumnWidth = b, 
                        this.resizingDelta = 0, this.animationFrame = null, this.scale = c;
                    }
                    return a;
                }();
                c.ResizeState = f;
                var g = function(a) {
                    function c(b, c, d) {
                        a.call(this, b, c, d), d.owner = this, this.fillProportionally = !1, this._resizeState = null;
                    }
                    return __extends(c, a), Object.defineProperty(c.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.columnDimension;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.isResizing = function() {
                        return null !== this._resizeState;
                    }, Object.defineProperty(c.prototype, "fillProportionally", {
                        get: function() {
                            return this._grid.fillColumnsProportionally;
                        },
                        set: function(a) {
                            this._grid.fillColumnsProportionally = a;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioX();
                    }, Object.defineProperty(c.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? b.HTMLElementUtils.getElementWidth(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype._getRealizedItems = function() {
                        return this._grid.realizedColumns;
                    }, c.prototype._moveElementsToBottom = function(a, b) {
                        this._grid.moveColumnsToEnd(a, b);
                    }, c.prototype._moveElementsToTop = function(a, b) {
                        this._grid.moveColumnsToStart(a, b);
                    }, c.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() || this.isScrolling() || this.isResizing();
                    }, c.prototype.getGridContextualWidth = function() {
                        return this._grid.getWidth();
                    }, c.prototype.getFirstVisibleColumn = function() {
                        return this._grid.realizedColumns[this._gridOffset];
                    }, c.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeWidth;
                    }, c.prototype.applyScrolling = function() {
                        var a = this.dimension.getFractionScrollOffset(), b = 0;
                        if (0 !== a) {
                            var c = this.getFirstVisibleColumn();
                            void 0 !== c && (b = c.getContextualWidth(), this.scroll(c, b, a));
                        }
                    }, c.prototype.scroll = function(a, b, c) {
                        this.scrollCells(a._realizedColumnHeaders, b, c), this.scrollBodyCells(this._grid.realizedRows, b, c), 
                        null !== a.footer && a.footer.scrollHorizontally(b, c);
                    }, c.prototype.scrollCells = function(a, b, c) {
                        for (var d = a.length, e = 0; d > e; e++) a[e].scrollHorizontally(b, c);
                    }, c.prototype.scrollBodyCells = function(a, b, c) {
                        for (var d, e, f = a.length, g = 0; f > g; g++) d = a[g]._realizedBodyCells, void 0 !== d && (e = d[0], 
                        void 0 !== e && e.scrollHorizontally(b, c));
                    }, c.prototype.onStartResize = function(a, c, d) {
                        this._resizeState = new f(a._column, a._column.getContentContextualWidth(), b.HTMLElementUtils.getAccumulatedScale(this.owner.owner.container));
                    }, c.prototype.onResize = function(a, b, d) {
                        var e = this;
                        this._resizeState.resizingDelta = Math.max(b / this._resizeState.scale, c.minColumnWidth - this._resizeState.startColumnWidth), 
                        null === this._resizeState.animationFrame && (this._resizeState.animationFrame = requestAnimationFrame(function() {
                            return e.performResizing();
                        }));
                    }, c.prototype.onEndResize = function(a) {
                        null !== this._resizeState.animationFrame && this.performResizing(), this._resizeState = null;
                    }, c.prototype.onReset = function(a) {
                        this._resizeState = new f(a._column, -1, 1), a._column.clearSize(), this.owner.owner.refresh(!1), 
                        this._resizeState = null;
                    }, c.prototype.updateItemToResizeState = function(a) {
                        if (null !== this._resizeState) for (var b = a.length, c = this.owner.owner.hierarchyNavigator, d = this.otherLayoutManager.dimension.getDepth(), e = d; b > e; e++) {
                            var f = a[e];
                            if (f.columnHeaderOrCornerEquals(this._resizeState.itemType, this._resizeState.item, f.itemType, f.getLeafItem(), c) && f !== this._resizeState.column) {
                                this._resizeState.column = f, f.resize(this._resizeState.startColumnWidth + this._resizeState.resizingDelta);
                                break;
                            }
                        }
                    }, c.prototype.performResizing = function() {
                        if (null !== this._resizeState) {
                            this._resizeState.animationFrame = null;
                            var a = this._resizeState.startColumnWidth + this._resizeState.resizingDelta;
                            this._resizeState.column.resize(a), this.owner.owner.refresh(!1);
                        }
                    }, c.prototype._sendDimensionsToControl = function() {
                        var a = this.getGridContextualWidth(), b = this.getActualContextualWidth(a), c = this.getOtherHierarchyContextualHeight(), d = this.getGridScale();
                        this.owner.owner.updateColumnDimensions(c / d, (b - c) / d, this.getViewSize(a));
                    }, c.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return -1;
                    }, c.prototype.getEstimatedBodyCellWidth = function(a) {
                        return -1;
                    }, c.minColumnWidth = 10, c;
                }(e);
                c.ColumnLayoutManager = g;
                var h = function(a) {
                    function b() {
                        a.apply(this, arguments);
                    }
                    return __extends(b, a), b.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return this.ignoreColumn(b) ? 0 : this.owner.getCellWidth(void 0);
                    }, b.prototype.getEstimatedBodyCellWidth = function(a) {
                        return this.owner.getCellWidth(void 0);
                    }, b.prototype.canScroll = function(a) {
                        return !1;
                    }, b.prototype._calculateSize = function(a) {
                        var b = a.getIndex(this._grid), c = 0;
                        this.ignoreColumn(b) || (c = this.owner.getContentWidth(void 0)), a.resize(c);
                    }, b.prototype.ignoreColumn = function(a) {
                        return 0 === a && !this.owner.binder.hasRowGroups();
                    }, b;
                }(g);
                c.DashboardColumnLayoutManager = h;
                var i = function(b) {
                    function c() {
                        b.apply(this, arguments);
                    }
                    return __extends(c, b), c.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return this.owner.getEstimatedTextWidth(a);
                    }, c.prototype.getEstimatedBodyCellWidth = function(a) {
                        return this.owner.getEstimatedTextWidth(a);
                    }, c.prototype.canScroll = function(b) {
                        return !a.Double.equalWithPrecision(this.dimension.scrollOffset, 0, e._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || a.Double.greaterWithPrecision(b, this._contextualWidthToFill, e._pixelPrecision);
                    }, c.prototype._calculateSize = function(a) {
                        a.calculateSize();
                    }, c;
                }(g);
                c.CanvasColumnLayoutManager = i;
                var j = function(a) {
                    function c(b, c, d) {
                        a.call(this, b, c, d), d.owner = this;
                    }
                    return __extends(c, a), Object.defineProperty(c.prototype, "dimension", {
                        get: function() {
                            return this.owner.owner.rowDimension;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.getGridScale = function() {
                        return this._grid._presenter.getScreenToCssRatioY();
                    }, Object.defineProperty(c.prototype, "otherScrollbarContextualWidth", {
                        get: function() {
                            return this.dimension.otherDimension.scrollbar.visible ? b.HTMLElementUtils.getElementHeight(this.dimension.otherDimension.scrollbar.element) : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), c.prototype.startScrollingSession = function() {
                        a.prototype.startScrollingSession.call(this);
                    }, c.prototype._getRealizedItems = function() {
                        return this._grid.realizedRows;
                    }, c.prototype._moveElementsToBottom = function(a, b) {
                        this._grid.moveRowsToEnd(a, b);
                    }, c.prototype._moveElementsToTop = function(a, b) {
                        this._grid.moveRowsToStart(a, b);
                    }, c.prototype._requiresMeasure = function() {
                        return !this.isScrolling() && !this.otherLayoutManager.isScrolling() && !this.otherLayoutManager.isResizing() || this.isScrolling() && this.dimension.getIntegerScrollOffset() + (this.getRealizedItemsCount() - this._gridOffset) >= this.dimension.getItemsCount();
                    }, c.prototype.getGridContextualWidth = function() {
                        return this._grid.getHeight();
                    }, c.prototype.getFirstVisibleRow = function() {
                        return this._grid.realizedRows[this._gridOffset];
                    }, c.prototype._isAutoSized = function() {
                        return this.owner.owner.autoSizeHeight;
                    }, c.prototype.applyScrolling = function() {
                        var a = this.dimension.getFractionScrollOffset(), b = 0;
                        if (0 !== a) {
                            var c = this.getFirstVisibleRow();
                            c && (b = c.getContextualWidth(), this.scroll(c, b, a));
                        }
                    }, c.prototype.scroll = function(a, b, c) {
                        this.scrollCells(a._realizedRowHeaders, b, c), this.scrollCells(a._realizedBodyCells, b, c);
                    }, c.prototype.scrollCells = function(a, b, c) {
                        for (var d = a.length, e = 0; d > e; e++) a[e].scrollVertically(b, c);
                    }, c.prototype.getFooterContextualWidth = function() {
                        return this.owner.owner.rowDimension.hasFooter() && this.owner.grid.footerRow ? this.owner.grid.footerRow.getContextualWidth() : 0;
                    }, c.prototype.calculateContextualWidths = function() {
                        if (a.prototype.calculateContextualWidths.call(this), this.fixedSizeEnabled) {
                            var b = this._grid.footerRow;
                            b && this._calculateSize(b);
                        }
                    }, c.prototype.fixSizes = function() {
                        a.prototype.fixSizes.call(this), this.fixedSizeEnabled && this._grid.footerRow && this._grid.footerRow.fixSize();
                    }, c.prototype._sendDimensionsToControl = function() {
                        var a = this.getGridContextualWidth(), b = this.getActualContextualWidth(a), c = this.getOtherHierarchyContextualHeight(), d = this.getGridScale();
                        this.owner.owner.updateRowDimensions(c / d, (b - c) / d, a / d, this.getViewSize(a), this._grid.footerRow ? this._grid.footerRow.getContextualWidth() / d : 0);
                    }, c.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return -1;
                    }, c;
                }(e);
                c.RowLayoutManager = j;
                var k = function(a) {
                    function b() {
                        a.apply(this, arguments);
                    }
                    return __extends(b, a), b.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return this.getHeaderWidth(b);
                    }, b.prototype.canScroll = function(a) {
                        return !1;
                    }, b.prototype._calculateSize = function(a) {
                        var b = this.owner.getEstimatedRowHeight();
                        a.resize(b);
                    }, b.prototype.getHeaderWidth = function(a) {
                        return 0 !== a || this.owner.binder.hasRowGroups() ? this.owner.getEstimatedTextWidth(void 0) : 0;
                    }, b;
                }(j);
                c.DashboardRowLayoutManager = k;
                var l = function(b) {
                    function c() {
                        b.apply(this, arguments);
                    }
                    return __extends(c, b), c.prototype.getEstimatedHeaderWidth = function(a, b) {
                        return this.owner.getEstimatedTextWidth(a);
                    }, c.prototype.canScroll = function(b) {
                        return !a.Double.equalWithPrecision(this.dimension.scrollOffset, 0, e._scrollOffsetPrecision) || this.getRealizedItemsCount() - this._gridOffset < this.dimension.getItemsCount() && this._contextualWidthToFill > 0 || a.Double.greaterWithPrecision(b, this._contextualWidthToFill, e._pixelPrecision);
                    }, c.prototype._calculateSize = function(a) {
                        a.calculateSize();
                    }, c;
                }(j);
                c.CanvasRowLayoutManager = l;
                var m = function() {
                    function a(a, b, c, d) {
                        this._allowHeaderResize = !0, this._binder = a, this._grid = b, this._columnLayoutManager = c, 
                        this._rowLayoutManager = d;
                    }
                    return a.prototype.initialize = function(a) {
                        this._owner = a, this._container = a.container, this._gridHost = a.contentHost, 
                        this._footersHost = a.footerHost, this._grid.initialize(a, this._gridHost, this._footersHost);
                    }, Object.defineProperty(a.prototype, "owner", {
                        get: function() {
                            return this._owner;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "binder", {
                        get: function() {
                            return this._binder;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.getTablixClassName = function() {
                        return null;
                    }, a.prototype.getLayoutKind = function() {
                        return null;
                    }, a.prototype.getOrCreateColumnHeader = function(a, b, c, d) {
                        var e = this._grid.getOrCreateRow(c), f = this._grid.getOrCreateColumn(d + this._columnLayoutManager._gridOffset), g = this.owner.hierarchyNavigator.isLeaf(a), h = e.getOrCreateColumnHeader(f, this._columnLayoutManager.isScrollableHeader(a, b, d), g);
                        return this.enableCellHorizontalResize(g, h), h;
                    }, a.prototype.getOrCreateRowHeader = function(a, b, c, d) {
                        var e = this._grid.getOrCreateRow(c + this._rowLayoutManager._gridOffset), f = this._grid.getOrCreateColumn(d), g = this._rowLayoutManager.isScrollableHeader(a, b, c);
                        0 === e.getRealizedCellCount() && this.alignRowHeaderCells(a, e);
                        var h = e.getOrCreateRowHeader(f, g, this.owner.hierarchyNavigator.isLeaf(a));
                        return h.enableHorizontalResize(!1, this._columnLayoutManager), h;
                    }, a.prototype.getOrCreateCornerCell = function(a, b, c) {
                        var d = this._grid.getOrCreateRow(c), e = this._grid.getOrCreateColumn(b), f = d.getOrCreateCornerCell(e), g = this._columnLayoutManager.dimension.getDepth(), h = c === g - 1;
                        return this.enableCellHorizontalResize(h, f), f;
                    }, a.prototype.getOrCreateBodyCell = function(a, b, c, d, e) {
                        var f, g = this._grid.getOrCreateRow(d + this._rowLayoutManager._gridOffset), h = this._grid.getOrCreateColumn(e + this._columnLayoutManager._gridOffset);
                        f = 0 === g._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset() ? !0 : this._rowLayoutManager.isScrollableHeader(b, c, d);
                        var i = g.getOrCreateBodyCell(h, f);
                        return i.enableHorizontalResize(!1, this._columnLayoutManager), i;
                    }, a.prototype.getOrCreateFooterBodyCell = function(a, b) {
                        var c, d = this._grid.getOrCreateFootersRow(), e = this._grid.getOrCreateColumn(b + this._columnLayoutManager._gridOffset);
                        c = 0 === d._realizedBodyCells.length && 0 !== this._owner.columnDimension.getFractionScrollOffset();
                        var f = d.getOrCreateFooterBodyCell(e, c);
                        return f.enableHorizontalResize(!1, this._columnLayoutManager), f;
                    }, a.prototype.getOrCreateFooterRowHeader = function(a, b) {
                        var c = this._grid.getOrCreateFootersRow(), d = this._grid.getOrCreateColumn(0), e = c.getOrCreateFooterRowHeader(d);
                        return e.enableHorizontalResize(!1, this._columnLayoutManager), e;
                    }, a.prototype.getVisibleWidth = function() {
                        return -1;
                    }, a.prototype.getVisibleHeight = function() {
                        return -1;
                    }, a.prototype.updateColumnCount = function(a, b) {}, a.prototype.updateViewport = function(a) {}, 
                    a.prototype.getEstimatedRowHeight = function() {
                        return -1;
                    }, a.prototype.getCellWidth = function(a) {
                        return -1;
                    }, a.prototype.getContentWidth = function(a) {
                        return -1;
                    }, a.prototype.alignRowHeaderCells = function(a, b) {
                        var c = b.getRowHeaderLeafIndex();
                        if (-1 !== c) {
                            var d = this._owner.rowDimension, e = d.getFirstVisibleChildLeaf(a);
                            this.owner.hierarchyNavigator.headerItemEquals(e, b.getAllocatedCellAt(c).item) && b.moveCellsBy(this.owner.hierarchyNavigator.getLevel(e) - this.owner.hierarchyNavigator.getLevel(a) - c);
                        }
                    }, Object.defineProperty(a.prototype, "grid", {
                        get: function() {
                            return this._grid;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "rowLayoutManager", {
                        get: function() {
                            return this._rowLayoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "columnLayoutManager", {
                        get: function() {
                            return this._columnLayoutManager;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, a.prototype.onStartRenderingSession = function(a, b) {
                        if (this.showEmptySpaceHeader()) {
                            var c = this._grid.emptySpaceHeaderCell;
                            c && this._binder.unbindEmptySpaceHeaderCell(c), c = this._grid.emptySpaceFooterCell, 
                            c && this._binder.unbindEmptySpaceFooterCell(c), this._grid.HideEmptySpaceCells();
                        }
                        this._scrollingDimension = a, this._scrollingDimension && this._scrollingDimension.layoutManager.startScrollingSession(), 
                        this._grid.onStartRenderingSession(), this._rowLayoutManager.onStartRenderingSession(), 
                        this._columnLayoutManager.onStartRenderingSession();
                        var d = this._columnLayoutManager.measureEnabled || this._rowLayoutManager.measureEnabled;
                        d && this.measureSampleText(b);
                    }, a.prototype.onEndRenderingSession = function() {
                        if (this._rowLayoutManager.onEndRenderingSession(), this._columnLayoutManager.onEndRenderingSession(), 
                        this._scrollingDimension && this._scrollingDimension.layoutManager.endScrollingSession(), 
                        this._scrollingDimension = null, this.showEmptySpaceHeader()) {
                            var a = this._columnLayoutManager.contextualWidthToFill - this._columnLayoutManager.getGridContextualWidth();
                            if (a > 0) {
                                this._grid.ShowEmptySpaceCells(this._owner.columnDimension.getDepth(), a);
                                var b = this._grid.emptySpaceHeaderCell;
                                b && this._binder.bindEmptySpaceHeaderCell(b), b = this._grid.emptySpaceFooterCell, 
                                b && this._binder.bindEmptySpaceFooterCell(b);
                            }
                        }
                        this._grid.onEndRenderingSession();
                    }, a.prototype.onStartRenderingIteration = function(a) {
                        this._rowLayoutManager.onStartRenderingIteration(a, this.getVisibleHeight()), this._columnLayoutManager.onStartRenderingIteration(a, this.getVisibleWidth()), 
                        this._grid.onStartRenderingIteration(a);
                    }, a.prototype.onEndRenderingIteration = function() {
                        return this._grid.onEndRenderingIteration(), this._columnLayoutManager.calculateSizes(), 
                        this._rowLayoutManager.calculateSizes(), this._columnLayoutManager.fixSizes(), this._rowLayoutManager.fixSizes(), 
                        this._columnLayoutManager.updateItemToResizeState(this._grid.realizedColumns), this._columnLayoutManager.applyScrolling(), 
                        this._rowLayoutManager.applyScrolling(), this._columnLayoutManager.onEndRenderingIteration(), 
                        this._rowLayoutManager.onEndRenderingIteration(), this._columnLayoutManager.done && this._rowLayoutManager.done;
                    }, a.prototype.onCornerCellRealized = function(a, b) {
                        var c = this.owner.hierarchyNavigator.isColumnHierarchyLeaf(a), d = this.owner.hierarchyNavigator.isRowHierarchyLeaf(a);
                        c && b._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onCornerCellRealized(a, b, c), 
                        this._rowLayoutManager.onCornerCellRealized(a, b, d);
                    }, a.prototype.onRowHeaderRealized = function(a, b) {
                        var c = this._owner.hierarchyNavigator, d = c.isLeaf(a);
                        this._rowLayoutManager.onHeaderRealized(a, b, d);
                    }, a.prototype.onRowHeaderFooterRealized = function(a, b) {}, a.prototype.onColumnHeaderRealized = function(a, b) {
                        var c = this._owner.hierarchyNavigator, d = c.isLeaf(a);
                        d && b._column.OnLeafRealized(this._owner.hierarchyNavigator), this._columnLayoutManager.onHeaderRealized(a, b, d);
                    }, a.prototype.onBodyCellRealized = function(a, b) {}, a.prototype.onBodyCellFooterRealized = function(a, b) {}, 
                    a.prototype.setAllowHeaderResize = function(a) {
                        this._allowHeaderResize = a;
                    }, a.prototype.enableCellHorizontalResize = function(a, b) {
                        var c = a && this._allowHeaderResize;
                        b.enableHorizontalResize(c, this._columnLayoutManager);
                    }, a.prototype.getEstimatedTextWidth = function(a) {
                        return -1;
                    }, a.prototype.measureSampleText = function(a) {}, a;
                }();
                c.TablixLayoutManager = m;
                var n = function(a) {
                    function b(b, c, d, e, f) {
                        a.call(this, b, d, new h(this, d, f), new k(this, d, e)), this._sizeComputationManager = c;
                    }
                    return __extends(b, a), b.createLayoutManager = function(a) {
                        var e = new d();
                        return new b(a, e, new c.TablixGrid(new c.DashboardTablixGridPresenter(e)), new c.RowRealizationManager(a), new c.ColumnRealizationManager(a));
                    }, b.prototype.getTablixClassName = function() {
                        return "bi-dashboard-tablix";
                    }, b.prototype.getLayoutKind = function() {
                        return 1;
                    }, b.prototype.showEmptySpaceHeader = function() {
                        return !1;
                    }, b.prototype.measureSampleText = function(a) {}, b.prototype.getVisibleWidth = function() {
                        return this._sizeComputationManager.visibleWidth;
                    }, b.prototype.getVisibleHeight = function() {
                        return this._sizeComputationManager.visibleHeight;
                    }, b.prototype.getCellWidth = function(a) {
                        return this._sizeComputationManager.cellWidth;
                    }, b.prototype.getContentWidth = function(a) {
                        return this._sizeComputationManager.contentWidth;
                    }, b.prototype.getEstimatedTextWidth = function(a) {
                        return this._sizeComputationManager.contentWidth;
                    }, b.prototype.updateColumnCount = function(a, b) {
                        var c = a ? a.getDepth() : 0, d = b ? b.getItemsCount() : 0, e = c + d;
                        this.binder.hasRowGroups() || e--, this._sizeComputationManager.updateColumnCount(e);
                    }, b.prototype.updateViewport = function(a) {
                        this._sizeComputationManager.updateViewport(a);
                    }, b.prototype.getEstimatedRowHeight = function() {
                        return this._sizeComputationManager.cellHeight;
                    }, b;
                }(m);
                c.DashboardTablixLayoutManager = n;
                var o = function(a) {
                    function d(b, c, d, e) {
                        a.call(this, b, c, new i(this, c, e), new l(this, c, d));
                    }
                    return __extends(d, a), d.createLayoutManager = function(a) {
                        return new d(a, new c.TablixGrid(new b.internal.CanvasTablixGridPresenter()), new c.RowRealizationManager(a), new c.ColumnRealizationManager(a));
                    }, d.prototype.getTablixClassName = function() {
                        return "bi-tablix";
                    }, d.prototype.getLayoutKind = function() {
                        return 0;
                    }, d.prototype.measureSampleText = function(a) {
                        var c = b.internal.TablixUtils.createDiv();
                        c.style.cssFloat = "left", a.appendChild(c);
                        var d = document.createTextNode("a");
                        c.appendChild(d), this.characterWidth = b.HTMLElementUtils.getElementWidth(c), this.characterHeight = b.HTMLElementUtils.getElementHeight(c), 
                        c.removeChild(d), a.removeChild(c);
                    }, d.prototype.showEmptySpaceHeader = function() {
                        return !this._columnLayoutManager.fillProportionally;
                    }, d.prototype.getVisibleWidth = function() {
                        return this._columnLayoutManager.measureEnabled ? this._owner.autoSizeWidth && this._owner.maxWidth ? this._owner.maxWidth : b.HTMLElementUtils.getElementWidth(this._container) : -1;
                    }, d.prototype.getVisibleHeight = function() {
                        return this._rowLayoutManager.measureEnabled ? this._owner.autoSizeHeight && this._owner.maxHeight ? this._owner.maxHeight : b.HTMLElementUtils.getElementHeight(this._container) : -1;
                    }, d.prototype.getCellWidth = function(a) {
                        return b.HTMLElementUtils.getElementWidth(a._presenter.tableCell);
                    }, d.prototype.getContentWidth = function(a) {
                        return b.HTMLElementUtils.getElementWidth(a._presenter.contentElement);
                    }, d.prototype.getEstimatedTextWidth = function(a) {
                        return a ? a.length * this.characterWidth : 0;
                    }, d.prototype.updateColumnCount = function(a, b) {}, d.prototype.updateViewport = function(a) {}, 
                    d.prototype.getEstimatedRowHeight = function() {
                        return this.characterHeight;
                    }, d;
                }(m);
                c.CanvasTablixLayoutManager = o;
            }(c = b.internal || (b.internal = {}));
        }(c = b.controls || (b.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(a) {
                function b(a) {
                    if (a) for (;a.hasChildNodes(); ) a.removeChild(a.firstChild);
                }
                function c(a, b) {
                    a.style.top = b + "px";
                }
                function d(a, b) {
                    a.style.left = b + "px";
                }
                function e(b, c) {
                    a.isAutoSize(c) ? b.style.height = "auto" : b.style.height = c + "px";
                }
                function f(b, c) {
                    a.isAutoSize(c) ? b.style.width = "auto" : b.style.width = c + "px";
                }
                function g(a) {
                    return a.offsetWidth;
                }
                function h(a) {
                    return a.offsetHeight;
                }
                function i(a) {
                    return -1 === a;
                }
                function j(b) {
                    for (var c = 1; b; ) c *= a.getScale(b), b = b.parentElement;
                    return c;
                }
                function k(a) {
                    a = $(a);
                    var b = a.css("-webkit-transform") || a.css("-moz-transform") || a.css("-ms-transform") || a.css("-o-transform") || a.css("transform");
                    return b && (b.match(/\d*\.\d*/) && Number(b.match(/\d*\.\d*/)[0]) || b.match(/\d+/) && Number(b.match(/\d+/)[0])) || 1;
                }
                a.clearChildren = b, a.setElementTop = c, a.setElementLeft = d, a.setElementHeight = e, 
                a.setElementWidth = f, a.getElementWidth = g, a.getElementHeight = h, a.isAutoSize = i, 
                a.getAccumulatedScale = j, a.getScale = k;
            }(b = a.HTMLElementUtils || (a.HTMLElementUtils = {}));
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(a) {
                var b;
                !function(a) {
                    function b() {
                        return document.createElement("table");
                    }
                    function c() {
                        var a = document.createElement("div"), b = a.style;
                        return b.whiteSpace = "nowrap", b.overflow = "hidden", b.lineHeight = "normal", 
                        a;
                    }
                    function d(a, b) {
                        var c = b.extension.contentHost, d = null;
                        0 === c.childElementCount ? (d = document.createElement("a"), c.appendChild(d)) : d = c.children[0], 
                        d.href = a, d.target = "_blank", d.title = a, d.innerText = a;
                    }
                    a.createTable = b, a.createDiv = c, a.appendATagToBodyCell = d;
                }(b = a.TablixUtils || (a.TablixUtils = {}));
            }(b = a.internal || (a.internal = {}));
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            !function(a) {
                a[a.CornerCell = 0] = "CornerCell", a[a.RowHeader = 1] = "RowHeader", a[a.ColumnHeader = 2] = "ColumnHeader", 
                a[a.BodyCell = 3] = "BodyCell";
            }(a.TablixCellType || (a.TablixCellType = {}));
            a.TablixCellType;
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            !function(a) {
                a[a.Canvas = 0] = "Canvas", a[a.DashboardTile = 1] = "DashboardTile";
            }(a.TablixLayoutKind || (a.TablixLayoutKind = {}));
            var b = (a.TablixLayoutKind, function() {
                function b(b, c, d, e, f) {
                    var g = this;
                    this._scrollbarWidth = 9, this._fixSizedClassName = "bi-tablix-fixed-size", this._options = f;
                    var h = f.interactive;
                    this._isTouchEnabled = h && f.enableTouchSupport, this._mainDiv = a.internal.TablixUtils.createDiv();
                    var i = this._mainDiv.style;
                    i.position = "absolute", i.left = "0px", i.top = "0px", this._footerDiv = a.internal.TablixUtils.createDiv();
                    var j = this._footerDiv.style;
                    j.position = "absolute", j.left = "0px", this._isTouchEnabled && this.InitializeTouchSupport(), 
                    this._gridDimensions = {}, this._container = a.internal.TablixUtils.createDiv(), 
                    this.className = c.getTablixClassName(), this.autoSizeWidth = !1, this.autoSizeHeight = !1, 
                    e.appendChild(this._container), this._container.addEventListener("mousewheel", function(a) {
                        g.onMouseWheel(a);
                    }), this._container.addEventListener("DOMMouseScroll", function(a) {
                        g.onFireFoxMouseWheel(a);
                    }), this._container.appendChild(this._mainDiv), this._container.appendChild(this._footerDiv), 
                    this._isTouchEnabled && (this._touchInterpreter.initTouch(this._mainDiv, null, !1), 
                    this._footerTouchInterpreter.initTouch(this._footerDiv, this._mainDiv, !1)), this._layoutManager = c, 
                    this._layoutManager.initialize(this), this._hierarchyNavigator = b, this._binder = d, 
                    this._columnDimension = new a.TablixColumnDimension(this), this._rowDimension = new a.TablixRowDimension(this), 
                    this._columnDimension._otherDimension = this.rowDimension, this._rowDimension._otherDimension = this.columnDimension, 
                    this.InitializeScrollbars(), h || (this.scrollbarWidth = 0), this.updateHorizontalPosition(), 
                    this.updateVerticalPosition(), this.updateFooterVisibility(), this._lastRenderingArgs = {};
                }
                return b.prototype.InitializeTouchSupport = function() {
                    this._touchManager = new a.TouchUtils.TouchManager(), this._touchInterpreter = new a.TouchUtils.TouchEventInterpreter(this._touchManager), 
                    this._footerTouchInterpreter = new a.TouchUtils.TouchEventInterpreter(this._touchManager), 
                    this._columnTouchDelegate = new a.ColumnTouchDelegate(new a.TouchUtils.Rectangle()), 
                    this._rowTouchDelegate = new a.RowTouchDelegate(new a.TouchUtils.Rectangle()), this._bodyTouchDelegate = new a.BodyTouchDelegate(new a.TouchUtils.Rectangle()), 
                    this._footerTouchDelegate = new a.ColumnTouchDelegate(new a.TouchUtils.Rectangle()), 
                    this._columnTouchDelegate.setHandler(this, this.onTouchEvent), this._rowTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this._bodyTouchDelegate.setHandler(this, this.onTouchEvent), this._footerTouchDelegate.setHandler(this, this.onTouchEvent), 
                    this._touchManager.addTouchRegion(this._columnTouchDelegate.dimension, this._columnTouchDelegate, this._columnTouchDelegate), 
                    this._touchManager.addTouchRegion(this._rowTouchDelegate.dimension, this._rowTouchDelegate, this._rowTouchDelegate), 
                    this._touchManager.addTouchRegion(this._bodyTouchDelegate.dimension, this._bodyTouchDelegate, this._bodyTouchDelegate), 
                    this._touchManager.addTouchRegion(this._footerTouchDelegate.dimension, this._footerTouchDelegate, this._footerTouchDelegate);
                }, b.prototype.InitializeScrollbars = function() {
                    this._rowDimension._initializeScrollbar(this._container, null);
                    var a = this._rowDimension.scrollbar.element.style;
                    a.position = "absolute", a.top = "0" + b.UnitOfMeasurement, a.right = "0" + b.UnitOfMeasurement, 
                    this._rowDimension.scrollbar.width = this._scrollbarWidth + b.UnitOfMeasurement, 
                    this._rowDimension.scrollbar.show(!1), this._columnDimension._initializeScrollbar(this._container, null);
                    var c = this._columnDimension.scrollbar.element.style;
                    c.position = "absolute", c.left = "0" + b.UnitOfMeasurement, c.bottom = "0" + b.UnitOfMeasurement, 
                    this._columnDimension.scrollbar.height = this._scrollbarWidth + b.UnitOfMeasurement, 
                    this._columnDimension.scrollbar.show(!1);
                }, Object.defineProperty(b.prototype, "container", {
                    get: function() {
                        return this._container;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "contentHost", {
                    get: function() {
                        return this._mainDiv;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "footerHost", {
                    get: function() {
                        return this._footerDiv;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "className", {
                    set: function(a) {
                        this._container.className = a;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "hierarchyNavigator", {
                    get: function() {
                        return this._hierarchyNavigator;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "binder", {
                    get: function() {
                        return this._binder;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "autoSizeWidth", {
                    get: function() {
                        return this._autoSizeWidth;
                    },
                    set: function(a) {
                        this._autoSizeWidth = a, this._autoSizeWidth ? this.removeFixSizedClassName() : (this.addFixedSizeClassNameIfNeeded(), 
                        this._container.style.minWidth = this._container.style.maxWidth = "none");
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "autoSizeHeight", {
                    get: function() {
                        return this._autoSizeHeight;
                    },
                    set: function(a) {
                        this._autoSizeHeight = a, this._autoSizeHeight ? this.removeFixSizedClassName() : (this.addFixedSizeClassNameIfNeeded(), 
                        this._container.style.minHeight = this._container.style.maxHeight = "none");
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "maxWidth", {
                    get: function() {
                        return this._maxWidth;
                    },
                    set: function(a) {
                        this._maxWidth = a, this._container.style.maxWidth = this._maxWidth + b.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "viewport", {
                    get: function() {
                        return this._viewport;
                    },
                    set: function(a) {
                        this._viewport = a, this._container.style.width = this._viewport.width + b.UnitOfMeasurement, 
                        this._container.style.height = this._viewport.height + b.UnitOfMeasurement, this._rowDimension.scrollbar.invalidateArrange(), 
                        this._columnDimension.scrollbar.invalidateArrange(), this._layoutManager.updateViewport(this._viewport);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "maxHeight", {
                    get: function() {
                        return this._maxHeight;
                    },
                    set: function(a) {
                        this._maxHeight = a, this._container.style.maxHeight = this._maxHeight + b.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "minWidth", {
                    get: function() {
                        return this._minWidth;
                    },
                    set: function(a) {
                        this._minWidth = a, this._container.style.minWidth = this._minWidth + b.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "minHeight", {
                    get: function() {
                        return this._minHeight;
                    },
                    set: function(a) {
                        this._minHeight = a, this._container.style.minHeight = this._minHeight + b.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "scrollbarWidth", {
                    set: function(a) {
                        this._scrollbarWidth = a, this._rowDimension.scrollbar.width = this._scrollbarWidth + b.UnitOfMeasurement, 
                        this._columnDimension.scrollbar.height = this._scrollbarWidth + b.UnitOfMeasurement;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.updateModels = function(a, b, c) {
                    b && (this._rowDimension.model = b, a && (this._rowDimension.scrollOffset = 0)), 
                    c && (this._columnDimension.model = c, a && (this._columnDimension.scrollOffset = 0)), 
                    this.layoutManager.updateColumnCount(this._rowDimension, this._columnDimension);
                }, b.prototype.updateColumnDimensions = function(a, b, c) {
                    var d = this._gridDimensions;
                    d.columnCount = c, d.rowHierarchyWidth = a, d.columnHierarchyWidth = b;
                }, b.prototype.updateRowDimensions = function(a, b, c, d, e) {
                    var f = this._gridDimensions;
                    f.rowCount = d, f.rowHierarchyHeight = b, f.rowHierarchyContentHeight = c, f.columnHierarchyHeight = a, 
                    f.footerHeight = e;
                }, b.prototype.updateTouchDimensions = function() {
                    var a = this._gridDimensions;
                    this._columnTouchDelegate.resize(a.rowHierarchyWidth, 0, a.columnHierarchyWidth, a.columnHierarchyHeight), 
                    this._columnTouchDelegate.setScrollDensity(a.columnCount / a.columnHierarchyWidth), 
                    this._rowTouchDelegate.resize(0, a.columnHierarchyHeight, a.rowHierarchyWidth, a.rowHierarchyHeight), 
                    this._rowTouchDelegate.setScrollDensity(a.rowCount / a.rowHierarchyHeight), this._bodyTouchDelegate.resize(a.rowHierarchyWidth, a.columnHierarchyHeight, a.columnHierarchyWidth, a.rowHierarchyHeight), 
                    this._bodyTouchDelegate.setScrollDensity(a.columnCount / a.columnHierarchyWidth, a.rowCount / a.rowHierarchyHeight), 
                    this._footerTouchDelegate.resize(a.rowHierarchyWidth, a.columnHierarchyHeight + a.rowHierarchyHeight, a.columnHierarchyWidth, a.footerHeight), 
                    this._footerTouchDelegate.setScrollDensity(a.columnCount / a.columnHierarchyWidth);
                }, b.prototype.onMouseWheel = function(a) {
                    a.wheelDelta && this.mouseWheel(a.wheelDelta);
                }, b.prototype.onFireFoxMouseWheel = function(a) {
                    a.detail && this.mouseWheel(-a.detail);
                }, b.prototype.mouseWheel = function(a) {
                    0 > a ? a = Math.min(-b.MouseWheelRange, a) : a > 0 && (a = Math.max(b.MouseWheelRange, a));
                    var c = null;
                    this._rowDimension.scrollbar.visible ? c = this._rowDimension : this._columnDimension.scrollbar.visible && (c = this._columnDimension), 
                    c && (c.scrollOffset -= a / b.MouseWheelRange * c.scrollbar.smallIncrement, c.scrollOffset = Math.max(c.scrollOffset, 0), 
                    c.scrollbar.viewMin = c.scrollOffset, this._onScrollAsync(c));
                }, Object.defineProperty(b.prototype, "layoutManager", {
                    get: function() {
                        return this._layoutManager;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "columnDimension", {
                    get: function() {
                        return this._columnDimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(b.prototype, "rowDimension", {
                    get: function() {
                        return this._rowDimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.refresh = function(a) {
                    this.render(a, null);
                }, b.prototype._onScrollAsync = function(a) {
                    var b = this;
                    requestAnimationFrame(function() {
                        b.performPendingScroll(a);
                    });
                }, b.prototype.performPendingScroll = function(a) {
                    this.render(!1, a);
                }, b.prototype.updateHorizontalPosition = function() {
                    this._rowDimension.scrollbar.visible ? (this._columnDimension.scrollbar.element.style.right = this._scrollbarWidth + b.UnitOfMeasurement, 
                    this._footerDiv.style.right = this._scrollbarWidth + b.UnitOfMeasurement, this._mainDiv.style.right = this._scrollbarWidth + b.UnitOfMeasurement) : (this._columnDimension.scrollbar.element.style.right = "0" + b.UnitOfMeasurement, 
                    this._mainDiv.style.right = "0" + b.UnitOfMeasurement, this._footerDiv.style.right = "0" + b.UnitOfMeasurement);
                }, b.prototype.updateFooterVisibility = function() {
                    (this._rowDimension.hasFooter() ? "block" !== this._footerDiv.style.display : "none" !== this._footerDiv.style.display) && (this._rowDimension.hasFooter() ? this._footerDiv.style.display = "block" : this._footerDiv.style.display = "none");
                }, b.prototype.updateVerticalPosition = function() {
                    var a = 0;
                    this._rowDimension.hasFooter() && (a = this._gridDimensions.footerHeight), this._footerDiv.style.height = a + b.UnitOfMeasurement;
                    var c = this._rowDimension.scrollbar.visible, d = 1 === this._layoutManager.getLayoutKind(), e = c || d;
                    if (e) {
                        var f = a, g = 0, h = 0, i = this._columnDimension.scrollbar.visible;
                        i && (f += this._scrollbarWidth, g += this._scrollbarWidth, h = this._scrollbarWidth), 
                        this._mainDiv.style.bottom = f + b.UnitOfMeasurement, this._rowDimension.scrollbar.element.style.bottom = h + b.UnitOfMeasurement, 
                        this._footerDiv.style.bottom = g + b.UnitOfMeasurement, this._footerDiv.style.removeProperty("top");
                    } else this._footerDiv.style.top = this._gridDimensions.rowHierarchyContentHeight + b.UnitOfMeasurement, 
                    this._footerDiv.style.removeProperty("bottom"), this._mainDiv.style.removeProperty("bottom");
                }, b.prototype.alreadyRendered = function(a) {
                    return a !== this._lastRenderingArgs.scrollingDimension || this.rowDimension.scrollOffset !== this._lastRenderingArgs.rowScrollOffset || this.columnDimension.scrollOffset !== this._lastRenderingArgs.columnScrollOffset ? !1 : !0;
                }, b.prototype.render = function(a, b) {
                    if (this._columnDimension.makeScrollOffsetValid(), this._rowDimension.makeScrollOffsetValid(), 
                    a || null === b) this._lastRenderingArgs = {}; else if (this.alreadyRendered(b)) return;
                    var c = !1;
                    this._renderIterationCount = 0, this._layoutManager.onStartRenderingSession(b, this._mainDiv);
                    var d = this._binder;
                    d.onStartRenderingSession();
                    for (var e = this._gridDimensions.footerHeight, f = this._gridDimensions.rowHierarchyHeight, g = this._gridDimensions.rowHierarchyContentHeight; !c; ) {
                        var h = this._columnDimension.scrollbar.visible, i = this._rowDimension.scrollbar.visible;
                        this._columnDimension._onStartRenderingIteration(a), this._rowDimension._onStartRenderingIteration(a), 
                        this._layoutManager.onStartRenderingIteration(a), this.renderCorner(), this._columnDimension._render(), 
                        this._rowDimension._render(), c = this._layoutManager.onEndRenderingIteration(), 
                        this._columnDimension._onEndRenderingIteration(), this._rowDimension._onEndRenderingIteration(), 
                        h !== this._columnDimension.scrollbar.visible && this.updateVerticalPosition(), 
                        i !== this._rowDimension.scrollbar.visible && this.updateHorizontalPosition(), this._renderIterationCount++;
                    }
                    this._layoutManager.onEndRenderingSession(), d.onEndRenderingSession(), this._isTouchEnabled && this.updateTouchDimensions(), 
                    this._lastRenderingArgs.rowScrollOffset = this.rowDimension.scrollOffset, this._lastRenderingArgs.columnScrollOffset = this.columnDimension.scrollOffset, 
                    this.updateContainerDimensions(), this._options.interactive && (this._columnDimension.scrollbar.refresh(), 
                    this._rowDimension.scrollbar.refresh());
                    var j = this._lastRenderingArgs;
                    j.rowScrollOffset = this.rowDimension.scrollOffset, j.columnScrollOffset = this.columnDimension.scrollOffset, 
                    j.scrollingDimension = b, (e !== this._gridDimensions.footerHeight || f !== this._gridDimensions.rowHierarchyHeight || g !== this._gridDimensions.rowHierarchyContentHeight) && this.updateVerticalPosition();
                }, b.prototype.updateContainerDimensions = function() {
                    var a = this._gridDimensions;
                    if (this._autoSizeWidth) {
                        var c = this._rowDimension.scrollbar.visible ? this._scrollbarWidth : 0;
                        this._container.style.width = a.rowHierarchyWidth + a.columnHierarchyWidth + c + b.UnitOfMeasurement;
                    }
                    if (this._autoSizeHeight) {
                        var d = this._columnDimension.scrollbar.visible ? this._scrollbarWidth : 0;
                        this._container.style.height = a.columnHierarchyHeight + a.rowHierarchyHeight + a.footerHeight + d + b.UnitOfMeasurement;
                    }
                }, b.prototype.cornerCellMatch = function(a, b) {
                    var c = b.item;
                    return 0 === b.type && c && this._hierarchyNavigator.cornerCellItemEquals(a, c);
                }, b.prototype.renderCorner = function() {
                    for (var a = this._columnDimension.getDepth(), b = this._rowDimension.getDepth(), c = 0; a > c; c++) for (var d = 0; b > d; d++) {
                        var e = this._hierarchyNavigator.getCorner(d, c), f = this._layoutManager.getOrCreateCornerCell(e, d, c), g = this.cornerCellMatch(e, f);
                        g || (this._unbindCell(f), f.type = 0, f.item = e, this._binder.bindCornerCell(e, f)), 
                        this._layoutManager.onCornerCellRealized(e, f);
                    }
                }, b.prototype._unbindCell = function(a) {
                    switch (a.type) {
                      case 3:
                        this._binder.unbindBodyCell(a.item, a);
                        break;

                      case 2:
                        this._binder.unbindColumnHeader(a.item, a);
                        break;

                      case 1:
                        this._binder.unbindRowHeader(a.item, a);
                        break;

                      case 0:
                        this._binder.unbindCornerCell(a.item, a);
                    }
                    a.item = null, a.type = null;
                }, b.prototype.onTouchEvent = function(a) {
                    var b, c, d;
                    a && a.length > 0 && "_columnDimension" in a[0] && "_rowDimension" in a[0] && (d = a[0], 
                    b = d._columnDimension.scrollbar.visible ? a[1] : 0, c = d._rowDimension.scrollbar.visible ? a[2] : 0, 
                    d._columnDimension.scrollbar.viewMin = Math.max(0, d._columnDimension.scrollbar.viewMin + b), 
                    d._columnDimension.scrollOffset = Math.max(0, d._columnDimension.scrollOffset + b), 
                    d._rowDimension.scrollbar.viewMin = Math.max(0, d._rowDimension.scrollbar.viewMin + c), 
                    d._rowDimension.scrollOffset = Math.max(0, d._rowDimension.scrollOffset + c), 0 === b ? d._onScrollAsync(d._rowDimension) : 0 === c ? d._onScrollAsync(d._columnDimension) : d._onScrollAsync(null));
                }, b.prototype.addFixedSizeClassNameIfNeeded = function() {
                    this._autoSizeHeight || this._autoSizeWidth || -1 !== this._container.className.indexOf(this._fixSizedClassName) || (this._container.className += " " + this._fixSizedClassName);
                }, b.prototype.removeFixSizedClassName = function() {
                    this._container.className = this._container.className.replace(this._fixSizedClassName, "");
                }, b.UnitOfMeasurement = "px", b.MouseWheelRange = 120, b;
            }());
            a.TablixControl = b;
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b = function() {
                function a(a) {
                    this._scrollStep = .1, this._owner = a, this._hierarchyNavigator = a.hierarchyNavigator, 
                    this._binder = a.binder, this._tablixLayoutManager = a.layoutManager, this.scrollOffset = 0;
                }
                return a.prototype._onStartRenderingIteration = function(a) {
                    this.updateScrollPosition();
                }, a.prototype._onEndRenderingIteration = function() {}, a.prototype.getValidScrollOffset = function(a) {
                    return Math.min(Math.max(a, 0), Math.max(this.getItemsCount() - this._scrollStep, 0));
                }, a.prototype.makeScrollOffsetValid = function() {
                    this.scrollOffset = this.getValidScrollOffset(this.scrollOffset);
                }, a.prototype.getIntegerScrollOffset = function() {
                    return Math.floor(this.scrollOffset);
                }, a.prototype.getFractionScrollOffset = function() {
                    return this.scrollOffset - this.getIntegerScrollOffset();
                }, Object.defineProperty(a.prototype, "scrollbar", {
                    get: function() {
                        return this._scrollbar;
                    },
                    enumerable: !0,
                    configurable: !0
                }), a.prototype.getFirstVisibleItem = function(a) {
                    return this._scrollItems[a];
                }, a.prototype.getFirstVisibleChild = function(a) {
                    return this._hierarchyNavigator.getAt(this._hierarchyNavigator.getChildren(a), this.getFirstVisibleChildIndex(a));
                }, a.prototype.getFirstVisibleChildIndex = function(a) {
                    var b, c = this.getFirstVisibleItem(this._hierarchyNavigator.getLevel(a) + 1);
                    return b = void 0 === c || void 0 !== c && this._hierarchyNavigator.getParent(c) !== a ? 0 : this._hierarchyNavigator.getIndex(c);
                }, a.prototype._initializeScrollbar = function(a, b) {
                    var c = this;
                    this._scrollbar = this._createScrollbar(a), this._scrollbar._onscroll.push(function(a) {
                        return c.onScroll();
                    }), b && (this.scrollbar.initTouch(b, !0), b.style.setProperty("-ms-touch-action", "pinch-zoom"));
                }, a.prototype.getItemsCount = function() {
                    return this.model ? this._hierarchyNavigator.getLeafCount(this.model) : 0;
                }, a.prototype.getDepth = function() {
                    return this.model ? this._hierarchyNavigator.getDepth(this.model) : 0;
                }, a.prototype.onScroll = function() {
                    this.scrollOffset = this._scrollbar.viewMin, this._owner._onScrollAsync(this);
                }, Object.defineProperty(a.prototype, "otherDimension", {
                    get: function() {
                        return this._otherDimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(a.prototype, "layoutManager", {
                    get: function() {
                        return this._layoutManager;
                    },
                    enumerable: !0,
                    configurable: !0
                }), a.prototype._createScrollbar = function(a) {
                    return null;
                }, a.prototype.updateScrollPosition = function() {
                    if (this._scrollItems = [], this.model) {
                        var a = this.getIntegerScrollOffset(), b = this._hierarchyNavigator.getLeafAt(this.model, a);
                        if (b) {
                            this._firstVisibleScrollIndex = a;
                            do this._scrollItems[this._hierarchyNavigator.getLevel(b)] = b, b = this._hierarchyNavigator.getParent(b); while (null !== b);
                        }
                    }
                }, a;
            }();
            a.TablixDimension = b;
            var c = function(b) {
                function c(a) {
                    b.call(this, a), this._layoutManager = this._tablixLayoutManager.rowLayoutManager, 
                    this._footer = null;
                }
                return __extends(c, b), c.prototype.setFooter = function(a) {
                    this._footer = a, this._owner.updateFooterVisibility();
                }, c.prototype.hasFooter = function() {
                    return null !== this._footer;
                }, c.prototype._render = function() {
                    var a = this.getFirstVisibleItem(0);
                    this.hasFooter() && (this.addFooterRowHeader(this._footer), this.addFooterBodyCells(this._footer)), 
                    void 0 !== a && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(a));
                }, c.prototype._createScrollbar = function(b) {
                    return new a.VerticalScrollbar(b);
                }, c.prototype.addNodes = function(a, b, c, d) {
                    for (var e = this._hierarchyNavigator.getCount(a), f = d; e > f; f++) {
                        if (!this._layoutManager.needsToRealize) return;
                        var g = this._hierarchyNavigator.getAt(a, f), h = this.addNode(g, a, b, c);
                        b += h.rowSpan;
                    }
                }, c.prototype.getFirstVisibleChildLeaf = function(a) {
                    for (var b = a; !this._hierarchyNavigator.isLeaf(b); ) b = this.getFirstVisibleChild(b);
                    return b;
                }, c.prototype.bindRowHeader = function(a, b) {
                    this._binder.bindRowHeader(a, b);
                }, c.prototype.addNode = function(a, b, c, d) {
                    var e, f = this._tablixLayoutManager.getOrCreateRowHeader(a, b, c, this._hierarchyNavigator.getLevel(a)), g = this.rowHeaderMatch(a, f);
                    return g || (this._owner._unbindCell(f), f.type = 1, f.item = a), this._hierarchyNavigator.isLeaf(a) ? (f.colSpan = d - this._hierarchyNavigator.getLevel(a), 
                    f.rowSpan = 1, g || this.bindRowHeader(a, f), this._tablixLayoutManager.onRowHeaderRealized(a, f), 
                    this.addBodyCells(a, b, c)) : (e = this._layoutManager.getRealizedItemsCount(), 
                    this.addNodes(this._hierarchyNavigator.getChildren(a), c, d, this.getFirstVisibleChildIndex(a)), 
                    f.colSpan = 1, f.rowSpan = this._layoutManager.getRealizedItemsCount() - e + 1, 
                    g || this.bindRowHeader(a, f), this._tablixLayoutManager.onRowHeaderRealized(a, f)), 
                    f;
                }, c.prototype.rowHeaderMatch = function(a, b) {
                    var c = b.item;
                    return 1 === b.type && c && this._hierarchyNavigator.headerItemEquals(a, c);
                }, c.prototype.addBodyCells = function(a, b, c) {
                    for (var d = this._otherDimension.getIntegerScrollOffset(), e = this._otherDimension._layoutManager.getRealizedItemsCount() - this.getDepth(), f = this._hierarchyNavigator, g = this._otherDimension.model, h = this._tablixLayoutManager, i = 0; e > i; i++) {
                        var j = f.getIntersection(a, f.getLeafAt(g, d + i)), k = h.getOrCreateBodyCell(j, a, b, c, i);
                        this.bindBodyCell(j, k), h.onBodyCellRealized(j, k);
                    }
                }, c.prototype.bindBodyCell = function(a, b) {
                    var c = this.bodyCelMatch(a, b);
                    c || (this._owner._unbindCell(b), b.type = 3, b.item = a, this._binder.bindBodyCell(a, b));
                }, c.prototype.addFooterRowHeader = function(a) {
                    var b = this._tablixLayoutManager.getOrCreateFooterRowHeader(a, this.model);
                    b.colSpan = this.getDepth();
                    var c = this.rowHeaderMatch(a, b);
                    c || (this._owner._unbindCell(b), b.type = 1, b.item = a, this.bindRowHeader(a, b), 
                    this._tablixLayoutManager.onRowHeaderFooterRealized(a, b));
                }, c.prototype.addFooterBodyCells = function(a) {
                    for (var b = this._otherDimension.getIntegerScrollOffset(), c = this._otherDimension.layoutManager.getRealizedItemsCount() - this.getDepth(), d = this._tablixLayoutManager, e = 0; c > e; e++) {
                        var f = this._hierarchyNavigator.getLeafAt(this._otherDimension.model, b + e), g = this._hierarchyNavigator.getIntersection(a, f), h = d.getOrCreateFooterBodyCell(g, e);
                        this.bindBodyCell(g, h), d.onBodyCellFooterRealized(g, h);
                    }
                }, c.prototype.bodyCelMatch = function(a, b) {
                    var c = b.item;
                    return 3 === b.type && c && this._hierarchyNavigator.bodyCellItemEquals(a, c);
                }, c;
            }(b);
            a.TablixRowDimension = c;
            var d = function(b) {
                function c(a) {
                    b.call(this, a), this._layoutManager = this._tablixLayoutManager.columnLayoutManager;
                }
                return __extends(c, b), c.prototype._render = function() {
                    var a = this.getFirstVisibleItem(0);
                    void 0 !== a && this.addNodes(this.model, 0, this.getDepth(), this._hierarchyNavigator.getIndex(a));
                }, c.prototype._createScrollbar = function(b) {
                    var c = new a.HorizontalScrollbar(b);
                    return c.smallIncrement = .2, c;
                }, c.prototype.addNodes = function(a, b, c, d) {
                    for (var e = this._hierarchyNavigator.getCount(a), f = d; e > f; f++) {
                        if (!this._layoutManager.needsToRealize) return;
                        var g = this.addNode(this._hierarchyNavigator.getAt(a, f), a, b, c);
                        b += g.colSpan;
                    }
                }, c.prototype.addNode = function(a, b, c, d) {
                    var e = this._tablixLayoutManager.getOrCreateColumnHeader(a, b, this._hierarchyNavigator.getLevel(a), c), f = this.columnHeaderMatch(a, e);
                    if (f || (this._owner._unbindCell(e), e.type = 2, e.item = a), this._hierarchyNavigator.isLeaf(a)) e.rowSpan = d - this._hierarchyNavigator.getLevel(a); else {
                        var g = this._layoutManager.getRealizedItemsCount();
                        this.addNodes(this._hierarchyNavigator.getChildren(a), c, d, this.getFirstVisibleChildIndex(a)), 
                        e.rowSpan = 1, e.colSpan = this._layoutManager.getRealizedItemsCount() - g + 1;
                    }
                    return f || this._binder.bindColumnHeader(a, e), this._tablixLayoutManager.onColumnHeaderRealized(a, e), 
                    e;
                }, c.prototype.columnHeaderMatch = function(a, b) {
                    var c = b.item;
                    return 2 === b.type && c && this._hierarchyNavigator.headerItemEquals(a, c);
                }, c;
            }(b);
            a.TablixColumnDimension = d;
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b = function() {
                function b(a) {
                    this._dimension = a, this._averageSize = 1, this._handlers = null, this._tablixControl = null;
                }
                return Object.defineProperty(b.prototype, "dimension", {
                    get: function() {
                        return this._dimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.setScrollDensity = function(a) {
                    this._averageSize = a;
                }, b.prototype.resize = function(a, b, c, d) {
                    this._dimension.x = a, this._dimension.y = b, this._dimension.width = c, this._dimension.height = d;
                }, b.prototype.getPixelToItem = function(b, c, d, e, f) {
                    return new a.TouchUtils.TouchEvent(b * this._averageSize, 0, f, -d * this._averageSize, 0);
                }, b.prototype.touchEvent = function(b) {
                    var c = [];
                    c[0] = this._tablixControl, c[1] = b.dx, c[2] = b.dy, this._handlers && a.fire([ this._handlers ], c);
                }, b.prototype.setHandler = function(a, b) {
                    this._handlers = b, this._tablixControl = a;
                }, b;
            }();
            a.ColumnTouchDelegate = b;
            var c = function() {
                function b(a) {
                    this._dimension = a, this._averageSize = 30, this._handlers = null, this._tablixControl = null;
                }
                return Object.defineProperty(b.prototype, "dimension", {
                    get: function() {
                        return this._dimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.setScrollDensity = function(a) {
                    this._averageSize = a;
                }, b.prototype.resize = function(a, b, c, d) {
                    this._dimension.x = a, this._dimension.y = b, this._dimension.width = c, this._dimension.height = d;
                }, b.prototype.getPixelToItem = function(b, c, d, e, f) {
                    var g = new a.TouchUtils.TouchEvent(0, c * this._averageSize, f, 0, -e * this._averageSize);
                    return g;
                }, b.prototype.touchEvent = function(b) {
                    var c = [];
                    c[0] = this._tablixControl, c[1] = b.dx, c[2] = b.dy, this._handlers && a.fire([ this._handlers ], c);
                }, b.prototype.setHandler = function(a, b) {
                    this._handlers = b, this._tablixControl = a;
                }, b;
            }();
            a.RowTouchDelegate = c;
            var d = function() {
                function b(a) {
                    this._dimension = a, this._averageSizeX = b.DefaultAverageSizeX, this._averageSizeY = b.DefaultAverageSizeY, 
                    this._handlers = null, this._tablixControl = null;
                }
                return Object.defineProperty(b.prototype, "dimension", {
                    get: function() {
                        return this._dimension;
                    },
                    enumerable: !0,
                    configurable: !0
                }), b.prototype.setScrollDensity = function(a, b) {
                    this._averageSizeX = a, this._averageSizeY = b;
                }, b.prototype.resize = function(a, b, c, d) {
                    var e = this._dimension;
                    e.x = a, e.y = b, e.width = c, e.height = d;
                }, b.prototype.getPixelToItem = function(b, c, d, e, f) {
                    return new a.TouchUtils.TouchEvent(b * this._averageSizeX, c * this._averageSizeY, f, -d * this._averageSizeX, -e * this._averageSizeY);
                }, b.prototype.touchEvent = function(b) {
                    var c = [ this._tablixControl, b.dx, b.dy ];
                    this._handlers && a.fire([ this._handlers ], c);
                }, b.prototype.setHandler = function(a, b) {
                    this._handlers = b, this._tablixControl = a;
                }, b.DefaultAverageSizeX = 30, b.DefaultAverageSizeY = 30, b;
            }();
            a.BodyTouchDelegate = d;
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(b) {
                var c = function() {
                    function a(a, b) {
                        this.x = a || 0, this.y = b || 0;
                    }
                    return a.prototype.offset = function(a, b) {
                        this.x += a, this.y += b;
                    }, a;
                }();
                b.Point = c;
                var d = function(a) {
                    function b(b, c, d, e) {
                        a.call(this, b, c), this.width = d || 0, this.height = e || 0;
                    }
                    return __extends(b, a), Object.defineProperty(b.prototype, "point", {
                        get: function() {
                            return new c(this.x, this.y);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), b.prototype.contains = function(a) {
                        return b.contains(this, a);
                    }, b.contains = function(a, c) {
                        return c && !b.isEmpty(a) ? a.x <= c.x && c.x < a.x + a.width && a.y <= c.y && c.y < a.y + a.height : !1;
                    }, b.isEmpty = function(a) {
                        return !(void 0 !== a && a.width >= 0 && a.height >= 0);
                    }, b;
                }(c);
                b.Rectangle = d, function(a) {
                    a[a.Vertical = 0] = "Vertical", a[a.Horizontal = 1] = "Horizontal", a[a.FreeForm = 2] = "FreeForm";
                }(b.SwipeDirection || (b.SwipeDirection = {}));
                b.SwipeDirection;
                !function(a) {
                    a[a.NoClick = 0] = "NoClick", a[a.LeftClick = 1] = "LeftClick", a[a.RightClick = 2] = "RightClick", 
                    a[a.CenterClick = 3] = "CenterClick";
                }(b.MouseButton || (b.MouseButton = {}));
                var e = (b.MouseButton, function() {
                    function a(a, b, c, d, e) {
                        this._x = a, this._y = b, this._isMouseDown = c, this._dx = d || 0, this._dy = e || 0;
                    }
                    return Object.defineProperty(a.prototype, "x", {
                        get: function() {
                            return this._x;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "y", {
                        get: function() {
                            return this._y;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "dx", {
                        get: function() {
                            return this._dx;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "dy", {
                        get: function() {
                            return this._dy;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(a.prototype, "isMouseDown", {
                        get: function() {
                            return this._isMouseDown;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a;
                }());
                b.TouchEvent = e;
                var f = function() {
                    function a() {
                        this._touchList = [], this._swipeDirection = 2, this._matchingDirectionCount = 0, 
                        this._lockThreshold = !0, this._scrollThreshold = !0, this._lastEvent = new e(0, 0, !1);
                    }
                    return Object.defineProperty(a.prototype, "lastEvent", {
                        get: function() {
                            return this._lastEvent;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), a.prototype.addTouchRegion = function(a, b, c) {
                        var d = {
                            lastPoint: new e(0, 0, !1),
                            handler: b,
                            region: a,
                            converter: c
                        };
                        this._touchList = this._touchList.concat([ d ]);
                    }, a.prototype.upAllTouches = function() {
                        var a, b;
                        b = this._touchList.length;
                        for (var c = 0; b > c; c++) this._touchList[c].lastPoint.isMouseDown && (a = this._touchList[c].converter.getPixelToItem(this._touchList[c].lastPoint.x, this._touchList[c].lastPoint.y, 0, 0, !1), 
                        this._touchList[c].handler.touchEvent(a)), this._touchList[c].lastPoint = new e(this._touchList[c].lastPoint.x, this._touchList[c].lastPoint.y, !1);
                        this._lastEvent = new e(0, 0, !1);
                    }, a.prototype.touchEvent = function(a) {
                        var b, c, d = 0, f = 0, g = 0, h = 0, i = 0, j = null;
                        b = this._getActive(), !this._lastEvent.isMouseDown && a.isMouseDown && (b = this._findRegions(a)), 
                        g = this._lastEvent.x - a.x, h = this._lastEvent.y - a.y, this._lastEvent = new e(a.x, a.y, a.isMouseDown, g, h), 
                        c = b.length;
                        for (var k = 0; c > k; k++) d = a.x - b[k].region.point.x, f = a.y - b[k].region.point.y, 
                        b[k].lastPoint.isMouseDown && a.isMouseDown ? (g = d - b[k].lastPoint.x, h = f - b[k].lastPoint.y, 
                        i = Math.abs(180 / Math.PI * Math.atan(h / g)), this._scrollThreshold && (this._lockThreshold && this._matchingDirectionCount > 5 ? 1 === this._swipeDirection ? h = 0 : 0 === this._swipeDirection && (g = 0) : 20 > i ? (h = 0, 
                        1 === this._swipeDirection ? this._matchingDirectionCount++ : (this._matchingDirectionCount = 1, 
                        this._swipeDirection = 1)) : (i = Math.abs(180 / Math.PI * Math.atan(g / h)), 20 > i ? (g = 0, 
                        0 === this._swipeDirection ? this._matchingDirectionCount++ : (this._matchingDirectionCount = 1, 
                        this._swipeDirection = 0)) : 2 === this._swipeDirection ? this._matchingDirectionCount++ : (this._swipeDirection = 2, 
                        this._matchingDirectionCount = 1)))) : (g = 0, h = 0, this._swipeDirection = 2, 
                        this._matchingDirectionCount = 0), b[k].lastPoint = new e(d, f, a.isMouseDown, g, h), 
                        j = b[k].converter.getPixelToItem(d, f, g, h, a.isMouseDown), b[k].handler.touchEvent(j);
                    }, a.prototype._findRegions = function(a) {
                        var b, d = [];
                        b = this._touchList.length;
                        for (var e = 0; b > e; e++) this._touchList[e].region.contains(new c(a.x, a.y)) && (d = d.concat([ this._touchList[e] ]));
                        return d;
                    }, a.prototype._getActive = function() {
                        var a, b = [];
                        a = this._touchList.length;
                        for (var c = 0; a > c; c++) this._touchList[c].lastPoint.isMouseDown && (b = b.concat([ this._touchList[c] ]));
                        return b;
                    }, a;
                }();
                b.TouchManager = f;
                var g = function() {
                    function b(a) {
                        this._manager = a, this._allowMouseDrag = !0, this._touchPanel = null, this._scale = 1, 
                        this._documentMouseMoveWrapper = null, this._documentMouseUpWrapper = null;
                    }
                    return b.prototype.initTouch = function(a, b, c) {
                        var d = this;
                        a.style.setProperty("-ms-touch-action", "pinch-zoom"), this._touchReferencePoint = b, 
                        this._touchPanel = a, this._allowMouseDrag = void 0 === c ? !0 : c, "ontouchmove" in a ? (a.addEventListener("touchstart", function(a) {
                            return d.onTouchStart(a);
                        }), a.addEventListener("touchend", function(a) {
                            return d.onTouchEnd(a);
                        })) : (a.addEventListener("mousedown", function(a) {
                            return d.onTouchMouseDown(a);
                        }), a.addEventListener("mouseup", function(a) {
                            return d.onTouchMouseUp(a);
                        }));
                    }, b.prototype.getXYByClient = function(a) {
                        var b = this._rect, d = b.left, e = b.top;
                        void 0 !== window.scrollX && (d += window.scrollX, e += window.scrollY);
                        var f = new c(0, 0);
                        return f.offset(a.pageX - d, a.pageY - e), f;
                    }, b.prototype.onTouchStart = function(a) {
                        1 === a.touches.length && (a.cancelBubble = !0, this.onTouchMouseDown(a.touches[0]));
                    }, b.prototype.onTouchMove = function(a) {
                        1 === a.touches.length && (a.preventDefault && a.preventDefault(), this.onTouchMouseMove(a.touches[0]));
                    }, b.prototype.onTouchEnd = function(a) {
                        this.onTouchMouseUp(1 === a.touches.length ? a.touches[0] : a, !0);
                    }, b.prototype.onTouchMouseDown = function(b) {
                        var c = this;
                        this._scale = a.HTMLElementUtils.getAccumulatedScale(this._touchPanel), document.getSelection().removeAllRanges(), 
                        this._rect = (this._touchReferencePoint ? this._touchReferencePoint : this._touchPanel).getBoundingClientRect(), 
                        "ontouchmove" in this._touchPanel ? (this._documentMouseMoveWrapper = function(a) {
                            return c.onTouchMove(a);
                        }, document.addEventListener("touchmove", this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(a) {
                            return c.onTouchEnd(a);
                        }, document.addEventListener("touchend", this._documentMouseUpWrapper)) : (this._documentMouseMoveWrapper = function(a) {
                            return c.onTouchMouseMove(a);
                        }, document.addEventListener("mousemove", this._documentMouseMoveWrapper), this._documentMouseUpWrapper = function(a) {
                            return c.onTouchMouseUp(a);
                        }, document.addEventListener("mouseup", this._documentMouseUpWrapper)), "setCapture" in this._touchPanel && this._touchPanel.setCapture();
                    }, b.prototype.onTouchMouseMove = function(a) {
                        var b, c, d = null !== this._rect && 0 !== a.which;
                        d && (c = this.getXYByClient(a), b = new e(c.x / this._scale, c.y / this._scale, d), 
                        this._manager.touchEvent(b), a.preventDefault ? a.preventDefault() : "returnValue" in a && (a.returnValue = !1));
                    }, b.prototype.onTouchMouseUp = function(a, b) {
                        this._rect = null, this._manager.upAllTouches(), "releaseCapture" in this._touchPanel && this._touchPanel.releaseCapture(), 
                        null !== this._documentMouseMoveWrapper && ("ontouchmove" in this._touchPanel ? (document.removeEventListener("touchmove", this._documentMouseMoveWrapper), 
                        document.removeEventListener("touchend", this._documentMouseUpWrapper)) : (document.removeEventListener("mousemove", this._documentMouseMoveWrapper), 
                        document.removeEventListener("mouseup", this._documentMouseUpWrapper)), this._documentMouseMoveWrapper = null, 
                        this._documentMouseUpWrapper = null);
                    }, b;
                }();
                b.TouchEventInterpreter = g;
            }(b = a.TouchUtils || (a.TouchUtils = {}));
        }(b = a.controls || (a.controls = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(a) {
                this.mainText = {
                    "class": "mainText",
                    selector: ".mainText"
                }, this.name = a, this.visualConfiguration = {
                    maxFontSize: 60
                };
            }
            return c.prototype.getMetaDataColumn = function(a) {
                if (a && a.metadata && a.metadata.columns) for (var b = 0, c = a.metadata.columns.length; c > b; b++) {
                    var d = a.metadata.columns[b];
                    if (d.isMeasure) {
                        this.metaDataColumn = d;
                        break;
                    }
                }
            }, c.prototype.getAdjustedFontHeight = function(a, b, c) {
                var d = this.svg.append("text").text(b), e = this.getAdjustedFontHeightCore(d, a, c, 0);
                return d.remove(), e;
            }, c.prototype.getAdjustedFontHeightCore = function(b, c, d, e) {
                if (e > 10) return d;
                b.attr("font-size", d);
                var f = a.TextMeasurementService.measureSvgTextElementWidth(b[0][0]);
                return c > f ? d : this.getAdjustedFontHeightCore(b, c, .9 * d, e + 1);
            }, c.prototype.clear = function() {
                this.svg.select(this.mainText.selector).text("");
            }, c.prototype.doValueTransition = function(a, c, d, e, f, g) {
                if (g || a !== c) {
                    a || (a = 0);
                    var h = this.svg, i = this.graphicsContext, j = this.currentViewport, k = j.height, l = j.width, m = [ c ], n = this.getSeedFontHeight(l, k), o = this.getTranslateX(l), p = this.getTranslateY(x), q = this.metaDataColumn, r = b.valueFormatter.create({
                        format: this.getFormatString(q),
                        value: c,
                        displayUnitSystemType: d,
                        formatSingleValues: !0,
                        allowFormatBeautification: !0
                    }), s = r.format(a), t = r.format(c);
                    h.attr("class", this.name);
                    var u = i.selectAll("text").data(m);
                    u.enter().append("text").attr("class", this.mainText["class"]);
                    var v = u.text(s).attr("text-anchor", this.getTextAnchor()), w = v.node();
                    if (w) {
                        var x = this.getAdjustedFontHeight(l, t, n);
                        p = this.getTranslateY(x + (k - x) / 2);
                    }
                    if (i.attr("font-size", x).attr("transform", "translate(" + o + "," + p + ")"), 
                    q && b.AxisHelper.isDateTime(q.type)) v.text(t); else {
                        var y = a;
                        v.transition().duration(f).tween("text", function(a) {
                            var b = d3.interpolate(y, a);
                            return function(a) {
                                var c = b(a);
                                this.textContent = r.format(c);
                            };
                        });
                    }
                    b.SVGUtil.flushAllD3TransitionsIfNeeded(e);
                }
            }, c.prototype.getSeedFontHeight = function(a, b) {
                var c = Math.floor(.75 * Math.min(a, b)), d = this.visualConfiguration.maxFontSize;
                return d ? Math.min(d, c) : c;
            }, c.prototype.getTranslateX = function(a) {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return 0;

                  case "right":
                    return a;
                }
                return a / 2;
            }, c.prototype.getTranslateY = function(a) {
                return a;
            }, c.prototype.getTextAnchor = function() {
                if (this.visualConfiguration) switch (this.visualConfiguration.align) {
                  case "left":
                    return "start";

                  case "right":
                    return "end";
                }
                return "middle";
            }, c.prototype.getFormatString = function(a) {
                return b.valueFormatter.getFormatString(a, c.formatStringProp);
            }, c.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, c.objectDescs = {
                general: {
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                }
            }, c;
        }();
        b.AnimatedText = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function(b) {
            function c(a) {
                b.call(this, "animatedNumber"), a && (this.svg = a);
            }
            return __extends(c, b), c.prototype.init = function(a) {
                this.options = a;
                var b = a.element;
                this.svg || (this.svg = d3.select(b.get(0)).append("svg")), this.graphicsContext = this.svg.append("g"), 
                this.currentViewport = a.viewport, this.hostServices = a.host, this.style = a.style, 
                this.updateViewportDependantProperties();
            }, c.prototype.updateViewportDependantProperties = function() {
                var a = this.currentViewport;
                this.svg.attr("width", a.width).attr("height", a.height);
            }, c.prototype.update = function(a) {
                this.currentViewport = a.viewport;
                var b = this.dataViews = a.dataViews;
                if (b && b[0]) {
                    var c = b[0];
                    this.updateViewportDependantProperties(), this.getMetaDataColumn(c);
                    var d = c && c.single ? c.single.value : 0;
                    null != d && this.updateInternal(d, a.duration, !0);
                }
            }, c.prototype.onDataChanged = function(a) {
                this.update({
                    dataViews: a.dataViews,
                    duration: a.duration,
                    viewport: this.currentViewport
                });
            }, c.prototype.onResizing = function(a, b) {
                this.update({
                    dataViews: this.dataViews,
                    duration: b,
                    viewport: a
                });
            }, c.prototype.canResizeTo = function(a) {
                return !0;
            }, c.prototype.updateInternal = function(a, b, c) {
                void 0 === b && (b = 0), void 0 === c && (c = !1);
                var d = this.value || 0;
                this.doValueTransition(d, a, null, this.options.animation, b, c), this.value = a;
            }, c.capabilities = {
                objects: a.AnimatedText.objectDescs,
                dataViewMappings: [ {
                    single: {
                        role: "Values"
                    }
                } ]
            }, c;
        }(a.AnimatedText);
        a.AnimatedNumber = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a, c, d, e, f, g) {
            switch (void 0 === g && (g = !1), c) {
              case 1:
                return void a.push(new b.LineChart({
                    chartType: 2,
                    isScrollable: g,
                    interactivityService: e,
                    animator: f
                }));

              case 0:
                return void a.push(new b.LineChart({
                    chartType: 1,
                    isScrollable: g,
                    interactivityService: e,
                    animator: f
                }));

              case 3:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.stackedColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 2:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.clusteredColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 7:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.hundredPercentStackedColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 5:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.stackedBar,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 4:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.clusteredBar,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 6:
                return void a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.hundredPercentStackedBar,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                }));

              case 8:
                return void a.push(new b.ScatterChart({
                    interactivityService: e
                }));

              case 11:
                return void a.push(new b.WaterfallChart({
                    isScrollable: g
                }));

              case 9:
                var h = b.ColumnChartType.clusteredColumn;
                if (d) {
                    var i = d.general;
                    if (i) {
                        switch (i.visualType1) {
                          case "Column":
                            h = b.ColumnChartType.clusteredColumn;
                            break;

                          case "ColumnStacked":
                            h = b.ColumnChartType.stackedColumn;
                        }
                        i.visualType2;
                    }
                }
                return a.push(new b.ColumnChart({
                    chartType: h,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                })), void a.push(new b.LineChart({
                    chartType: 9,
                    isScrollable: g,
                    interactivityService: e,
                    animator: f
                }));

              case 10:
                return void a.push(new b.DataDotChart());

              case 12:
                return a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.clusteredColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                })), void a.push(new b.LineChart({
                    chartType: 9,
                    isScrollable: g,
                    interactivityService: e,
                    animator: f
                }));

              case 13:
                return a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.stackedColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                })), void a.push(new b.LineChart({
                    chartType: 9,
                    isScrollable: g,
                    interactivityService: e,
                    animator: f
                }));

              case 14:
                return a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.clusteredColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                })), void a.push(new b.DataDotChart());

              case 15:
                return a.push(new b.ColumnChart({
                    chartType: b.ColumnChartType.stackedColumn,
                    animator: f,
                    isScrollable: g,
                    interactivityService: e
                })), void a.push(new b.DataDotChart());
            }
        }
        function d(a, b, c) {
            return c > 1 ? a && a.length > b ? [ a[b] ] : [] : a;
        }
        function e(a) {
            return a.length > 1;
        }
        function f(a, b, c) {
            return 0 === a && !!b && !!b.showAxisTitle || 1 === a && !c && !!b && !!b.secShowAxisTitle;
        }
        function g(a, b) {
            var c = {
                domain: void 0,
                merged: !1,
                tickCount: 3,
                forceStartToZero: !1
            };
            if (a.length < 2) return c;
            var d, e, f, g, h = a[0].calculateAxesProperties(b)[1], i = a[1].calculateAxesProperties(b)[1], k = h.scale.domain(), l = i.scale.domain();
            if (k[0] >= 0 && l[0] >= 0 && (c.forceStartToZero = !0), h.values && h.values.length > 0 && i.values && i.values.length > 0 && (c.tickCount = Math.max(h.values.length, i.values.length)), 
            k[0] > l[1] || k[1] < l[0]) return c;
            d = Math.min(k[0], l[0]), e = Math.max(k[1], l[1]), g = Math.max(k[0], l[0]), f = Math.min(k[1], l[1]);
            var m = e - d;
            if (0 === m) return c;
            var n = Math.abs((f - g) / m);
            return j > n ? c : {
                domain: [ d, e ],
                merged: !0,
                tickCount: c.tickCount,
                forceStartToZero: !1
            };
        }
        function h(a, b, c, d, h) {
            var i, j = {
                viewport: b,
                margin: c,
                forcedXDomain: [ d ? d.start : null, d ? d.end : null ],
                showXLabel: !1,
                showYLabel: !1
            }, k = !1;
            e(a) && (i = g(a, j), k = i.merged, k ? j.forcedYDomain = i.domain : j.forcedTickCount = i.tickCount);
            var l = i ? i.forceStartToZero : !1;
            j.forcedYDomain = h ? [ h.start, h.end ] : null;
            for (var m, n = 0, o = a.length; o > n; n++) {
                var p = a[n];
                1 !== n || k || (j.forcedYDomain = h ? [ h.secStart, h.secEnd ] : null), j.showXLabel = !!d && !!d.showAxisTitle, 
                j.showYLabel = f(n, h, k);
                var q = p.calculateAxesProperties(j);
                if (0 === n) m = {
                    x: q[0],
                    y1: q[1],
                    forceValueDomainStartToZero: l
                }; else if (q && !m.y2) if (q[0].axis.scale().domain().length > m.x.axis.scale().domain().length) {
                    j.showYLabel = !!h && !!h.showAxisTitle;
                    var q = p.calculateAxesProperties(j);
                    m.x = q[0], m.y1 = q[1];
                } else p.overrideXScale(m.x), k || (m.y2 = q[1]);
            }
            return m;
        }
        var i = jsCommon.EnumExtensions, j = .1;
        !function(a) {
            a[a.Line = 0] = "Line", a[a.Area = 1] = "Area", a[a.ClusteredColumn = 2] = "ClusteredColumn", 
            a[a.StackedColumn = 3] = "StackedColumn", a[a.ClusteredBar = 4] = "ClusteredBar", 
            a[a.StackedBar = 5] = "StackedBar", a[a.HundredPercentStackedBar = 6] = "HundredPercentStackedBar", 
            a[a.HundredPercentStackedColumn = 7] = "HundredPercentStackedColumn", a[a.Scatter = 8] = "Scatter", 
            a[a.ComboChart = 9] = "ComboChart", a[a.DataDot = 10] = "DataDot", a[a.Waterfall = 11] = "Waterfall", 
            a[a.LineClusteredColumnCombo = 12] = "LineClusteredColumnCombo", a[a.LineStackedColumnCombo = 13] = "LineStackedColumnCombo", 
            a[a.DataDotClusteredColumnCombo = 14] = "DataDotClusteredColumnCombo", a[a.DataDotStackedColumnCombo = 15] = "DataDotStackedColumnCombo";
        }(b.CartesianChartType || (b.CartesianChartType = {}));
        b.CartesianChartType;
        !function(a) {
            a[a.ShowLinesOnXAxis = 1] = "ShowLinesOnXAxis", a[a.ShowLinesOnYAxis = 2] = "ShowLinesOnYAxis", 
            a[a.ShowLinesOnBothAxis = a.ShowLinesOnXAxis | a.ShowLinesOnYAxis] = "ShowLinesOnBothAxis";
        }(b.AxisLinesVisibility || (b.AxisLinesVisibility = {}));
        var k = b.AxisLinesVisibility, l = function() {
            function f(a) {
                this.isScrollable = !1, a && (this.type = a.chartType, a.isScrollable && (this.isScrollable = a.isScrollable), 
                this.animator = a.animator, a.cartesianSmallViewPortProperties && (this.cartesianSmallViewPortProperties = a.cartesianSmallViewPortProperties));
            }
            return f.getAxisVisibility = function(a) {
                switch (a) {
                  case 5:
                  case 4:
                  case 6:
                    return 1;

                  case 8:
                    return k.ShowLinesOnBothAxis;

                  default:
                    return 2;
                }
            }, f.prototype.init = function(c) {
                this.visualInitOptions = c, this.layers = [];
                var d = this.element = c.element, e = this.currentViewport = c.viewport;
                this.hostServices = c.host, this.brush = d3.svg.brush(), d.addClass(f.ClassName), 
                this.margin = {
                    top: 1,
                    right: 1,
                    bottom: 1,
                    left: 1
                }, this.yAxisOrientation = a.yAxisPosition.left, this.adjustMargins(e);
                var g = f.getAxisVisibility(this.type), h = this.scrollY = i.hasFlag(g, k.ShowLinesOnBothAxis) || i.hasFlag(g, 1), j = this.scrollX = i.hasFlag(g, k.ShowLinesOnBothAxis) || i.hasFlag(g, 2), l = this.svg = d3.select(d.get(0)).append("svg");
                l.style("position", "absolute");
                var m = this.axisGraphicsContext = l.append("g").classed(f.AxisGraphicsContextClassName, !0);
                this.svgScrollable = l.append("svg").classed("svgScrollable", !0).style("overflow", "hidden");
                var n = this.axisGraphicsContextScrollable = this.svgScrollable.append("g").classed(f.AxisGraphicsContextClassName, !0);
                this.clearCatcher = b.appendClearCatcher(this.axisGraphicsContextScrollable), this.brushGraphicsContext = l.append("g").attr("class", "x brush");
                var o = h ? n : m;
                this.xAxisGraphicsContext = h ? m.append("g").attr("class", "x axis") : n.append("g").attr("class", "x axis"), 
                this.y1AxisGraphicsContext = o.append("g").attr("class", "y axis"), this.y2AxisGraphicsContext = o.append("g").attr("class", "y axis"), 
                this.xAxisGraphicsContext.classed("showLinesOnAxis", h), this.y1AxisGraphicsContext.classed("showLinesOnAxis", j), 
                this.y2AxisGraphicsContext.classed("showLinesOnAxis", j), this.xAxisGraphicsContext.classed("hideLinesOnAxis", !h), 
                this.y1AxisGraphicsContext.classed("hideLinesOnAxis", !j), this.y2AxisGraphicsContext.classed("hideLinesOnAxis", !j), 
                11 !== this.type && (this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(c)), 
                this.legend = b.createLegend(d, c.interactivity && c.interactivity.isInteractiveLegend, this.interactivityService, this.isScrollable);
            }, f.prototype.renderAxesLabels = function(c, d, e, g, h, i) {
                this.axisGraphicsContext.selectAll(".xAxisLabel").remove(), this.axisGraphicsContext.selectAll(".yAxisLabel").remove();
                var j = this.margin, k = e.width - (j.left + j.right), l = e.height, m = f.FontSize, n = this.yAxisOrientation, o = n === a.yAxisPosition.right;
                if (!g) {
                    var p = this.axisGraphicsContext.append("text").style("text-anchor", "middle").text(c.x).call(function(a) {
                        a.each(function() {
                            var a = d3.select(this);
                            a.attr({
                                "class": "xAxisLabel",
                                transform: b.SVGUtil.translate(k / 2, l - m)
                            });
                        });
                    });
                    p.call(b.AxisHelper.LabelLayoutStrategy.clip, k, a.TextMeasurementService.svgEllipsis);
                }
                if (!h) {
                    var q = this.axisGraphicsContext.append("text").style("text-anchor", "middle").text(c.y).call(function(a) {
                        a.each(function() {
                            var a = d3.select(this);
                            a.attr({
                                "class": "yAxisLabel",
                                transform: "rotate(-90)",
                                y: o ? k + j.right - m : -j.left,
                                x: -((l - j.top - d) / 2),
                                dy: "1em"
                            });
                        });
                    });
                    q.call(b.AxisHelper.LabelLayoutStrategy.clip, l - (j.bottom + j.top), a.TextMeasurementService.svgEllipsis);
                }
                if (!i && c.y2) {
                    var r = this.axisGraphicsContext.append("text").style("text-anchor", "middle").text(c.y2).call(function(a) {
                        a.each(function() {
                            var a = d3.select(this);
                            a.attr({
                                "class": "yAxisLabel",
                                transform: "rotate(-90)",
                                y: o ? -j.left : k + j.right - m,
                                x: -((l - j.top - d) / 2),
                                dy: "1em"
                            });
                        });
                    });
                    r.call(b.AxisHelper.LabelLayoutStrategy.clip, l - (j.bottom + j.top), a.TextMeasurementService.svgEllipsis);
                }
            }, f.prototype.adjustMargins = function(a) {
                var c = this.margin, d = a.width - (c.left + c.right), e = a.height - (c.top + c.bottom), f = this.element.find(".x.axis");
                0 === b.AxisHelper.getRecommendedNumberOfTicksForXAxis(d) && 0 === b.AxisHelper.getRecommendedNumberOfTicksForYAxis(e) ? (this.margin = {
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }, f.hide()) : f.show();
            }, f.prototype.updateAxis = function(c, d) {
                this.adjustMargins(d);
                var e = this.margin, g = d.width - (e.left + e.right), h = d.height - (e.top + e.bottom), i = this.yAxisOrientation, j = i === a.yAxisPosition.right;
                this.xAxisGraphicsContext.attr("transform", b.SVGUtil.translate(0, h)), this.y1AxisGraphicsContext.attr("transform", b.SVGUtil.translate(j ? 0 : g, 0)), 
                this.y2AxisGraphicsContext.attr("transform", b.SVGUtil.translate(j ? 0 : g, 0)), 
                this.svg.attr({
                    width: d.width,
                    height: d.height
                }), this.svgScrollable.attr({
                    width: d.width,
                    height: d.height
                }), this.svgScrollable.attr({
                    x: 0
                }), this.axisGraphicsContext.attr("transform", b.SVGUtil.translate(e.left, e.top)), 
                this.axisGraphicsContextScrollable.attr("transform", b.SVGUtil.translate(e.left, e.top)), 
                this.isXScrollBarVisible ? (this.svgScrollable.attr({
                    x: this.margin.left
                }), this.axisGraphicsContextScrollable.attr("transform", b.SVGUtil.translate(0, e.top)), 
                this.svgScrollable.attr("width", g), this.svg.attr("width", d.width).attr("height", d.height + f.ScrollBarWidth)) : this.isYScrollBarVisible && (this.svgScrollable.attr("height", h + e.top), 
                this.svg.attr("width", d.width + f.ScrollBarWidth).attr("height", d.height));
            }, f.getIsScalar = function(c, d, e) {
                var f = a.DataViewObjects.getValue(c, d);
                return c && void 0 !== f ? f === a.axisType.scalar && !b.AxisHelper.isOrdinal(e) : !b.AxisHelper.isOrdinal(e);
            }, f.prototype.populateObjectProperties = function(c) {
                if (c && c.length > 0) {
                    var d = c[0].metadata;
                    d ? this.legendObjectProperties = a.DataViewObjects.getObject(d.objects, "legend", {}) : this.legendObjectProperties = {}, 
                    this.categoryAxisProperties = b.CartesianHelper.getCategoryAxisProperties(d), this.valueAxisProperties = b.CartesianHelper.getValueAxisProperties(d);
                    var e = this.valueAxisProperties.position;
                    this.yAxisOrientation = e ? e.toString() : a.yAxisPosition.left;
                }
            }, f.prototype.update = function(a) {
                var c = this.dataViews = a.dataViews;
                if (this.currentViewport = a.viewport, c) {
                    var e = this.layers;
                    if (0 === e.length && this.createAndInitLayers(c), c && c.length > 0) {
                        var f = b.getInvalidValueWarnings(c, !1, !1, !1);
                        f && f.length > 0 && this.hostServices.setWarnings(f), this.populateObjectProperties(c);
                    }
                    for (var g = 0, h = e.length; h > g; g++) e[g].setData(d(c, g, h));
                    this.visualInitOptions.interactivity && this.visualInitOptions.interactivity.isInteractiveLegend || this.renderLegend();
                    var i = null == a.duration ? this.animator ? b.AnimatorCommon.MinervaAnimationDuration : 0 : a.duration;
                    this.render(this.hasSetData && i), this.hasSetData = this.hasSetData || c && c.length > 0;
                }
            }, f.prototype.onDataChanged = function(a) {
                this.update({
                    dataViews: a.dataViews,
                    duration: a.duration || (this.animator ? b.AnimatorCommon.MinervaAnimationDuration : 0),
                    viewport: this.currentViewport
                });
            }, f.prototype.onResizing = function(a, b) {
                this.currentViewport && this.currentViewport.height === a.height && this.currentViewport.width === a.width || this.update({
                    dataViews: this.dataViews,
                    duration: b || 0,
                    viewport: a
                });
            }, f.prototype.enumerateObjectInstances = function(c) {
                var d = [], e = this.layers ? this.layers.length : 0;
                if ("legend" === c.objectName) {
                    if (e > 0 && !this.layers[0].hasLegend()) return;
                    var f = a.DataViewObject.getValue(this.legendObjectProperties, b.legendProps.show, this.legend.isVisible()), g = a.DataViewObject.getValue(this.legendObjectProperties, b.legendProps.showTitle, !0), h = a.DataViewObject.getValue(this.legendObjectProperties, b.legendProps.titleText, this.layerLegendData ? this.layerLegendData.title : "");
                    d.push({
                        selector: null,
                        properties: {
                            show: f,
                            position: b.LegendPosition[this.legend.getOrientation()],
                            showTitle: g,
                            titleText: h
                        },
                        objectName: c.objectName
                    });
                } else "categoryAxis" === c.objectName && this.hasCategoryAxis ? d = this.getCategoryAxisValues() : "valueAxis" === c.objectName && (d = this.getValueAxisValues());
                for (var i = 0, j = e; j > i; i++) {
                    var k = this.layers[i];
                    if (k.enumerateObjectInstances) {
                        var l = k.enumerateObjectInstances(c);
                        if (l) {
                            if (i > 0) if ("dataPoint" === c.objectName) {
                                var m = this.findObjectWithProperty(l, "defaultColor");
                                if (m) {
                                    var n = l.indexOf(m);
                                    l.splice(n, 1);
                                }
                                var o = this.findObjectWithProperty(l, "showAllDataPoints");
                                if (o) {
                                    var n = l.indexOf(o);
                                    l.splice(n, 1);
                                }
                            } else "labels" === c.objectName && d.length > 0 && (l = []);
                            "categoryAxis" === c.objectName || "valueAxis" === c.objectName ? d.length > 0 && l.length > 0 && (d[0].properties.showAxisTitle = l[0].properties.showAxisTitle) : d = d.concat(l);
                        }
                    }
                }
                return d;
            }, f.prototype.getCategoryAxisValues = function() {
                var c = [], d = a.axisType.both, e = !1;
                this.layers && this.layers[0].getSupportedCategoryAxisType && (d = this.layers[0].getSupportedCategoryAxisType(), 
                e = d === a.axisType.scalar ? !0 : b.CartesianHelper.isScalar(d === a.axisType.both, this.categoryAxisProperties)), 
                e || this.categoryAxisProperties && (this.categoryAxisProperties.start = null, this.categoryAxisProperties.end = null);
                var f = {
                    selector: null,
                    properties: {},
                    objectName: "categoryAxis"
                };
                return f.properties.show = this.categoryAxisProperties && null != this.categoryAxisProperties.show ? this.categoryAxisProperties.show : !0, 
                this.yAxisIsCategorical && (f.properties.position = this.valueAxisProperties && null != this.valueAxisProperties.position ? this.valueAxisProperties.position : a.yAxisPosition.left), 
                d === a.axisType.both && (f.properties.axisType = e ? a.axisType.scalar : a.axisType.categorical), 
                e && (f.properties.start = this.categoryAxisProperties ? this.categoryAxisProperties.start : null, 
                f.properties.end = this.categoryAxisProperties ? this.categoryAxisProperties.end : null), 
                f.properties.showAxisTitle = this.categoryAxisProperties && null != this.categoryAxisProperties.showAxisTitle ? this.categoryAxisProperties.showAxisTitle : !1, 
                c.push(f), c.push({
                    selector: null,
                    properties: {
                        axisStyle: this.categoryAxisProperties && this.categoryAxisProperties.axisStyle ? this.categoryAxisProperties.axisStyle : a.axisStyle.showTitleOnly
                    },
                    objectName: "categoryAxis",
                    validValues: this.categoryAxisHasUnitType ? [ a.axisStyle.showTitleOnly, a.axisStyle.showUnitOnly, a.axisStyle.showBoth ] : [ a.axisStyle.showTitleOnly ]
                }), c;
            }, f.prototype.getValueAxisValues = function() {
                var b = 2 === this.layers.length && this.y2AxesRendered, c = [], d = {
                    selector: null,
                    properties: {},
                    objectName: "valueAxis"
                };
                if (d.properties.show = this.valueAxisProperties && null != this.valueAxisProperties.show ? this.valueAxisProperties.show : !0, 
                b && (d.properties.secShow = this.valueAxisProperties && null != this.valueAxisProperties.secShow ? this.valueAxisProperties.secShow : !0, 
                d.properties.secShow && (d.properties.axisLabel = "")), this.yAxisIsCategorical || (d.properties.position = this.valueAxisProperties && null != this.valueAxisProperties.position ? this.valueAxisProperties.position : a.yAxisPosition.left), 
                d.properties.start = this.valueAxisProperties ? this.valueAxisProperties.start : null, 
                d.properties.end = this.valueAxisProperties ? this.valueAxisProperties.end : null, 
                d.properties.showAxisTitle = this.valueAxisProperties && null != this.valueAxisProperties.showAxisTitle ? this.valueAxisProperties.showAxisTitle : !1, 
                c.push(d), c.push({
                    selector: null,
                    properties: {
                        axisStyle: this.valueAxisProperties && null != this.valueAxisProperties.axisStyle ? this.valueAxisProperties.axisStyle : a.axisStyle.showTitleOnly
                    },
                    objectName: "valueAxis",
                    validValues: this.valueAxisHasUnitType ? [ a.axisStyle.showTitleOnly, a.axisStyle.showUnitOnly, a.axisStyle.showBoth ] : [ a.axisStyle.showTitleOnly ]
                }), b && d.properties.secShow) {
                    var e = {
                        selector: null,
                        properties: {},
                        objectName: "valueAxis"
                    };
                    e.properties.secAxisLabel = "", e.properties.secPosition = this.valueAxisProperties && null != this.valueAxisProperties.secPosition ? this.valueAxisProperties.secPosition : a.yAxisPosition.right, 
                    e.properties.secStart = this.valueAxisProperties ? this.valueAxisProperties.secStart : null, 
                    e.properties.secEnd = this.valueAxisProperties ? this.valueAxisProperties.secEnd : null, 
                    e.properties.secShowAxisTitle = this.valueAxisProperties && null != this.valueAxisProperties.secShowAxisTitle ? this.valueAxisProperties.secShowAxisTitle : !1, 
                    c.push(e), c.push({
                        selector: null,
                        properties: {
                            secAxisStyle: this.valueAxisProperties && this.valueAxisProperties.secAxisStyle ? this.valueAxisProperties.secAxisStyle : a.axisStyle.showTitleOnly
                        },
                        objectName: "valueAxis",
                        validValues: this.secValueAxisHasUnitType ? [ a.axisStyle.showTitleOnly, a.axisStyle.showUnitOnly, a.axisStyle.showBoth ] : [ a.axisStyle.showTitleOnly ]
                    });
                }
                return c;
            }, f.prototype.findObjectWithProperty = function(a, b) {
                for (var c = 0, d = a.length; d > c; c++) {
                    var e = a[c];
                    if (void 0 !== e.properties[b]) return e;
                }
            }, f.prototype.onClearSelection = function() {
                if (this.hasSetData) for (var a = 0, b = this.layers.length; b > a; a++) {
                    var c = this.layers[a];
                    c.onClearSelection(), c.render(0);
                }
            }, f.prototype.createAndInitLayers = function(b) {
                var d, e = this;
                if (b && b.length > 0) {
                    var f = b[0].metadata;
                    f && (d = f.objects);
                }
                var g = this.layers;
                c(g, this.type, d, this.interactivityService, this.animator, this.isScrollable);
                var h = a.Prototype.inherit(this.visualInitOptions);
                h.svg = this.axisGraphicsContextScrollable, h.cartesianHost = {
                    updateLegend: function(a) {
                        return e.legend.drawLegend(a, e.currentViewport);
                    }
                };
                for (var i = 0, j = g.length; j > i; i++) g[i].init(h);
            }, f.prototype.renderLegend = function() {
                for (var a = this.layers, c = {
                    title: "",
                    dataPoints: []
                }, d = 0, e = a.length; e > d; d++) this.layerLegendData = a[d].calculateLegend(), 
                this.layerLegendData && (c.title = 0 === d ? this.layerLegendData.title || "" : c.title, 
                c.dataPoints = c.dataPoints.concat(this.layerLegendData.dataPoints || []), this.layerLegendData.grouped && (c.grouped = !0));
                var f = this.legendObjectProperties;
                if (f) {
                    b.LegendData.update(c, f);
                    var g = f[b.legendProps.position];
                    g && this.legend.changeOrientation(b.LegendPosition[g]);
                } else this.legend.changeOrientation(0);
                (1 === c.dataPoints.length && !c.grouped || this.hideLegends()) && (c.dataPoints = []), 
                this.legend.drawLegend(c, this.currentViewport);
            }, f.prototype.hideLegends = function() {
                return this.cartesianSmallViewPortProperties && this.cartesianSmallViewPortProperties.hideLegendOnSmallViewPort && this.currentViewport.height < this.cartesianSmallViewPortProperties.MinHeightLegendVisible ? !0 : !1;
            }, f.prototype.addUnitTypeToAxisLabel = function(b) {
                var c = b.x.formatter && b.x.formatter.displayUnit ? b.x.formatter.displayUnit.title : null;
                this.categoryAxisHasUnitType = null !== c, b.x.axisLabel && c && this.categoryAxisProperties && this.categoryAxisProperties.axisStyle && (this.categoryAxisProperties.axisStyle === a.axisStyle.showBoth ? b.x.axisLabel = b.x.axisLabel + " (" + c + ")" : this.categoryAxisProperties.axisStyle === a.axisStyle.showUnitOnly && (b.x.axisLabel = c)), 
                c = b.y1.formatter && b.y1.formatter.displayUnit ? b.y1.formatter.displayUnit.title : null, 
                this.valueAxisHasUnitType = null !== c, b.y1.axisLabel && c && this.valueAxisProperties && this.valueAxisProperties.axisStyle && (this.valueAxisProperties.axisStyle === a.axisStyle.showBoth ? b.y1.axisLabel = b.y1.axisLabel + " (" + c + ")" : this.valueAxisProperties.axisStyle === a.axisStyle.showUnitOnly && (b.y1.axisLabel = c)), 
                b.y2 && (c = b.y2.formatter && b.y2.formatter.displayUnit ? b.y2.formatter.displayUnit.title : null, 
                this.secValueAxisHasUnitType = null !== c, b.y2.axisLabel && c && this.valueAxisProperties && this.valueAxisProperties.secAxisStyle && (this.valueAxisProperties.secAxisStyle === a.axisStyle.showBoth ? b.y2.axisLabel = b.y2.axisLabel + " (" + c + ")" : this.valueAxisProperties.secAxisStyle === a.axisStyle.showUnitOnly && (b.y2.axisLabel = c)));
            }, f.prototype.shouldRenderSecondaryAxis = function(a) {
                return !this.valueAxisProperties || null == this.valueAxisProperties.secShow || this.valueAxisProperties.secShow ? !0 : !1;
            }, f.prototype.shouldRenderAxis = function(a) {
                return a ? (!a.isCategoryAxis || this.categoryAxisProperties && null != this.categoryAxisProperties.show && !this.categoryAxisProperties.show) && (a.isCategoryAxis || this.valueAxisProperties && null != this.valueAxisProperties.show && !this.valueAxisProperties.show) ? !1 : !0 : !1;
            }, f.prototype.render = function(c) {
                void 0 === c && (c = 0), this.duration = c;
                var d = this.legendMargins = this.legend.getMargins(), g = {
                    height: this.currentViewport.height - d.height,
                    width: this.currentViewport.width - d.width
                }, i = this.getMaxMarginFactor(), j = this.leftMarginLimit = g.width * i, k = this.bottomMarginLimit = Math.max(f.MinBottomMargin, g.height * i), l = this.margin;
                l.top = f.TopMargin, l.bottom = k, l.right = 0;
                var m = h(this.layers, g, l, this.categoryAxisProperties, this.valueAxisProperties);
                this.yAxisIsCategorical = m.y1.isCategoryAxis, this.hasCategoryAxis = this.yAxisIsCategorical ? m.y1 && m.y1.values.length > 0 : m.x && m.x.values.length > 0, 
                m.forceValueDomainStartToZero && (this.valueAxisProperties || (this.valueAxisProperties = {}), 
                b.CartesianHelper.forceValueDomainToZero(this.valueAxisProperties));
                var n, o, p = this.shouldRenderAxis(m.x), q = this.shouldRenderAxis(m.y1), r = this.shouldRenderSecondaryAxis(m.y2), s = g.width - (l.left + l.right), t = {
                    fontFamily: "wf_segoe-ui_normal",
                    fontSize: f.FontSizeString
                }, u = !1;
                this.isXScrollBarVisible = !1, this.isYScrollBarVisible = !1;
                var v = this.yAxisOrientation, w = v === a.yAxisPosition.right;
                if (this.layers && (this.layers[0].getVisualCategoryAxisIsScalar && (u = this.layers[0].getVisualCategoryAxisIsScalar()), 
                !u && this.isScrollable && this.layers[0].getPreferredPlotArea)) {
                    var x = this.scrollX ? m.x.categoryThickness : m.y1.categoryThickness, y = this.scrollX ? m.x.values.length : m.y1.values.length;
                    o = this.layers[0].getPreferredPlotArea(u, y, x), this.scrollX && o && o.width > g.width && (this.isXScrollBarVisible = !0, 
                    g.height -= f.ScrollBarWidth), this.scrollY && o && o.height > g.height && (this.isYScrollBarVisible = !0, 
                    g.width -= f.ScrollBarWidth, s = g.width - (l.left + l.right));
                }
                var z = this.needRotate = b.AxisHelper.LabelLayoutStrategy.willRotate(m.x, s, a.TextMeasurementService.measureSvgTextWidth, t), A = b.AxisHelper.getTickLabelMargins({
                    width: s,
                    height: g.height
                }, j, a.TextMeasurementService.measureSvgTextWidth, m.x, m.y1, z, k, t, m.y2, this.isXScrollBarVisible || this.isYScrollBarVisible, w, p, q, r), B = w ? A.yRight : A.yLeft, C = w ? A.yLeft : A.yRight, D = A.xMax;
                B += f.LeftPadding, e(this.layers) && (C += f.RightPadding), D += f.BottomPadding, 
                this.hideAxisLabels(d) && (m.x.axisLabel = null, m.y1.axisLabel = null, m.y2 && (m.y2.axisLabel = null)), 
                this.addUnitTypeToAxisLabel(m);
                var E = {
                    x: m.x.axisLabel,
                    y: m.y1.axisLabel,
                    y2: m.y2 ? m.y2.axisLabel : null
                }, F = null != E.x || null != E.y || null != E.y2;
                if (null != E.x && (D += f.XAxisLabelPadding), null != E.y && (B += f.YAxisLabelPadding), 
                null != E.y2 && (C += f.YAxisLabelPadding), (w && (B !== l.right || C !== l.left) || !w && (B !== l.left || C !== l.right) || D !== l.bottom || this.currentViewport.height !== g.height || this.isXScrollBarVisible || this.isYScrollBarVisible) && (l.left = w ? C : B, 
                l.right = w ? B : C, l.bottom = D, this.margin = l, m = h(this.layers, g, l, this.categoryAxisProperties, this.valueAxisProperties), 
                s = g.width - (l.left + l.right)), this.isXScrollBarVisible) {
                    n = m.x.scale;
                    var G = this.margin.left, H = g.height;
                    this.renderChartWithScrollBar(n, G, H, o.width, g, m, s, A, F, E);
                } else if (this.isYScrollBarVisible) {
                    n = m.y1.scale;
                    var G = g.width, H = this.margin.top;
                    this.renderChartWithScrollBar(n, G, H, o.height, g, m, s, A, F, E);
                } else this.renderChart(n, m, s, A, F, E, g);
                this.updateAxis(0, g), this.isXScrollBarVisible || this.isYScrollBarVisible || this.brushGraphicsContext.selectAll("rect").remove();
            }, f.prototype.hideAxisLabels = function(a) {
                return this.cartesianSmallViewPortProperties && this.cartesianSmallViewPortProperties.hideAxesOnSmallViewPort && this.currentViewport.height + a.height < this.cartesianSmallViewPortProperties.MinHeightAxesVisible && !this.visualInitOptions.interactivity.isInteractiveLegend ? !0 : !1;
            }, f.prototype.renderChartWithScrollBar = function(a, c, d, e, g, h, i, j, k, l) {
                var m, n, o = this, p = a, q = p.copy(), r = this.brush, s = this.margin.top, t = this.margin.left, u = this.margin.right, v = this.margin.bottom;
                this.isXScrollBarVisible ? (m = g.width - (t + u), n = this.getMinExtent(e, m), 
                q.rangeBands([ 0, m ]), r.x(q).extent([ 0, n ])) : (m = g.height - (s + v), n = this.getMinExtent(e, m), 
                q.rangeBands([ 0, m ]), r.y(q).extent([ 0, n ])), this.brushMinExtent = n;
                var w = e / m;
                r.on("brush", function() {
                    return window.requestAnimationFrame(function() {
                        return o.onBrushed(q, p, h, i, j, k, l, g, m);
                    });
                }).on("brushend", function() {
                    return o.onBrushEnd(n);
                });
                var x = this.brushContext = this.brushGraphicsContext.attr({
                    transform: b.SVGUtil.translate(c, d),
                    "drag-resize-disabled": "true"
                }).call(r);
                x.selectAll(".resize rect").remove();
                var y = this.setMinBrush(m, n, w);
                x.select(".background").style("cursor", "pointer").on("mousedown.brush", function() {
                    return y;
                }).on("touchstart.brush", function() {
                    return y;
                }), x.selectAll(".extent").style({
                    "fill-opacity": f.fillOpacity,
                    cursor: "hand"
                }), this.isXScrollBarVisible ? x.selectAll("rect").attr("height", f.ScrollBarWidth) : x.selectAll("rect").attr("width", f.ScrollBarWidth), 
                p && q && (p.domain(q.domain()), p.rangeBands([ 0, m ]), this.renderChart(p, h, i, j, k, l, g, q, r.extent()));
            }, f.prototype.getMinExtent = function(a, b) {
                return b * b / a;
            }, f.prototype.onBrushEnd = function(a) {
                var b = this.brushContext;
                this.isXScrollBarVisible ? b.select(".extent").attr("width", a) : b.select(".extent").attr("height", a);
            }, f.prototype.onBrushed = function(a, b, c, d, e, f, g, h, i) {
                var j = this.brush;
                if (b && a) {
                    b.domain(a.domain()), this.setBrushExtent(this.brush, i, this.brushMinExtent);
                    var k = j.extent();
                    this.renderChart(b, c, d, e, f, g, h, a, k, 0);
                }
            }, f.prototype.setMinBrush = function(a, b, c) {
                this.setBrushExtent(this.brush, a, b);
            }, f.prototype.setBrushExtent = function(a, b, c) {
                var d = a.extent(), e = d[1] - d[0];
                if (!(e === c && d[1] <= b && d[0] >= 0)) {
                    if (e > c) {
                        var f = (e - c) / 2;
                        d[0] += f, d[1] -= f;
                    } else if (c > e) {
                        var f = (c - e) / 2;
                        d[0] -= f, d[1] += f;
                    }
                    d[0] < 0 ? (d[0] = 0, d[1] = c) : d[0] > b - c && (d[0] = b - c, d[1] = b), a.extent(d);
                }
            }, f.prototype.getMaxMarginFactor = function() {
                return this.visualInitOptions.style.maxMarginFactor || f.MaxMarginFactor;
            }, f.prototype.renderChart = function(c, d, e, g, h, i, j, k, l, m) {
                void 0 === m && (m = this.duration);
                var n = this.bottomMarginLimit, o = this.leftMarginLimit, p = this.needRotate, q = this.layers;
                if (k) {
                    var r, s = [], t = l[0], u = l[1], v = k(1) - k(0), w = Math.floor(t / v), x = Math.ceil((u - t) / v), y = w + x;
                    if (r = c.domain().slice(w, y), r && r.length > 0) {
                        for (var z = 0; z < q.length; z++) s[z] = q[z].setFilteredData(r[0], r[r.length - 1] + 1);
                        c.domain(r);
                        var A, B = b.AxisHelper.getCategoryValueType(s[0].categoryMetadata), C = b.AxisHelper.getRecommendedTickValuesForAnOrdinalRange(x, c.domain()), D = new b.DataWrapper(s[0], !1), E = function(a, b) {
                            return D.lookupXValue(a - w, b);
                        };
                        A = this.isXScrollBarVisible ? d.x : d.y1, A.axis.scale(c), A.scale(c), A.axis.ticks(x), 
                        A.axis.tickValues(r), A.values = b.AxisHelper.formatAxisTickValues(A.axis, C, A.formatter, B, !1, E);
                    }
                }
                if (this.shouldRenderAxis(d.x)) {
                    d.x.axis.orient("bottom"), p && d.x.axis.tickPadding(f.TickPaddingRotatedX);
                    var F = this.xAxisGraphicsContext;
                    m ? F.transition().duration(m).call(d.x.axis) : F.call(d.x.axis), F.selectAll("text").call(b.AxisHelper.LabelLayoutStrategy.rotate, e, n, a.TextMeasurementService.svgEllipsis, p, n === g.xMax, d.x, this.margin, this.isXScrollBarVisible || this.isYScrollBarVisible);
                } else this.xAxisGraphicsContext.selectAll("*").remove();
                if (this.shouldRenderAxis(d.y1)) {
                    var G = this.yAxisOrientation, H = G === a.yAxisPosition.right;
                    d.y1.axis.tickSize(e).tickPadding(f.TickPaddingY).orient(G.toLowerCase());
                    var I = this.y1AxisGraphicsContext;
                    m ? I.transition().duration(m).call(d.y1.axis) : I.call(d.y1.axis), !d.y2 || this.valueAxisProperties && null != this.valueAxisProperties.secShow && !this.valueAxisProperties.secShow ? this.y2AxisGraphicsContext.selectAll("*").remove() : (d.y2.axis.tickPadding(f.TickPaddingY).orient(H ? a.yAxisPosition.left.toLowerCase() : a.yAxisPosition.right.toLowerCase()), 
                    m ? this.y2AxisGraphicsContext.transition().duration(m).call(d.y2.axis) : this.y2AxisGraphicsContext.call(d.y2.axis), 
                    this.y2AxesRendered = !0), g.yLeft >= o && I.selectAll("text").call(b.AxisHelper.LabelLayoutStrategy.clip, o - f.LeftPadding, a.TextMeasurementService.svgEllipsis);
                } else this.y1AxisGraphicsContext.selectAll("*").remove(), this.y2AxisGraphicsContext.selectAll("*").remove();
                if (h) {
                    var J = this.categoryAxisProperties && null != this.categoryAxisProperties.showAxisTitle && this.categoryAxisProperties.showAxisTitle === !1, K = this.valueAxisProperties && null != this.valueAxisProperties.showAxisTitle && this.valueAxisProperties.showAxisTitle === !1, L = this.valueAxisProperties && null != this.valueAxisProperties.secShowAxisTitle && this.valueAxisProperties.secShowAxisTitle === !1;
                    this.renderAxesLabels(i, this.legendMargins.height, j, J, K, L);
                } else this.axisGraphicsContext.selectAll(".xAxisLabel").remove(), this.axisGraphicsContext.selectAll(".yAxisLabel").remove();
                for (var z = 0, M = q.length; M > z; z++) q[z].render(m);
            }, f.getPreferredPlotArea = function(a, b, c, d, e) {
                var g = {
                    height: c.height,
                    width: c.width
                };
                if (!e && d) {
                    var h = f.getPreferredCategorySpan(a, b);
                    g.width = Math.max(h, c.width);
                }
                return g;
            }, f.getPreferredCategorySpan = function(a, b) {
                return b * (a + 2 * f.OuterPaddingRatio);
            }, f.getLayout = function(a, b) {
                var c = b.categoryCount, d = b.availableWidth, e = b.domain, g = !!b.isScalar, h = !!b.isScrollable, i = f.getCategoryThickness(a ? a.series : null, c, d, e, g), j = i * f.OuterPaddingRatio * 2, k = Math.round((d - j) / i), l = Math.min(k, c), m = f.OuterPaddingRatio;
                if (!g) {
                    var n = (d - i * l) / 2;
                    m = n / i;
                }
                return !g && h && (l = c), {
                    categoryCount: l,
                    categoryThickness: i,
                    outerPaddingRatio: m,
                    isScalar: g
                };
            }, f.getCategoryThickness = function(a, b, c, d, e) {
                var g;
                if (2 > b) g = c * (1 - f.OuterPaddingRatio); else if (e && d && d.length > 1) {
                    var h = f.getMinInterval(a), i = d[d.length - 1] - d[0], j = h / (i + h * f.OuterPaddingRatio * 2);
                    g = c * j, g = Math.max(g, f.MinScalarRectThickness);
                } else g = c / (b + 2 * f.OuterPaddingRatio), g = Math.max(g, f.MinOrdinalRectThickness);
                var k = c / (3 + 2 * f.OuterPaddingRatio);
                return !e && b >= 3 ? Math.max(Math.min(g, k), f.MinOrdinalRectThickness) : Math.min(g, k);
            }, f.getMinInterval = function(a) {
                var b = Number.MAX_VALUE;
                if (a.length > 0) for (var c = a[0].data.filter(function(a) {
                    return !a.highlight;
                }), d = 0, e = c.length - 1; e > d; d++) b = Math.min(b, Math.abs(c[d + 1].categoryValue - c[d].categoryValue));
                return b;
            }, f.MinOrdinalRectThickness = 20, f.MinScalarRectThickness = 2, f.OuterPaddingRatio = .4, 
            f.InnerPaddingRatio = .2, f.ClassName = "cartesianChart", f.AxisGraphicsContextClassName = "axisGraphicsContext", 
            f.MaxMarginFactor = .18, f.MinBottomMargin = 25, f.TopMargin = 8, f.LeftPadding = 10, 
            f.RightPadding = 15, f.BottomPadding = 12, f.YAxisLabelPadding = 20, f.XAxisLabelPadding = 18, 
            f.TickPaddingY = 10, f.TickPaddingRotatedX = 5, f.FontSize = 11, f.FontSizeString = b.SVGUtil.convertToPixelString(f.FontSize), 
            f.ScrollBarWidth = 10, f.fillOpacity = .125, f;
        }();
        b.CartesianChart = l;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(b) {
            return void 0 === b && (b = !1), {
                dataRoles: [ {
                    name: "Category",
                    kind: 0,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Axis")
                }, {
                    name: "Series",
                    kind: 0,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
                }, {
                    name: "Y",
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Value")
                }, {
                    name: "Gradient",
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Gradient")
                } ],
                objects: {
                    general: {
                        displayName: a.data.createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            }
                        }
                    },
                    legend: {
                        displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            position: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                                type: {
                                    formatting: {
                                        legendPosition: !0
                                    }
                                }
                            },
                            showTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                                type: {
                                    bool: !0
                                }
                            },
                            titleText: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                                type: {
                                    text: !0
                                }
                            }
                        }
                    },
                    categoryAxis: {
                        displayName: b ? a.data.createDisplayNameGetter("Visual_YAxis") : a.data.createDisplayNameGetter("Visual_XAxis"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            position: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                                type: {
                                    formatting: {
                                        yAxisPosition: !0
                                    }
                                }
                            },
                            start: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                                type: {
                                    numeric: !0
                                }
                            },
                            end: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                                type: {
                                    numeric: !0
                                }
                            },
                            axisType: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Type"),
                                type: {
                                    formatting: {
                                        axisType: !0
                                    }
                                }
                            },
                            showAxisTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                                type: {
                                    formatting: {
                                        axisStyle: !0
                                    }
                                }
                            }
                        }
                    },
                    valueAxis: {
                        displayName: b ? a.data.createDisplayNameGetter("Visual_XAxis") : a.data.createDisplayNameGetter("Visual_YAxis"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            position: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                                type: {
                                    formatting: {
                                        yAxisPosition: !0
                                    }
                                }
                            },
                            start: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                                type: {
                                    numeric: !0
                                }
                            },
                            end: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                                type: {
                                    numeric: !0
                                }
                            },
                            intersection: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Intersection"),
                                type: {
                                    numeric: !0
                                }
                            },
                            showAxisTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                                type: {
                                    formatting: {
                                        axisStyle: !0
                                    }
                                }
                            }
                        }
                    },
                    dataPoint: {
                        displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                        properties: {
                            defaultColor: {
                                displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            showAllDataPoints: {
                                displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                                type: {
                                    bool: !0
                                }
                            },
                            fill: {
                                displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            fillRule: {
                                displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                                type: {
                                    fillRule: {}
                                },
                                rule: {
                                    inputRole: "Gradient",
                                    output: {
                                        property: "fill",
                                        selector: [ "Category" ]
                                    }
                                }
                            }
                        }
                    },
                    labels: {
                        displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            color: {
                                displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            labelDisplayUnits: {
                                displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                                type: {
                                    formatting: {
                                        labelDisplayUnits: !0
                                    }
                                }
                            },
                            labelPrecision: {
                                displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                                type: {
                                    numeric: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Series: {
                            max: 0
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Category: {
                            max: 1
                        },
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        },
                        Gradient: {
                            max: 0
                        }
                    }, {
                        Category: {
                            max: 1
                        },
                        Series: {
                            max: 0
                        },
                        Y: {
                            min: 0,
                            max: 1
                        },
                        Gradient: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            "for": {
                                "in": "Category"
                            },
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    "for": {
                                        "in": "Y"
                                    }
                                }, {
                                    bind: {
                                        to: "Gradient"
                                    }
                                } ],
                                dataReductionAlgorithm: {
                                    top: {}
                                }
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                } ],
                supportsHighlight: !0,
                sorting: {
                    "default": {}
                }
            };
        }
        b.getColumnChartCapabilities = c, b.columnChartProps = {
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            },
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            categoryAxis: {
                axisType: {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = jsCommon.EnumExtensions, d = jsCommon.ArrayExtensions, e = 2, f = 4, g = 8, h = 16, i = 32 | h;
        !function(a) {
            a[a.clusteredBar = e | g] = "clusteredBar", a[a.clusteredColumn = f | g] = "clusteredColumn", 
            a[a.hundredPercentStackedBar = e | i] = "hundredPercentStackedBar", a[a.hundredPercentStackedColumn = f | i] = "hundredPercentStackedColumn", 
            a[a.stackedBar = e | h] = "stackedBar", a[a.stackedColumn = f | h] = "stackedColumn";
        }(b.ColumnChartType || (b.ColumnChartType = {}));
        var j = b.ColumnChartType, k = {
            category: "Category",
            series: "Series",
            y: "Y"
        }, l = function() {
            function g(a) {
                var b = a.chartType;
                this.chartType = b, this.categoryAxisType = null, this.animator = a.animator, this.isScrollable = a.isScrollable, 
                this.interactivityService = a.interactivityService;
            }
            return g.customizeQuery = function(a) {
                var c = a.dataViewMappings[0];
                if (c && c.categorical && c.categorical.categories) {
                    var e = c.categorical.categories, f = e["for"]["in"].items;
                    if (!d.isUndefinedOrEmpty(f)) {
                        var g, h = f[0].type;
                        c.metadata && (g = c.metadata.objects), b.CartesianChart.getIsScalar(g, b.columnChartProps.categoryAxis.axisType, h) && (e.dataReductionAlgorithm = {
                            sample: {}
                        });
                    }
                }
            }, g.getSortableRoles = function(a) {
                var c = a.dataViewMappings[0];
                if (!c || !c.categorical || !c.categorical.categories) return null;
                var e = c.categorical.categories, f = e["for"]["in"].items;
                if (!d.isUndefinedOrEmpty(f)) {
                    var g, h = f[0].type;
                    if (c.metadata && (g = c.metadata.objects), !b.CartesianChart.getIsScalar(g, b.columnChartProps.categoryAxis.axisType, h)) return [ "Category", "Y" ];
                }
                return null;
            }, g.prototype.updateVisualMetadata = function(a, b, c) {
                this.xAxisProperties = a, this.yAxisProperties = b, this.margin = c;
            }, g.prototype.init = function(a) {
                this.svg = a.svg, this.clearCatcher = this.svg.select(".clearCatcher"), this.mainGraphicsContext = this.svg.append("g").classed("columnChartMainGraphicsContext", !0), 
                this.style = a.style, this.currentViewport = a.viewport, this.hostService = a.host, 
                this.interactivity = a.interactivity, this.colors = this.style.colorPalette.dataColors, 
                this.cartesianVisualHost = a.cartesianHost, this.options = a, this.supportsOverflow = !c.hasFlag(this.chartType, h);
                var d = this.element = a.element;
                switch (d.addClass(g.ColumnChartClassName), this.chartType) {
                  case j.clusteredBar:
                    this.columnChart = new b.ClusteredBarChartStrategy();
                    break;

                  case j.clusteredColumn:
                    this.columnChart = new b.ClusteredColumnChartStrategy();
                    break;

                  case j.stackedBar:
                  case j.hundredPercentStackedBar:
                    this.columnChart = new b.StackedBarChartStrategy();
                    break;

                  case j.stackedColumn:
                  case j.hundredPercentStackedColumn:
                  default:
                    this.columnChart = new b.StackedColumnChartStrategy();
                }
            }, g.prototype.getCategoryLayout = function(a, d) {
                var f;
                f = c.hasFlag(this.chartType, e) ? this.currentViewport.height - (this.margin.top + this.margin.bottom) : this.currentViewport.width - (this.margin.left + this.margin.right);
                var g = this.data ? this.data.categoryMetadata : void 0, h = b.AxisHelper.getCategoryValueType(g), i = this.data ? this.data.scalarCategoryAxis : !1, j = b.AxisHelper.createDomain(this.data.series, h, i, d.forcedXDomain);
                return b.CartesianChart.getLayout(this.data, {
                    availableWidth: f,
                    categoryCount: a,
                    domain: j,
                    isScalar: i,
                    isScrollable: this.isScrollable
                });
            }, g.converter = function(d, e, h, i, j, l, n) {
                void 0 === h && (h = !1), void 0 === i && (i = !1), void 0 === j && (j = !1), void 0 === l && (l = null);
                var o = b.CartesianHelper.getCategoryAxisProperties(l), p = b.CartesianHelper.getValueAxisProperties(l);
                i = b.CartesianHelper.isScalar(i, o), d = b.ColumnUtil.applyUserMinMax(i, d, o);
                var q = new m(d), r = b.converterHelper.getPivotedCategories(d, b.columnChartProps.general.formatString), s = r.categories, t = r.categoryFormatter, u = r.categoryIdentities, v = d.categories && d.categories.length > 0 ? d.categories[0].source : void 0, w = b.dataLabelUtils.getDefaultColumnLabelSettings(h);
                if (l && l.objects) {
                    var x = l.objects, y = a.DataViewObjects.getFillColor(x, b.columnChartProps.dataPoint.defaultColor), z = a.DataViewObjects.getValue(x, b.columnChartProps.dataPoint.showAllDataPoints), A = x.labels;
                    A && (void 0 !== A.show && (w.show = A.show), void 0 !== A.color && (w.labelColor = A.color.solid.color, 
                    w.overrideDefaultColor = !0), void 0 !== A.labelDisplayUnits && (w.displayUnits = A.labelDisplayUnits), 
                    void 0 !== A.labelPrecision && (w.precision = A.labelPrecision >= 0 ? A.labelPrecision : 0)), 
                    w.formatterOptions = b.dataLabelUtils.getFormatterOptionsColumn(l.columns);
                }
                for (var B = q.getLegend(e, y), C = B.legend.dataPoints, D = B.seriesSources, E = g.createDataPoints(d, s, u, C, B.seriesObjects, q, w, h, i, j, b.converterHelper.categoryIsAlsoSeriesRole(d, k.series, k.category), r.categoryObjects, y, n), F = E.series, G = [], H = 0, I = C.length; I > H; H++) G.push(D[H]);
                var J = b.converterHelper.createAxesLabels(o, p, v, G);
                if (!c.hasFlag(n, f)) {
                    var K = J.xAxisLabel;
                    J.xAxisLabel = J.yAxisLabel, J.yAxisLabel = K;
                }
                return {
                    categories: s,
                    categoryFormatter: t,
                    series: F,
                    valuesMetadata: G,
                    legendData: B.legend,
                    hasHighlights: E.hasHighlights,
                    categoryMetadata: v,
                    scalarCategoryAxis: i,
                    labelSettings: w,
                    axesLabels: {
                        x: J.xAxisLabel,
                        y: J.yAxisLabel
                    },
                    hasDynamicSeries: E.hasDynamicSeries,
                    defaultDataPointColor: y,
                    showAllDataPoints: z,
                    hasSelection: !1
                };
            }, g.createDataPoints = function(a, d, e, f, i, j, k, l, m, n, o, p, q, r) {
                void 0 === l && (l = !1), void 0 === m && (m = !1), void 0 === n && (n = !1);
                var s = a && a.values ? a.values.grouped() : void 0, t = d.length, u = f.length, v = [];
                if (1 > u || 1 > t) return {
                    series: v,
                    hasHighlights: !1,
                    hasDynamicSeries: !1
                };
                for (var w = a.categories, x = w && w.length > 0 ? w[0].source : null, y = b.AxisHelper.getCategoryValueType(x), z = b.AxisHelper.isDateTime(y), A = [], B = [], C = [], D = [], E = !(!a.values || !a.values.source), F = !1, G = j.hasHighlightValues(0), H = 0; u > H; H++) {
                    for (var I = [], J = [], K = 0; t > K; K++) {
                        var L = j.getValueBySeriesAndCategory(H, K);
                        if (I[K] = L, G) {
                            var M = j.getHighlightBySeriesAndCategory(H, K);
                            J[K] = M, L >= 0 && M >= 0 && L >= M || 0 >= L && 0 >= M && M >= L || (F = !0);
                        }
                    }
                    C.push(I), G && D.push(J);
                }
                F && !n && (F = !1, G = !1, C = D);
                for (var N = p, O = b.columnChartProps.general.formatString, H = 0; u > H; H++) {
                    var P = [], Q = f[H];
                    v.push({
                        displayName: Q.label,
                        key: "series" + H,
                        index: H,
                        data: P,
                        identity: Q.identity
                    }), u > 1 && (N = i[H]);
                    for (var K = 0; t > K; K++) {
                        0 === H && (A.push(0), B.push(0));
                        var L = b.AxisHelper.normalizeNonFiniteNumber(C[H][K]);
                        if (!(null == L && H > 0)) {
                            var R = L, S = d[K];
                            if (z && S && (S = S.getTime()), !m || null != S && !isNaN(S)) {
                                var T;
                                l && (T = b.StackedUtil.getStackedMultiplier(a, K, u, t, j));
                                var U = L, V = 0 > L;
                                T && (L *= V ? T.neg : T.pos);
                                var W, X = Math.abs(L);
                                V ? (W = B[K], isNaN(X) || (B[K] -= X)) : (isNaN(X) || (A[K] += X), W = A[K]);
                                var Y = b.SelectionId.createWithIdsAndMeasure(e ? e[K] : void 0, E ? s[H].identity : void 0, j.getMeasureNameByIndex(H)), Z = d[K], $ = g.getDataPointColor(Q, K, N), _ = b.TooltipBuilder.createTooltipInfo(O, a.categories, Z, a.values, R, null, H), aa = $;
                                if (c.hasFlag(r, h)) {
                                    var ba = this.getStackedLabelColor(V, H, u, K, C);
                                    aa = ba || H === u - 1 && !V ? $ : "#FFFFFF";
                                }
                                var ca = {
                                    categoryValue: S,
                                    value: L,
                                    position: W,
                                    valueAbsolute: X,
                                    valueOriginal: U,
                                    seriesIndex: H,
                                    categoryIndex: K,
                                    color: $,
                                    selected: !1,
                                    originalValue: L,
                                    originalPosition: W,
                                    originalValueAbsolute: X,
                                    identity: Y,
                                    key: Y.getKey(),
                                    tooltipInfo: _,
                                    labelFill: k.overrideDefaultColor || l ? k.labelColor : aa,
                                    lastSeries: ba,
                                    chartType: r
                                };
                                if (P.push(ca), G) {
                                    var da = D[H][K], ea = da, fa = !0;
                                    null === da && (da = 0, fa = !1), l && (da *= T.pos);
                                    var ga = Math.abs(da), ha = W;
                                    da > 0 ? ha -= X - ga : 0 === da && L > 0 && (ha -= X);
                                    var ia = b.SelectionId.createWithHighlight(Y), Z = d[K], ja = fa ? da : void 0, _ = b.TooltipBuilder.createTooltipInfo(O, a.categories, Z, a.values, R, null, H, ja);
                                    fa && (ca.tooltipInfo = _);
                                    var ka = {
                                        categoryValue: S,
                                        value: da,
                                        position: ha,
                                        valueAbsolute: ga,
                                        valueOriginal: ea,
                                        seriesIndex: H,
                                        categoryIndex: K,
                                        color: $,
                                        selected: !1,
                                        highlight: !0,
                                        originalValue: L,
                                        originalPosition: W,
                                        originalValueAbsolute: X,
                                        drawThinner: F,
                                        identity: ia,
                                        key: ia.getKey(),
                                        tooltipInfo: _,
                                        labelFill: k.overrideDefaultColor || l ? k.labelColor : aa,
                                        lastSeries: ba,
                                        chartType: r
                                    };
                                    P.push(ka);
                                }
                            }
                        }
                    }
                }
                return {
                    series: v,
                    hasHighlights: G,
                    hasDynamicSeries: E
                };
            }, g.getDataPointColor = function(c, d, e) {
                if (e) {
                    var f = a.DataViewObjects.getFillColor(e[d], b.columnChartProps.dataPoint.fill);
                    if (f) return f;
                }
                return c.color;
            }, g.getStackedLabelColor = function(a, c, d, e, f) {
                for (var g = !(a && c === d - 1 && 1 !== d), h = c + 1; d > h; h++) {
                    var i = b.AxisHelper.normalizeNonFiniteNumber(f[h][e]);
                    if (null !== i && ((!a || a && 0 === c) && i > 0 || a && 0 !== c)) {
                        g = !1;
                        break;
                    }
                }
                return g;
            }, g.sliceSeries = function(b, c, d) {
                void 0 === d && (d = 0);
                var e = [];
                if (b && b.length > 0) for (var f = 0, g = b.length; g > f; f++) {
                    var h = e[f] = a.Prototype.inherit(b[f]);
                    h.data = b[f].data.filter(function(a) {
                        return a.categoryIndex >= d && a.categoryIndex < c;
                    });
                }
                return e;
            }, g.getForcedTickValues = function(a, b, c) {
                if (1 >= c) return [];
                for (var d = [], e = (b - a) / (c - 1), f = 0; c - 1 > f; f++) d.push(a + f * e);
                return d.push(b), -1 === d.indexOf(0) && d.push(0), d;
            }, g.getTickInterval = function(a) {
                return 0 === a.length ? 0 : 1 === a.length ? a[0] : (a.sort(function(a, b) {
                    return a - b;
                }), a[1] - a[0]);
            }, g.prototype.setData = function(a) {
                var d = c.hasFlag(this.chartType, i);
                if (this.data = {
                    categories: [],
                    categoryFormatter: null,
                    series: [],
                    valuesMetadata: [],
                    legendData: null,
                    hasHighlights: !1,
                    categoryMetadata: null,
                    scalarCategoryAxis: !1,
                    labelSettings: b.dataLabelUtils.getDefaultColumnLabelSettings(d),
                    axesLabels: {
                        x: null,
                        y: null
                    },
                    hasDynamicSeries: !1,
                    defaultDataPointColor: null,
                    hasSelection: !1
                }, a.length > 0) {
                    var e = a[0];
                    if (e && e.categorical) {
                        var f = this.dataViewCat = e.categorical, h = f.categories, j = h && h.length > 0 ? h[0].source : null, k = b.AxisHelper.getCategoryValueType(j);
                        this.data = g.converter(f, this.colors, d, b.CartesianChart.getIsScalar(e.metadata ? e.metadata.objects : null, b.columnChartProps.categoryAxis.axisType, k), this.supportsOverflow, e.metadata, this.chartType);
                        for (var l = this.data.series, m = 0, n = l.length; n > m; m++) {
                            var o = l[m];
                            this.interactivityService && this.interactivityService.applySelectionStateToData(o.data) && (this.data.hasSelection = !0);
                        }
                    }
                }
            }, g.prototype.calculateLegend = function() {
                if (this.interactivity && this.interactivity.isInteractiveLegend) return this.createInteractiveLegendDataPoints(0);
                var a = this.data ? this.data.legendData : null, b = a ? a.dataPoints : [];
                return d.isUndefinedOrEmpty(b) ? null : a;
            }, g.prototype.hasLegend = function() {
                return this.data && (this.data.hasDynamicSeries || this.data.series && this.data.series.length > 1);
            }, g.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "dataPoint":
                    if (!b.GradientUtils.hasGradientRole(this.dataViewCat)) return this.enumerateDataPoints();
                    break;

                  case "labels":
                    return c.hasFlag(this.chartType, i) ? b.dataLabelUtils.enumerateDataLabels(this.data.labelSettings, !1) : b.dataLabelUtils.enumerateDataLabels(this.data.labelSettings, !1, !0, !0);
                }
                return null;
            }, g.prototype.enumerateDataPoints = function() {
                var a = this.data;
                if (a) {
                    var c = [], d = a.series.length;
                    if (0 === d) return c;
                    var e = !a.hasDynamicSeries && d > 1;
                    if (!e) {
                        c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                defaultColor: {
                                    solid: {
                                        color: a.defaultDataPointColor || this.colors.getColor(0).value
                                    }
                                }
                            }
                        });
                        var f = void 0 !== a.showAllDataPoints ? a.showAllDataPoints : d > 1;
                        c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                showAllDataPoints: f
                            }
                        });
                    }
                    if (a.hasDynamicSeries || d > 1) for (var g = 0; d > g; g++) {
                        var h = a.series[g];
                        c.push({
                            objectName: "dataPoint",
                            displayName: h.displayName,
                            selector: b.ColorHelper.normalizeSelector(h.identity.getSelector()),
                            properties: {
                                fill: {
                                    solid: {
                                        color: h.data[0].color
                                    }
                                }
                            }
                        });
                    } else for (var i = a.series[0].data, j = a.categoryFormatter, g = 0; g < i.length; g++) {
                        var k = i[g], l = a.categories[g];
                        c.push({
                            objectName: "dataPoint",
                            displayName: j ? j.format(l) : l,
                            selector: b.ColorHelper.normalizeSelector(k.identity.getSelector(), !0),
                            properties: {
                                fill: {
                                    solid: {
                                        color: k.color
                                    }
                                }
                            }
                        });
                    }
                    return c;
                }
            }, g.prototype.calculateAxesProperties = function(d) {
                var f = this.data;
                this.currentViewport = d.viewport;
                var h = this.margin = d.margin, j = f && f.categories ? f.categories.length : 0, k = f ? this.getCategoryLayout(j, d) : {
                    categoryCount: 0,
                    categoryThickness: b.CartesianChart.MinOrdinalRectThickness,
                    outerPaddingRatio: b.CartesianChart.OuterPaddingRatio,
                    isScalar: !1
                };
                if (this.categoryAxisType = k.isScalar ? a.axisType.scalar : null, f && !k.isScalar && !this.isScrollable) {
                    var l = Math.min(j, k.categoryCount);
                    l !== j && (f = a.Prototype.inherit(f), f.series = g.sliceSeries(f.series, l), f.categories = f.categories.slice(0, l));
                }
                this.columnChart.setData(f);
                var m = this.getPreferredPlotArea(k.isScalar, k.categoryCount, k.categoryThickness);
                m.width === this.currentViewport.width && (m.width -= h.left + h.right), m.height -= h.top + h.bottom;
                var n = c.hasFlag(this.chartType, i), o = {
                    height: m.height,
                    width: m.width,
                    duration: 0,
                    hostService: this.hostService,
                    mainGraphicsContext: this.mainGraphicsContext,
                    margin: this.margin,
                    layout: k,
                    animator: this.animator,
                    interactivityService: this.interactivityService,
                    viewportHeight: this.currentViewport.height - (h.top + h.bottom),
                    is100Pct: n
                };
                if (this.ApplyInteractivity(o), this.columnChart.setupVisualProps(o), c.hasFlag(this.chartType, e)) {
                    var p = d.forcedXDomain;
                    d.forcedXDomain = d.forcedYDomain, d.forcedYDomain = p;
                }
                return this.xAxisProperties = this.columnChart.setXScale(n, d.forcedTickCount, d.forcedXDomain), 
                this.yAxisProperties = this.columnChart.setYScale(n, d.forcedTickCount, d.forcedYDomain), 
                this.xAxisProperties.axisLabel = d.showXLabel ? f.axesLabels.x : null, this.yAxisProperties.axisLabel = d.showYLabel ? f.axesLabels.y : null, 
                [ this.xAxisProperties, this.yAxisProperties ];
            }, g.prototype.getPreferredPlotArea = function(a, d, f) {
                var g = {
                    height: this.currentViewport.height,
                    width: this.currentViewport.width
                };
                if (this.isScrollable && !a) {
                    var h = b.CartesianChart.getPreferredCategorySpan(d, f);
                    c.hasFlag(this.chartType, e) ? g.height = Math.max(h, g.height) : g.width = Math.max(h, g.width);
                }
                return g;
            }, g.prototype.ApplyInteractivity = function(a) {
                var b = this, c = this.interactivity;
                if (c && (c.dragDataPoint && (a.onDragStart = function(a) {
                    a.identity && b.hostService.onDragStart({
                        event: d3.event,
                        data: {
                            data: a.identity.getSelector()
                        }
                    });
                }), c.isInteractiveLegend)) {
                    var d = function() {
                        var a = d3.mouse(b.mainGraphicsContext[0][0]), c = a[0], d = a[1], e = b.columnChart.getClosestColumnIndex(c, d);
                        b.selectColumn(e);
                    };
                    this.svg.on("click", d), d3.select(this.element.get(0)).on("click", d);
                    var e = d3.behavior.drag().origin(Object).on("drag", d);
                    this.svg.call(e), d3.select(this.element.get(0)).call(e);
                }
            }, g.prototype.selectColumn = function(a, b) {
                if (void 0 === b && (b = !1), b || this.lastInteractiveSelectedColumnIndex !== a) {
                    var c = this.createInteractiveLegendDataPoints(a), d = c.dataPoints;
                    this.cartesianVisualHost.updateLegend(c), d.length > 0 && this.columnChart.selectColumn(a, this.lastInteractiveSelectedColumnIndex), 
                    this.lastInteractiveSelectedColumnIndex = a;
                }
            }, g.prototype.createInteractiveLegendDataPoints = function(a) {
                var c = this.data;
                if (!c || d.isUndefinedOrEmpty(c.series)) return {
                    dataPoints: []
                };
                for (var e = b.columnChartProps.general.formatString, f = [], g = c.categories && c.categories[a], h = c.series, i = 0, j = h.length; j > i; i++) {
                    var k = c.series[i].data[a], l = k && k.valueOriginal, m = c.valuesMetadata[i], n = b.converterHelper.getFormattedLegendLabel(m, this.dataViewCat.values, e);
                    f.push({
                        color: k.color,
                        icon: 0,
                        label: n,
                        category: c.categoryFormatter ? c.categoryFormatter.format(g) : g,
                        measure: b.valueFormatter.format(l, b.valueFormatter.getFormatString(m, e)),
                        identity: b.SelectionId.createNull(),
                        selected: !1
                    });
                }
                return {
                    dataPoints: f
                };
            }, g.prototype.overrideXScale = function(a) {
                this.xAxisProperties = a;
            }, g.prototype.render = function(a) {
                var c = this.columnChart.drawColumns(!!a), d = this.data;
                if (b.TooltipManager.addTooltip(c, function(a) {
                    return a.data.tooltipInfo;
                }), this.interactivityService) {
                    for (var e = [], f = 0, g = d.series.length; g > f; f++) e = e.concat(d.series[f].data);
                    var h = {
                        bars: c,
                        datapoints: e,
                        clearCatcher: this.clearCatcher,
                        hasHighlights: d.hasHighlights,
                        mainGraphicsContext: this.mainGraphicsContext
                    };
                    this.interactivityService.apply(this, h);
                }
                this.interactivity && this.interactivity.isInteractiveLegend && this.data.series.length > 0 && this.selectColumn(0, !0), 
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, g.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, g.prototype.accept = function(a, b) {
                a.visitColumnChart(b);
            }, g.prototype.getVisualCategoryAxisIsScalar = function() {
                return this.data ? this.data.scalarCategoryAxis : !1;
            }, g.prototype.getSupportedCategoryAxisType = function() {
                var c = this.data ? this.data.categoryMetadata : void 0, d = b.AxisHelper.getCategoryValueType(c), e = b.AxisHelper.isOrdinal(d);
                return e ? a.axisType.categorical : a.axisType.both;
            }, g.prototype.setFilteredData = function(b, c) {
                var d = a.Prototype.inherit(this.data);
                return d.series = g.sliceSeries(d.series, c, b), d.categories = d.categories.slice(b, c), 
                this.columnChart.setData(d), d;
            }, g.ColumnChartClassName = "columnChart", g.SeriesClasses = {
                "class": "series",
                selector: ".series"
            }, g;
        }();
        b.ColumnChart = l;
        var m = function() {
            function a(a) {
                this.dataView = a;
            }
            return a.prototype.getLegend = function(a, c) {
                var d = [], e = [], f = [], g = !1, h = new b.ColorHelper(a, b.columnChartProps.dataPoint.fill, c);
                if (this.dataView && this.dataView.values) {
                    for (var i = this.dataView.values, j = i.grouped(), k = !(!i || !i.source), l = b.columnChartProps.general.formatString, m = 0, n = j.length; n > m; m++) for (var o = j[m], p = o.objects, q = o.values, r = 0, s = q.length; s > r; r++) {
                        var t = q[r], u = t.source;
                        if (!b.DataRoleHelper.hasRole(u, "Gradient") || b.DataRoleHelper.hasRole(u, "Y")) {
                            e.push(u), f.push(t.objects);
                            var v = t.identity ? b.SelectionId.createWithIdAndMeasure(t.identity, u.queryName) : b.SelectionId.createWithMeasure(this.getMeasureNameByIndex(r)), w = b.converterHelper.getFormattedLegendLabel(u, i, l), x = k ? h.getColorForSeriesValue(p || u.objects, i.identityFields, u.groupName) : h.getColorForMeasure(p || u.objects, u.queryName);
                            d.push({
                                icon: 0,
                                color: x,
                                label: w,
                                identity: v,
                                selected: !1
                            }), t.identity && void 0 !== u.groupName && (g = !0);
                        }
                    }
                    var y = this.dataView.values, z = y && y.source ? y.source.displayName : "";
                }
                var A = {
                    title: z,
                    dataPoints: d,
                    grouped: g
                };
                return {
                    legend: A,
                    seriesSources: e,
                    seriesObjects: f
                };
            }, a.prototype.getValueBySeriesAndCategory = function(a, b) {
                return this.dataView.values[a].values[b];
            }, a.prototype.getMeasureNameByIndex = function(a) {
                return this.dataView.values[a].source.queryName;
            }, a.prototype.hasHighlightValues = function(a) {
                var b = this.dataView && this.dataView.values ? this.dataView.values[a] : void 0;
                return b && !!b.highlights;
            }, a.prototype.getHighlightBySeriesAndCategory = function(a, b) {
                return this.dataView.values[a].highlights[b];
            }, a;
        }();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c() {}
            return c.prototype.setupVisualProps = function(a) {
                this.graphicsContext = a, this.margin = a.margin, this.width = this.graphicsContext.width, 
                this.height = this.graphicsContext.height, this.categoryLayout = a.layout, this.animator = a.animator, 
                this.interactivityService = a.interactivityService, this.viewportHeight = a.viewportHeight;
            }, c.prototype.setData = function(a) {
                this.data = a;
            }, c.prototype.setXScale = function(a, c, d) {
                var e, f, g = this.width;
                d && 2 === d.length && (e = d[0], f = d[1]);
                var h = this.xProps = b.ColumnUtil.getCategoryAxis(this.data, g, this.categoryLayout, !1, e, f), i = this.data.series.length, j = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio) / i;
                return this.seriesOffsetScale = d3.scale.ordinal().domain(this.data.series.map(function(a) {
                    return a.index;
                })).rangeBands([ 0, i * j ]), h.xLabelMaxWidth = this.categoryLayout.isScalar ? g / h.values.length : this.categoryLayout.categoryThickness, 
                h;
            }, c.prototype.setYScale = function(c, d, e) {
                var f = this.viewportHeight, g = b.AxisHelper.createValueDomain(this.data.series, !0), h = b.AxisHelper.getRecommendedNumberOfTicksForYAxis(f), i = b.ColumnUtil.getTickCount(g[0], g[1], this.data.valuesMetadata, h, c, d), j = b.AxisHelper.normalizeLinearDomain({
                    min: g[0],
                    max: g[1]
                });
                g = [ j.min, j.max ];
                var k = b.AxisHelper.combineDomain(e, g), l = d3.scale.linear().range([ f, 0 ]).domain(k).nice(i || void 0).clamp(b.AxisHelper.scaleShouldClamp(k, g));
                b.ColumnUtil.normalizeInfinityInScale(l);
                var m = b.AxisHelper.getRecommendedTickValuesForALinearRange(i, l), n = d3.svg.axis().scale(l).tickValues(m), o = b.ColumnChart.getTickInterval(m), p = b.ClusteredUtil.createValueFormatter(this.data.valuesMetadata, o);
                n.tickFormat(p.format);
                var q = m.map(function(a) {
                    return p.format(a);
                }), r = this.yProps = {
                    axis: n,
                    scale: l,
                    formatter: p,
                    values: q,
                    axisType: a.ValueType.fromDescriptor({
                        text: !0
                    }),
                    axisLabel: null,
                    isCategoryAxis: !1
                };
                return r;
            }, c.prototype.drawColumns = function(a) {
                var d = this.data;
                this.columnsCenters = null;
                var e = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio), f = e / d.series.length, g = {
                    columnWidth: f,
                    categoryWidth: e,
                    xScale: this.xProps.scale,
                    yScale: this.yProps.scale,
                    seriesOffsetScale: this.seriesOffsetScale,
                    isScalar: this.categoryLayout.isScalar,
                    margin: this.margin
                }, h = c.getLayout(d, g), i = d.labelSettings, j = null;
                null != i && (j = b.dataLabelUtils.getColumnChartLabelLayout(d, this.getLabelLayoutXY(g, i), !0, !1, this.yProps.formatter, g));
                var k, l, m = b.ColumnUtil.drawSeries(d, this.graphicsContext.mainGraphicsContext, g);
                return this.animator && a && (k = this.animator.animate({
                    viewModel: d,
                    series: m,
                    layout: h,
                    itemCS: c.classes.item,
                    interactivityService: this.interactivityService,
                    labelGraphicsContext: this.graphicsContext.mainGraphicsContext,
                    labelLayout: j,
                    viewPort: {
                        height: this.height,
                        width: this.width
                    }
                }), l = k.shapes), this.animator && a && !k.failed || (l = b.ColumnUtil.drawDefaultShapes(d, m, h, c.classes.item, !this.animator), 
                null !== j && (i.show ? b.ColumnUtil.drawDefaultLabels(m, this.graphicsContext.mainGraphicsContext, j, {
                    height: this.height,
                    width: this.width
                }) : b.dataLabelUtils.cleanDataLabels(this.graphicsContext.mainGraphicsContext))), 
                b.ColumnUtil.applyInteractivity(l, this.graphicsContext.onDragStart), l;
            }, c.prototype.selectColumn = function(a, d) {
                b.ColumnUtil.setChosenColumnOpacity(this.graphicsContext.mainGraphicsContext, c.classes.item.selector, a, d), 
                this.moveHandle(a);
            }, c.prototype.getClosestColumnIndex = function(a, c) {
                return b.ColumnUtil.getClosestColumnIndex(a, this.getColumnsCenters());
            }, c.prototype.getColumnsCenters = function() {
                var a = this;
                if (!this.columnsCenters) {
                    var c = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio);
                    if (this.data.series.length > 0) {
                        var d = 0;
                        this.categoryLayout.isScalar || (d = c / 2);
                        var e = this.data.series[0];
                        this.columnsCenters = e.data.map(function(b) {
                            return a.xProps.scale(a.categoryLayout.isScalar ? b.categoryValue : b.categoryIndex) + d;
                        });
                    }
                }
                return this.columnsCenters;
            }, c.prototype.moveHandle = function(a) {
                var b = this.getColumnsCenters(), c = b[a];
                if (this.columnSelectionLineHandle) {
                    var d = this.columnSelectionLineHandle;
                    d.select("line").attr({
                        x1: c,
                        x2: c
                    }), d.select("circle").attr({
                        cx: c
                    });
                } else {
                    var d = this.columnSelectionLineHandle = this.graphicsContext.mainGraphicsContext.append("g");
                    d.append("line").classed("interactive-hover-line", !0).attr({
                        x1: c,
                        x2: c,
                        y1: 0,
                        y2: this.height
                    }), d.append("circle").attr({
                        cx: c,
                        cy: this.height,
                        r: "6px"
                    }).classed("drag-handle", !0);
                }
            }, c.getLayout = function(a, c) {
                var d = c.columnWidth, e = .5 * d, f = e / 2, g = c.isScalar, h = c.xScale, i = c.yScale, j = c.seriesOffsetScale, k = i(0), l = 0;
                return g && (l = c.categoryWidth / 2), {
                    shapeLayout: {
                        width: function(a) {
                            return a.drawThinner ? e : d;
                        },
                        x: function(a) {
                            return h(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l + (a.drawThinner ? f : 0);
                        },
                        y: function(a) {
                            return k + b.AxisHelper.diffScaled(i, Math.max(0, a.value), 0);
                        },
                        height: function(a) {
                            return Math.abs(b.AxisHelper.diffScaled(i, 0, a.value));
                        }
                    },
                    shapeLayoutWithoutHighlights: {
                        width: function(a) {
                            return d;
                        },
                        x: function(a) {
                            return h(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l;
                        },
                        y: function(a) {
                            return k + b.AxisHelper.diffScaled(i, Math.max(0, a.originalValue), 0);
                        },
                        height: function(a) {
                            return Math.abs(b.AxisHelper.diffScaled(i, 0, a.originalValue));
                        }
                    },
                    zeroShapeLayout: {
                        width: function(a) {
                            return a.drawThinner ? e : d;
                        },
                        x: function(a) {
                            return h(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l + (a.drawThinner ? f : 0);
                        },
                        y: function(a) {
                            return k;
                        },
                        height: function(a) {
                            return 0;
                        }
                    }
                };
            }, c.prototype.getLabelLayoutXY = function(a, c) {
                var d = a.columnWidth, e = .5 * d, f = e / 2, g = a.isScalar, h = a.xScale, i = a.yScale, j = a.seriesOffsetScale, k = 0, l = i(0);
                return g && (k = a.categoryWidth / 2), {
                    x: function(a) {
                        return h(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - k + (a.drawThinner ? f : 0) + e;
                    },
                    y: function(a) {
                        var d = l + b.AxisHelper.diffScaled(i, Math.max(0, a.value), 0) - b.dataLabelUtils.defaultColumnLabelMargin, e = l + b.AxisHelper.diffScaled(i, Math.max(0, a.value), 0) / 2 - b.dataLabelUtils.defaultColumnLabelMargin;
                        return 0 >= d ? (a.labelFill = c.overrideDefaultColor ? a.labelFill : b.dataLabelUtils.defaultInsideLabelColor, 
                        e) : d;
                    }
                };
            }, c.classes = {
                item: {
                    "class": "column",
                    selector: ".column"
                }
            }, c;
        }();
        b.ClusteredColumnChartStrategy = c;
        var d = function() {
            function c() {}
            return c.prototype.setupVisualProps = function(a) {
                this.graphicsContext = a, this.margin = a.margin, this.width = this.graphicsContext.width, 
                this.height = this.graphicsContext.height, this.categoryLayout = a.layout, this.animator = a.animator, 
                this.interactivityService = a.interactivityService, this.viewportHeight = a.viewportHeight;
            }, c.prototype.setData = function(a) {
                this.data = a;
            }, c.prototype.setYScale = function(a, c, d) {
                var e, f, g = this.height;
                d && 2 === d.length && (e = d[0], f = d[1]);
                var h = this.yProps = b.ColumnUtil.getCategoryAxis(this.data, g, this.categoryLayout, !0, e, f), i = this.data.series.length, j = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio) / i;
                return this.seriesOffsetScale = d3.scale.ordinal().domain(this.data.series.map(function(a) {
                    return a.index;
                })).rangeBands([ 0, i * j ]), h;
            }, c.prototype.setXScale = function(c, d, e) {
                var f = this.width, g = this.viewportHeight, h = b.AxisHelper.createValueDomain(this.data.series, !0), i = b.AxisHelper.getBestNumberOfTicks(h[0], h[1], this.data.valuesMetadata, b.AxisHelper.getRecommendedNumberOfTicksForXAxis(f)), j = b.AxisHelper.normalizeLinearDomain({
                    min: h[0],
                    max: h[1]
                });
                h = [ j.min, j.max ];
                var k = b.AxisHelper.combineDomain(e, h), l = d3.scale.linear().range([ 0, f ]).domain(k).nice(i || void 0).clamp(b.AxisHelper.scaleShouldClamp(k, h));
                b.ColumnUtil.normalizeInfinityInScale(l);
                var m = b.AxisHelper.getRecommendedTickValuesForALinearRange(i, l), n = d3.svg.axis().scale(l).tickSize(-g, 0).tickValues(m), o = b.ColumnChart.getTickInterval(m), p = b.ClusteredUtil.createValueFormatter(this.data.valuesMetadata, o);
                n.tickFormat(p.format);
                var q = m.map(function(a) {
                    return p.format(a);
                }), r = this.xProps = {
                    axis: n,
                    scale: l,
                    formatter: p,
                    values: q,
                    axisType: a.ValueType.fromDescriptor({
                        numeric: !0
                    }),
                    axisLabel: null,
                    isCategoryAxis: !1
                };
                return r;
            }, c.prototype.drawColumns = function(a) {
                var d = this.data;
                this.barsCenters = null;
                var e = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio), f = e / d.series.length, g = {
                    columnWidth: f,
                    categoryWidth: e,
                    xScale: this.xProps.scale,
                    yScale: this.yProps.scale,
                    seriesOffsetScale: this.seriesOffsetScale,
                    isScalar: this.categoryLayout.isScalar,
                    margin: this.margin
                }, h = c.getLayout(d, g), i = d.labelSettings, j = null;
                null != i && (j = b.dataLabelUtils.getColumnChartLabelLayout(d, this.getLabelLayoutXY(g, this.width, i), !1, !1, this.xProps.formatter, g));
                var k, l, m = b.ColumnUtil.drawSeries(d, this.graphicsContext.mainGraphicsContext, g);
                return this.animator && a && (k = this.animator.animate({
                    viewModel: d,
                    series: m,
                    layout: h,
                    itemCS: c.classes.item,
                    interactivityService: this.interactivityService,
                    labelGraphicsContext: this.graphicsContext.mainGraphicsContext,
                    labelLayout: j,
                    viewPort: {
                        height: this.height,
                        width: this.width
                    }
                }), l = k.shapes), this.animator && a && !k.failed || (l = b.ColumnUtil.drawDefaultShapes(d, m, h, c.classes.item, !this.animator), 
                null !== j && (i.show ? b.ColumnUtil.drawDefaultLabels(m, this.graphicsContext.mainGraphicsContext, j, {
                    height: this.height,
                    width: this.width
                }) : b.dataLabelUtils.cleanDataLabels(this.graphicsContext.mainGraphicsContext))), 
                b.ColumnUtil.applyInteractivity(l, this.graphicsContext.onDragStart), l;
            }, c.prototype.selectColumn = function(a, d) {
                b.ColumnUtil.setChosenColumnOpacity(this.graphicsContext.mainGraphicsContext, c.classes.item.selector, a, d), 
                this.moveHandle(a);
            }, c.prototype.getClosestColumnIndex = function(a, c) {
                return b.ColumnUtil.getClosestColumnIndex(c, this.getBarsCenters());
            }, c.prototype.getBarsCenters = function() {
                var a = this;
                if (!this.barsCenters) {
                    var c = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio);
                    if (this.data.series.length > 0) {
                        var d = 0;
                        this.categoryLayout.isScalar || (d = c / 2);
                        var e = this.data.series[0];
                        this.barsCenters = e.data.map(function(b) {
                            return a.yProps.scale(a.categoryLayout.isScalar ? b.categoryValue : b.categoryIndex) + d;
                        });
                    }
                }
                return this.barsCenters;
            }, c.prototype.moveHandle = function(a) {
                var b = this.getBarsCenters(), c = b[a];
                if (this.columnSelectionLineHandle) {
                    var d = this.columnSelectionLineHandle;
                    d.select("line").attr({
                        y1: c,
                        y2: c
                    }), d.select("circle").attr({
                        cy: c
                    });
                } else {
                    var d = this.columnSelectionLineHandle = this.graphicsContext.mainGraphicsContext.append("g");
                    d.append("line").classed("interactive-hover-line", !0).attr({
                        x1: 0,
                        x2: this.width,
                        y1: c,
                        y2: c
                    }), d.append("circle").attr({
                        cx: 0,
                        cy: c,
                        r: "6px"
                    }).classed("drag-handle", !0);
                }
            }, c.getLayout = function(a, c) {
                var d = c.columnWidth, e = .5 * d, f = e / 2, g = c.isScalar, h = c.xScale, i = c.yScale, j = c.seriesOffsetScale, k = h(0), l = 0;
                return g && (l = c.categoryWidth / 2), {
                    shapeLayout: {
                        width: function(a) {
                            return Math.abs(b.AxisHelper.diffScaled(h, 0, a.value));
                        },
                        x: function(a) {
                            return k + b.AxisHelper.diffScaled(h, Math.min(0, a.value), 0);
                        },
                        y: function(a) {
                            return i(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l + (a.drawThinner ? f : 0);
                        },
                        height: function(a) {
                            return a.drawThinner ? e : d;
                        }
                    },
                    shapeLayoutWithoutHighlights: {
                        width: function(a) {
                            return Math.abs(b.AxisHelper.diffScaled(h, 0, a.originalValue));
                        },
                        x: function(a) {
                            return k + b.AxisHelper.diffScaled(h, Math.min(0, a.originalValue), 0);
                        },
                        y: function(a) {
                            return i(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l;
                        },
                        height: function(a) {
                            return d;
                        }
                    },
                    zeroShapeLayout: {
                        width: function(a) {
                            return 0;
                        },
                        x: function(a) {
                            return k + b.AxisHelper.diffScaled(h, Math.min(0, a.value), 0);
                        },
                        y: function(a) {
                            return i(g ? a.categoryValue : a.categoryIndex) + j(a.seriesIndex) - l + (a.drawThinner ? f : 0);
                        },
                        height: function(a) {
                            return a.drawThinner ? e : d;
                        }
                    }
                };
            }, c.prototype.getLabelLayoutXY = function(c, d, e) {
                var f = c.columnWidth, g = .5 * f, h = g / 2, i = c.isScalar, j = c.xScale, k = c.yScale, l = c.seriesOffsetScale, m = 0, n = j(0);
                return i && (m = c.categoryWidth / 2), {
                    x: function(c) {
                        var f = {
                            text: c.labeltext,
                            fontFamily: b.dataLabelUtils.LabelTextProperties.fontFamily,
                            fontSize: b.dataLabelUtils.LabelTextProperties.fontSize,
                            fontWeight: b.dataLabelUtils.LabelTextProperties.fontWeight
                        }, g = a.TextMeasurementService.measureSvgTextWidth(f), h = n + b.AxisHelper.diffScaled(j, Math.max(0, c.value), 0) + b.dataLabelUtils.defaultColumnLabelMargin;
                        return h + g > d ? (c.labelFill = e.overrideDefaultColor ? c.labelFill : b.dataLabelUtils.defaultInsideLabelColor, 
                        n + b.AxisHelper.diffScaled(j, Math.max(0, c.value), 0) / 2 - g / 2) : h;
                    },
                    y: function(a) {
                        return k(i ? a.categoryValue : a.categoryIndex) + l(a.seriesIndex) - m + (a.drawThinner ? h : 0) + g + b.dataLabelUtils.defaultColumnHalfLabelHeight;
                    }
                };
            }, c.classes = {
                item: {
                    "class": "bar",
                    selector: ".bar"
                }
            }, c;
        }();
        b.ClusteredBarChartStrategy = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function a() {}
            return a.prototype.setupVisualProps = function(a) {
                this.graphicsContext = a, this.margin = a.margin, this.width = this.graphicsContext.width, 
                this.height = this.graphicsContext.height, this.categoryLayout = a.layout, this.animator = a.animator, 
                this.interactivityService = a.interactivityService, this.viewportHeight = a.viewportHeight;
            }, a.prototype.setData = function(a) {
                this.data = a;
            }, a.prototype.setXScale = function(a, c, d) {
                var e, f, g = this.width;
                d && 2 === d.length && (e = d[0], f = d[1]);
                var h = this.xProps = b.ColumnUtil.getCategoryAxis(this.data, g, this.categoryLayout, !1, e, f);
                return h.xLabelMaxWidth = this.categoryLayout.isScalar ? g / h.values.length : this.categoryLayout.categoryThickness, 
                h;
            }, a.prototype.setYScale = function(a, c, d) {
                var e = this.viewportHeight, f = this.yProps = b.StackedUtil.getValueAxis(this.data, a, e, [ e, 0 ], c, d);
                return f;
            }, a.prototype.drawColumns = function(c) {
                var d = this.data;
                this.columnsCenters = null;
                var e = {
                    columnWidth: this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio),
                    xScale: this.xProps.scale,
                    yScale: this.yProps.scale,
                    isScalar: this.categoryLayout.isScalar,
                    margin: this.margin
                }, f = a.getLayout(d, e), g = d.labelSettings, h = null;
                null != g && (h = b.dataLabelUtils.getColumnChartLabelLayout(d, this.getLabelLayoutXY(e, g), !0, this.graphicsContext.is100Pct, this.yProps.formatter, e));
                var i, j, k = b.ColumnUtil.drawSeries(d, this.graphicsContext.mainGraphicsContext, e);
                return this.animator && c && (i = this.animator.animate({
                    viewModel: d,
                    series: k,
                    layout: f,
                    itemCS: a.classes.item,
                    interactivityService: this.interactivityService,
                    labelGraphicsContext: this.graphicsContext.mainGraphicsContext,
                    labelLayout: h,
                    viewPort: {
                        height: this.height,
                        width: this.width
                    }
                }), j = i.shapes), this.animator && c && !i.failed || (j = b.ColumnUtil.drawDefaultShapes(d, k, f, a.classes.item, !this.animator), 
                null !== h && (g.show ? b.ColumnUtil.drawDefaultLabels(k, this.graphicsContext.mainGraphicsContext, h, {
                    height: this.height,
                    width: this.width
                }) : b.dataLabelUtils.cleanDataLabels(this.graphicsContext.mainGraphicsContext))), 
                b.ColumnUtil.applyInteractivity(j, this.graphicsContext.onDragStart), j;
            }, a.prototype.selectColumn = function(c, d) {
                b.ColumnUtil.setChosenColumnOpacity(this.graphicsContext.mainGraphicsContext, a.classes.item.selector, c, d), 
                this.moveHandle(c);
            }, a.prototype.getClosestColumnIndex = function(a, c) {
                return b.ColumnUtil.getClosestColumnIndex(a, this.getColumnsCenters());
            }, a.prototype.getColumnsCenters = function() {
                var a = this;
                if (!this.columnsCenters) {
                    var c = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio);
                    if (this.data.series.length > 0) {
                        var d = 0;
                        this.categoryLayout.isScalar || (d = c / 2);
                        var e = this.data.series[0];
                        this.columnsCenters = e.data.map(function(b) {
                            return a.xProps.scale(a.categoryLayout.isScalar ? b.categoryValue : b.categoryIndex) + d;
                        });
                    }
                }
                return this.columnsCenters;
            }, a.prototype.moveHandle = function(a) {
                var b = this.getColumnsCenters(), c = b[a];
                if (this.columnSelectionLineHandle) {
                    var d = this.columnSelectionLineHandle;
                    d.select("line").attr({
                        x1: c,
                        x2: c
                    }), d.select("circle").attr({
                        cx: c
                    });
                } else {
                    var d = this.columnSelectionLineHandle = this.graphicsContext.mainGraphicsContext.append("g");
                    d.append("line").classed("interactive-hover-line", !0).attr({
                        x1: c,
                        x2: c,
                        y1: 0,
                        y2: this.height
                    }), d.append("circle").attr({
                        cx: c,
                        cy: this.height,
                        r: "6px"
                    }).classed("drag-handle", !0);
                }
            }, a.getLayout = function(a, c) {
                var d = c.columnWidth, e = c.isScalar, f = c.xScale, g = c.yScale, h = g(0), i = 0;
                return e && (i = d / 2), {
                    shapeLayout: {
                        width: function(a, b) {
                            return d;
                        },
                        x: function(a, b) {
                            return f(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        y: function(a, c) {
                            return h + b.AxisHelper.diffScaled(g, a.position, 0);
                        },
                        height: function(a, c) {
                            return b.StackedUtil.getSize(g, a.valueAbsolute);
                        }
                    },
                    shapeLayoutWithoutHighlights: {
                        width: function(a, b) {
                            return d;
                        },
                        x: function(a, b) {
                            return f(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        y: function(a, c) {
                            return h + b.AxisHelper.diffScaled(g, a.originalPosition, 0);
                        },
                        height: function(a, c) {
                            return b.StackedUtil.getSize(g, a.originalValueAbsolute);
                        }
                    },
                    zeroShapeLayout: {
                        width: function(a, b) {
                            return d;
                        },
                        x: function(a, b) {
                            return f(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        y: function(a, c) {
                            return h + b.AxisHelper.diffScaled(g, a.position, 0) + b.StackedUtil.getSize(g, a.valueAbsolute);
                        },
                        height: function(a, b) {
                            return 0;
                        }
                    }
                };
            }, a.prototype.getLabelLayoutXY = function(a, b) {
                var c = a.columnWidth, d = .5 * c, e = a.isScalar, f = a.xScale, g = a.yScale, h = 0, i = g(0), j = this.graphicsContext.is100Pct, k = this.getLabelLayoutY;
                return e && (h = d), {
                    x: function(a) {
                        return f(e ? a.categoryValue : a.categoryIndex) - h + d;
                    },
                    y: function(a) {
                        return k(a, j, i, g, b);
                    }
                };
            }, a.prototype.getLabelLayoutY = function(a, c, d, e, f) {
                var g = d + b.AxisHelper.diffScaled(e, a.position, 0) + b.StackedUtil.getSize(e, a.valueAbsolute) / 2 + b.dataLabelUtils.defaultColumnHalfLabelHeight, h = d + b.AxisHelper.diffScaled(e, a.position, 0) - b.dataLabelUtils.defaultColumnLabelMargin;
                return c || !a.lastSeries ? g : 0 >= h ? (a.labelFill = f.overrideDefaultColor ? a.labelFill : b.dataLabelUtils.defaultInsideLabelColor, 
                g) : h;
            }, a.classes = {
                item: {
                    "class": "column",
                    selector: ".column"
                },
                highlightItem: {
                    "class": "highlightColumn",
                    selector: ".highlightColumn"
                }
            }, a;
        }();
        b.StackedColumnChartStrategy = c;
        var d = function() {
            function c() {}
            return c.prototype.setupVisualProps = function(a) {
                this.graphicsContext = a, this.margin = a.margin, this.width = this.graphicsContext.width, 
                this.height = this.graphicsContext.height, this.categoryLayout = a.layout, this.animator = a.animator, 
                this.interactivityService = a.interactivityService, this.viewportHeight = a.viewportHeight;
            }, c.prototype.setData = function(a) {
                this.data = a;
            }, c.prototype.setYScale = function(a, c, d) {
                var e, f, g = this.height;
                d && 2 === d.length && (e = d[0], f = d[1]);
                var h = this.yProps = b.ColumnUtil.getCategoryAxis(this.data, g, this.categoryLayout, !0, e, f);
                return h;
            }, c.prototype.setXScale = function(a, c, d) {
                var e = this.viewportHeight, f = this.xProps = b.StackedUtil.getValueAxis(this.data, a, this.width, [ 0, this.width ], void 0, d);
                return f.axis.tickSize(-e, 0), f;
            }, c.prototype.drawColumns = function(a) {
                var d = this.data;
                this.barsCenters = null;
                var e = {
                    columnWidth: this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio),
                    xScale: this.xProps.scale,
                    yScale: this.yProps.scale,
                    isScalar: this.categoryLayout.isScalar,
                    margin: this.margin
                }, f = c.getLayout(d, e), g = d.labelSettings, h = null;
                null != g && (h = b.dataLabelUtils.getColumnChartLabelLayout(d, this.getLabelLayoutXY(e, this.width, g), !1, this.graphicsContext.is100Pct, this.xProps.formatter, e));
                var i, j, k = b.ColumnUtil.drawSeries(d, this.graphicsContext.mainGraphicsContext, e);
                return this.animator && a && (i = this.animator.animate({
                    viewModel: d,
                    series: k,
                    layout: f,
                    itemCS: c.classes.item,
                    interactivityService: this.interactivityService,
                    labelGraphicsContext: this.graphicsContext.mainGraphicsContext,
                    labelLayout: h,
                    viewPort: {
                        height: this.height,
                        width: this.width
                    }
                }), j = i.shapes), this.animator && a && !i.failed || (j = b.ColumnUtil.drawDefaultShapes(d, k, f, c.classes.item, !this.animator), 
                null !== h && (g.show ? b.ColumnUtil.drawDefaultLabels(k, this.graphicsContext.mainGraphicsContext, h, {
                    height: this.height,
                    width: this.width
                }) : b.dataLabelUtils.cleanDataLabels(this.graphicsContext.mainGraphicsContext))), 
                b.ColumnUtil.applyInteractivity(j, this.graphicsContext.onDragStart), j;
            }, c.prototype.selectColumn = function(a, d) {
                b.ColumnUtil.setChosenColumnOpacity(this.graphicsContext.mainGraphicsContext, c.classes.item.selector, a, d), 
                this.moveHandle(a);
            }, c.prototype.getClosestColumnIndex = function(a, c) {
                return b.ColumnUtil.getClosestColumnIndex(c, this.getBarsCenters());
            }, c.prototype.getBarsCenters = function() {
                var a = this;
                if (!this.barsCenters) {
                    var c = this.categoryLayout.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio);
                    if (this.data.series.length > 0) {
                        var d = 0;
                        this.categoryLayout.isScalar || (d = c / 2);
                        var e = this.data.series[0];
                        this.barsCenters = e.data.map(function(b) {
                            return a.yProps.scale(a.categoryLayout.isScalar ? b.categoryValue : b.categoryIndex) + d;
                        });
                    }
                }
                return this.barsCenters;
            }, c.prototype.moveHandle = function(a) {
                var b = this.getBarsCenters(), c = b[a];
                if (this.columnSelectionLineHandle) {
                    var d = this.columnSelectionLineHandle;
                    d.select("line").attr({
                        y1: c,
                        y2: c
                    }), d.select("circle").attr({
                        cy: c
                    });
                } else {
                    var d = this.columnSelectionLineHandle = this.graphicsContext.mainGraphicsContext.append("g");
                    d.append("line").classed("interactive-hover-line", !0).attr({
                        x1: 0,
                        x2: this.width,
                        y1: c,
                        y2: c
                    }), d.append("circle").classed("drag-handle", !0).attr({
                        cx: 0,
                        cy: c,
                        r: "6px"
                    });
                }
            }, c.getLayout = function(a, c) {
                var d = c.columnWidth, e = c.isScalar, f = c.xScale, g = c.yScale, h = f(0), i = 0;
                return e && (i = d / 2), {
                    shapeLayout: {
                        width: function(a, c) {
                            return -b.StackedUtil.getSize(f, a.valueAbsolute);
                        },
                        x: function(a, c) {
                            return h + b.AxisHelper.diffScaled(f, a.position - a.valueAbsolute, 0);
                        },
                        y: function(a, b) {
                            return g(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        height: function(a, b) {
                            return d;
                        }
                    },
                    shapeLayoutWithoutHighlights: {
                        width: function(a, c) {
                            return -b.StackedUtil.getSize(f, a.originalValueAbsolute);
                        },
                        x: function(a, c) {
                            return h + b.AxisHelper.diffScaled(f, a.originalPosition - a.originalValueAbsolute, 0);
                        },
                        y: function(a, b) {
                            return g(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        height: function(a, b) {
                            return d;
                        }
                    },
                    zeroShapeLayout: {
                        width: function(a, b) {
                            return 0;
                        },
                        x: function(a, c) {
                            return h + b.AxisHelper.diffScaled(f, a.position - a.valueAbsolute, 0);
                        },
                        y: function(a, b) {
                            return g(e ? a.categoryValue : a.categoryIndex) - i;
                        },
                        height: function(a, b) {
                            return d;
                        }
                    }
                };
            }, c.prototype.getLabelLayoutXY = function(c, d, e) {
                var f = c.columnWidth, g = .5 * f, h = c.isScalar, i = c.xScale, j = c.yScale, k = 0, l = i(0), m = this.graphicsContext.is100Pct;
                return h && (k = g), {
                    x: function(c) {
                        var f = {
                            text: c.labeltext,
                            fontFamily: b.dataLabelUtils.LabelTextProperties.fontFamily,
                            fontSize: b.dataLabelUtils.LabelTextProperties.fontSize,
                            fontWeight: b.dataLabelUtils.LabelTextProperties.fontWeight
                        }, g = a.TextMeasurementService.measureSvgTextWidth(f), h = l + Math.abs(b.AxisHelper.diffScaled(i, 0, c.originalValue)) + b.AxisHelper.diffScaled(i, c.position - c.valueAbsolute, 0) + b.StackedUtil.getSize(i, c.valueAbsolute) / 2 - g / 2, j = l + Math.abs(b.AxisHelper.diffScaled(i, 0, c.originalValue)) + b.AxisHelper.diffScaled(i, c.position - c.valueAbsolute, 0) + b.dataLabelUtils.defaultColumnLabelMargin;
                        return m || !c.lastSeries ? h : j + g > d ? (c.labelFill = e.overrideDefaultColor ? c.labelFill : b.dataLabelUtils.defaultInsideLabelColor, 
                        h) : j;
                    },
                    y: function(a) {
                        return j(h ? a.categoryValue : a.categoryIndex) - k + g + b.dataLabelUtils.defaultColumnHalfLabelHeight;
                    }
                };
            }, c.classes = {
                item: {
                    "class": "bar",
                    selector: ".bar"
                },
                highlightItem: {
                    "class": "highlightBar",
                    selector: ".highlightBar"
                }
            }, c;
        }();
        b.StackedBarChartStrategy = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            b.capabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: 0,
                    displayName: a.data.createDisplayNameGetter("Role_ComboChart_Category")
                }, {
                    name: "Series",
                    kind: 0,
                    displayName: a.data.createDisplayNameGetter("Role_ComboChart_Series")
                }, {
                    name: "Y",
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_ComboChart_Y")
                }, {
                    name: "Y2",
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_ComboChart_Y2")
                } ],
                objects: {
                    general: {
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            },
                            visualType1: {
                                type: {
                                    text: !0
                                }
                            },
                            visualType2: {
                                type: {
                                    text: !0
                                }
                            }
                        }
                    },
                    categoryAxis: {
                        displayName: a.data.createDisplayNameGetter("Visual_XAxis"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            start: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                                type: {
                                    numeric: !0
                                }
                            },
                            end: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                                type: {
                                    numeric: !0
                                }
                            },
                            axisType: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Type"),
                                type: {
                                    formatting: {
                                        axisType: !0
                                    }
                                }
                            },
                            showAxisTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                                type: {
                                    formatting: {
                                        axisStyle: !0
                                    }
                                }
                            }
                        }
                    },
                    valueAxis: {
                        displayName: a.data.createDisplayNameGetter("Visual_YAxis"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            secShow: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_ShowSecondery"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisLabel: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_ColumnTitle"),
                                type: {
                                    none: !0
                                }
                            },
                            position: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                                type: {
                                    formatting: {
                                        yAxisPosition: !0
                                    }
                                }
                            },
                            start: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                                type: {
                                    numeric: !0
                                }
                            },
                            end: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                                type: {
                                    numeric: !0
                                }
                            },
                            showAxisTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                                type: {
                                    bool: !0
                                }
                            },
                            axisStyle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                                type: {
                                    formatting: {
                                        axisStyle: !0
                                    }
                                }
                            },
                            secAxisLabel: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_LineTitle"),
                                type: {
                                    none: !0
                                }
                            },
                            secPosition: {
                                displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                                type: {
                                    formatting: {
                                        yAxisPosition: !0
                                    }
                                }
                            },
                            secStart: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                                type: {
                                    numeric: !0
                                }
                            },
                            secEnd: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                                type: {
                                    numeric: !0
                                }
                            },
                            secShowAxisTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                                type: {
                                    bool: !0
                                }
                            },
                            secAxisStyle: {
                                displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                                type: {
                                    formatting: {
                                        axisStyle: !0
                                    }
                                }
                            }
                        }
                    },
                    legend: {
                        displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            position: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                                type: {
                                    formatting: {
                                        legendPosition: !0
                                    }
                                }
                            },
                            showTitle: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                                type: {
                                    bool: !0
                                }
                            },
                            titleText: {
                                displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                                type: {
                                    text: !0
                                }
                            }
                        }
                    },
                    dataPoint: {
                        displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                        properties: {
                            defaultColor: {
                                displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            showAllDataPoints: {
                                displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                                type: {
                                    bool: !0
                                }
                            },
                            fill: {
                                displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            fillRule: {
                                displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                                type: {
                                    fillRule: {}
                                },
                                rule: {
                                    inputRole: "Gradient",
                                    output: {
                                        property: "fill",
                                        selector: [ "Category" ]
                                    }
                                }
                            }
                        }
                    },
                    labels: {
                        displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                        properties: {
                            show: {
                                displayName: a.data.createDisplayNameGetter("Visual_Show"),
                                type: {
                                    bool: !0
                                }
                            },
                            color: {
                                displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                                type: {
                                    fill: {
                                        solid: {
                                            color: !0
                                        }
                                    }
                                }
                            },
                            labelDisplayUnits: {
                                displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                                type: {
                                    formatting: {
                                        labelDisplayUnits: !0
                                    }
                                }
                            },
                            labelPrecision: {
                                displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                                type: {
                                    numeric: !0
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Series: {
                            max: 0
                        }
                    }, {
                        Category: {
                            max: 1
                        },
                        Series: {
                            min: 1,
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            "for": {
                                "in": "Category"
                            },
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        values: {
                            group: {
                                by: "Series",
                                select: [ {
                                    "for": {
                                        "in": "Y"
                                    }
                                } ],
                                dataReductionAlgorithm: {
                                    top: {}
                                }
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                }, {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Y2: {
                            min: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            "for": {
                                "in": "Category"
                            },
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        values: {
                            select: [ {
                                "for": {
                                    "in": "Y2"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 2
                            },
                            supported: {
                                min: 0
                            }
                        }
                    }
                } ],
                supportsHighlight: !0,
                sorting: {
                    custom: {}
                }
            };
        }(c = b.ComboChart || (b.ComboChart = {})), b.comboChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a(a) {
                this.sentimentColors = [ {
                    value: "#C0433A"
                }, {
                    value: "#E8D62E"
                }, {
                    value: "#79C75B"
                } ], this.basePickerColors = [ {
                    value: "#FFFFFF"
                }, {
                    value: "#000000"
                }, {
                    value: "#00B8AA"
                }, {
                    value: "#374649"
                }, {
                    value: "#FD625E"
                }, {
                    value: "#F2C811"
                }, {
                    value: "#5F6B6D"
                }, {
                    value: "#8AD4EB"
                }, {
                    value: "#FE9666"
                }, {
                    value: "#A66999"
                } ], this.colors = a || c.getDefaultTheme(), this.defaultColors = d3.scale.ordinal().range(this.colors), 
                this.palettes = {};
            }
            return a.prototype.getColor = function(a) {
                return this.defaultColors(a);
            }, a.prototype.getColorByScale = function(a, b) {
                var c = this.palettes[a];
                return void 0 === c && (c = d3.scale.ordinal().range(this.colors), this.palettes[a] = c), 
                c(b);
            }, a.prototype.getSentimentColors = function() {
                return this.sentimentColors;
            }, a.prototype.getBasePickerColors = function() {
                return this.basePickerColors;
            }, a;
        }();
        a.DataColorPalette = b;
        var c = function() {
            function a() {}
            return a.getDefaultTheme = function() {
                if (!a.defaultTheme) {
                    a.defaultTheme = [];
                    for (var b = a.defaultBaseColors, c = 0; c < a.colorSectorCount; ++c) for (var d = 0, e = b.length; e > d; ++d) a.defaultTheme.push({
                        value: jsCommon.color.rotate(b[d].value, c / a.colorSectorCount)
                    });
                }
                return a.defaultTheme;
            }, a.colorSectorCount = 12, a.defaultBaseColors = [ {
                value: "#01B8AA"
            }, {
                value: "#374649"
            }, {
                value: "#FD625E"
            }, {
                value: "#F2C80F"
            }, {
                value: "#5F6B6D"
            }, {
                value: "#8AD4EB"
            }, {
                value: "#FE9666"
            }, {
                value: "#A66999"
            }, {
                value: "#3599B8"
            }, {
                value: "#DFBFBF"
            }, {
                value: "#4AC5BB"
            }, {
                value: "#5F6B6D"
            }, {
                value: "#FB8281"
            }, {
                value: "#F4D25A"
            }, {
                value: "#7F898A"
            }, {
                value: "#A4DDEE"
            }, {
                value: "#FDAB89"
            }, {
                value: "#B687AC"
            }, {
                value: "#28738A"
            }, {
                value: "#A78F8F"
            }, {
                value: "#168980"
            }, {
                value: "#293537"
            }, {
                value: "#BB4A4A"
            }, {
                value: "#B59525"
            }, {
                value: "#475052"
            }, {
                value: "#6A9FB0"
            }, {
                value: "#BD7150"
            }, {
                value: "#7B4F71"
            }, {
                value: "#1B4D5C"
            }, {
                value: "#706060"
            }, {
                value: "#0F5C55"
            }, {
                value: "#1C2325"
            }, {
                value: "#7D3231"
            }, {
                value: "#796419"
            }, {
                value: "#303637"
            }, {
                value: "#476A75"
            }, {
                value: "#7E4B36"
            }, {
                value: "#52354C"
            }, {
                value: "#0D262E"
            }, {
                value: "#544848"
            } ], a;
        }();
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c() {}
            return c.prototype.init = function(a) {
                this.options = a, this.svg = a.svg, this.clearCatcher = this.svg.select(".clearCatcher"), 
                this.mainGraphicsG = this.svg.append("g").classed("dataDotChartMainGraphicsContext", !0), 
                this.mainGraphicsContext = this.mainGraphicsG.append("svg"), this.currentViewport = a.viewport, 
                this.hostService = a.host, this.cartesianVisualHost = a.cartesianHost, this.style = a.style, 
                this.colors = this.style.colorPalette.dataColors, this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.interactivity = a.interactivity;
                var d = this.element = a.element;
                d.addClass(c.ClassName), d.css("overflow", "visible");
            }, c.prototype.setData = function(d) {
                if (this.data = {
                    series: {
                        data: []
                    },
                    hasHighlights: !1,
                    hasDynamicSeries: !1
                }, d.length > 0) {
                    var e = d[0];
                    if (e && e.categorical) {
                        var f = this.dataViewCategorical = e.categorical, g = f.categories, h = a.ValueType.fromDescriptor({
                            text: !0
                        });
                        g && g.length > 0 && g[0].source && g[0].source.type && (h = g[0].source.type), 
                        this.data = c.converter(e, b.valueFormatter.format(null)), this.interactivityService && this.interactivityService.applySelectionStateToData(this.data.series.data);
                    }
                }
            }, c.prototype.calculateAxesProperties = function(d) {
                var e = this;
                this.currentViewport = d.viewport, this.margin = d.margin;
                var f = this.data, g = this.currentViewport, h = this.margin, i = f ? f.series : null, j = i && i.data && i.data.length > 0 ? [ i ] : [], k = i && i.data ? i.data.length : 0;
                f.hasHighlights && (k /= 2);
                var l, m, n = g.width - (h.left + h.right), o = g.height - (h.top + h.bottom);
                c.hasDataPoint(i) && (l = i.xCol, m = i.yCol);
                var p = b.CartesianChart.getLayout(null, {
                    availableWidth: n,
                    categoryCount: k,
                    domain: null,
                    isScalar: !1,
                    isScrollable: !1
                }), q = p.categoryThickness * b.CartesianChart.OuterPaddingRatio;
                this.clippedData = c.createClippedDataIfOverflowed(f, p.categoryCount);
                var r = b.AxisHelper.createValueDomain(j, !0), s = b.AxisHelper.combineDomain(d.forcedYDomain, r);
                this.yAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: o,
                    dataDomain: s,
                    metaDataColumn: m,
                    formatStringProp: c.formatStringProp,
                    outerPadding: 0,
                    isScalar: !0,
                    isVertical: !0,
                    forcedTickCount: d.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    isCategoryAxis: !0
                });
                var t = this.xAxisProperties ? this.xAxisProperties.axisType : a.ValueType.fromDescriptor({
                    text: !0
                }), u = b.AxisHelper.createDomain(j, t, !1, d.forcedXDomain);
                return this.xAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: n,
                    dataDomain: u,
                    metaDataColumn: l,
                    formatStringProp: c.formatStringProp,
                    outerPadding: q,
                    isScalar: !1,
                    isVertical: !1,
                    forcedTickCount: d.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    categoryThickness: p.categoryThickness,
                    getValueFn: function(a, b) {
                        return e.lookupXValue(a, b);
                    },
                    isCategoryAxis: !1
                }), [ this.xAxisProperties, this.yAxisProperties ];
            }, c.createClippedDataIfOverflowed = function(b, c) {
                var d = b.hasHighlights ? Math.min(b.series.data.length, 2 * c) : Math.min(b.series.data.length, c);
                if (d >= b.series.data.length) return b;
                var e = a.Prototype.inherit(b);
                return e.series = a.Prototype.inherit(b.series), e.series.data = e.series.data.slice(0, d), 
                e;
            }, c.hasDataPoint = function(a) {
                return a && a.data && a.data.length > 0;
            }, c.prototype.lookupXValue = function(a, c) {
                var d = this.clippedData, e = b.AxisHelper.isDateTime(c);
                if (e) return new Date(a);
                if (d && d.series) {
                    var f = d.series.data;
                    if (f) {
                        var g = f[a];
                        if (g) return g.categoryValue;
                    }
                }
                return a;
            }, c.prototype.overrideXScale = function(a) {
                this.xAxisProperties = a;
            }, c.prototype.render = function(d) {
                var e = this, f = this.clippedData, g = f.series.data, h = f.hasHighlights, i = this.margin, j = this.currentViewport, k = j.width - (i.left + i.right), l = j.height - (i.top + i.bottom), m = this.xAxisProperties.scale, n = this.yAxisProperties.scale, o = this.xAxisProperties.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio), p = o / 2, q = this.colors.getColor(c.DotColorKey), r = b.dataHasSelection(g);
                this.mainGraphicsContext.attr("width", k).attr("height", l);
                var s = this.mainGraphicsContext.selectAll(c.DotClassSelector).data(g, function(a) {
                    return a.identity.getKey();
                });
                s.enter().append("circle").classed(c.DotClassName, !0), s.style({
                    fill: q.value
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.selected, a.highlight, r, h);
                }).classed("null-value", function(a) {
                    return null === a.value;
                }).attr({
                    r: function(a) {
                        return p;
                    },
                    cx: function(a) {
                        return m(a.categoryIndex) + p;
                    },
                    cy: function(a) {
                        return n(a.value);
                    }
                }), s.exit().remove();
                var t = this.mainGraphicsContext.selectAll(c.DotLabelClassSelector).data(g, function(a) {
                    return a.identity.getKey();
                });
                t.enter().append("text").classed(c.DotLabelClassName, !0).attr({
                    "text-anchor": c.DotLabelTextAnchor,
                    dy: c.DotLabelVerticalOffset
                }), t.classed("null-value", function(a) {
                    return null === a.value;
                }).classed("overflowed", !1).attr({
                    x: function(a) {
                        return m(a.categoryIndex) + p;
                    },
                    y: function(a) {
                        return n(a.value);
                    }
                }).text(function(a) {
                    return e.yAxisProperties.formatter.format(a.value);
                });
                var u = !1;
                if (t.each(function() {
                    if (!u && !$("<div>").addClass($(this).attr("class")).hasClass("null-value")) {
                        var b = a.TextMeasurementService.measureSvgTextElementWidth(this);
                        b > o && (t.classed("overflowed", !0), u = !0);
                    }
                }), t.exit().remove(), this.interactivityService) {
                    var v = {
                        dots: s,
                        datapoints: g,
                        clearCatcher: this.clearCatcher
                    };
                    this.interactivityService.apply(this, v);
                }
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, c.prototype.calculateLegend = function() {
                return this.createLegendDataPoints(0);
            }, c.prototype.hasLegend = function() {
                return this.data && this.data.hasDynamicSeries;
            }, c.prototype.createLegendDataPoints = function(d) {
                var e = this.data;
                if (!e) return null;
                var f, g = e.series, h = g.data, i = [], j = this.xAxisProperties ? this.xAxisProperties.axisType : a.ValueType.fromDescriptor({
                    text: !0
                });
                if (e.series && e.series.data) {
                    var k = e.series.data[0];
                    f = k && this.lookupXValue(k.categoryValue, j);
                }
                if (g.yCol) {
                    var l = c.formatStringProp, m = h[d], n = m && m.value, o = b.converterHelper.getFormattedLegendLabel(g.yCol, this.dataViewCategorical.values, l), p = this.colors.getColor(c.DotColorKey), q = this.dataViewCategorical.values, r = q && q.length > d ? q[d].identity : null;
                    i.push({
                        color: p.value,
                        icon: 2,
                        label: o,
                        category: b.valueFormatter.format(f, b.valueFormatter.getFormatString(g.xCol, l)),
                        measure: b.valueFormatter.format(n, b.valueFormatter.getFormatString(g.yCol, l)),
                        identity: r ? b.SelectionId.createWithId(r) : b.SelectionId.createNull(),
                        selected: !1
                    });
                }
                return {
                    dataPoints: i
                };
            }, c.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, c.converter = function(a, c) {
                var d = a.categorical, e = d.categories && d.categories.length > 0 ? d.categories[0] : {
                    source: void 0,
                    values: [ c ],
                    identity: void 0
                }, f = b.AxisHelper.getCategoryValueType(e.source), g = b.AxisHelper.isDateTime(f), h = e.values;
                if (d.values) {
                    for (var i = d.values[0], j = !!i.highlights, k = [], l = 0, m = i.values.length; m > l; l++) {
                        var n = e.identity ? b.SelectionId.createWithId(e.identity[l]) : b.SelectionId.createWithMeasure(i.source.queryName), o = h[l];
                        if (k.push({
                            categoryValue: g && o ? o.getTime() : o,
                            value: i.values[l],
                            categoryIndex: l,
                            seriesIndex: 0,
                            selected: !1,
                            identity: n,
                            highlight: !1
                        }), j) {
                            var p = b.SelectionId.createWithHighlight(n), q = i.highlights[l];
                            k.push({
                                categoryValue: g && o ? o.getTime() : o,
                                value: q,
                                categoryIndex: l,
                                seriesIndex: 0,
                                selected: !1,
                                identity: p,
                                highlight: !0
                            });
                        }
                    }
                    return {
                        series: {
                            xCol: e.source,
                            yCol: i.source,
                            data: k
                        },
                        hasHighlights: j,
                        hasDynamicSeries: !0
                    };
                }
                return {
                    series: {
                        data: []
                    },
                    hasHighlights: !1,
                    hasDynamicSeries: !1
                };
            }, c.prototype.accept = function(a, b) {
                a.visitDataDotChart(b);
            }, c.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, c.ClassName = "dataDotChart", c.DotClassName = "dot", c.DotClassSelector = ".dot", 
            c.DotColorKey = "dataDot", c.DotLabelClassName = "label", c.DotLabelClassSelector = ".label", 
            c.DotLabelVerticalOffset = "0.4em", c.DotLabelTextAnchor = "middle", c.capabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: 0
                }, {
                    name: "Y",
                    kind: 1
                } ],
                objects: {
                    general: {
                        displayName: a.data.createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Category: {
                            max: 1
                        },
                        Y: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        categories: {
                            "for": {
                                "in": "Category"
                            },
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        },
                        values: {
                            select: [ {
                                "for": {
                                    "in": "Y"
                                },
                                dataReductionAlgorithm: {
                                    top: {}
                                }
                            } ]
                        }
                    }
                } ]
            }, c;
        }();
        b.DataDotChart = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.donutChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
            }, {
                name: "Series",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Details")
            }, {
                name: "Y",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: {
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        labelDisplayUnits: {
                            displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                            type: {
                                formatting: {
                                    labelDisplayUnits: !0
                                }
                            }
                        },
                        labelPrecision: {
                            displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                categoryLabels: {
                    displayName: a.data.createDisplayNameGetter("Visual_CategoryLabels"),
                    properties: {
                        show: {
                            type: {
                                bool: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        min: 1,
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        },
                        supported: {
                            min: 1
                        }
                    }
                }
            } ],
            sorting: {
                "default": {}
            },
            supportsHighlight: !0
        }, b.donutChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(a) {
                a && (this.sliceWidthRatio = a.sliceWidthRatio, this.animator = a.animator, this.isScrollable = a.isScrollable ? a.isScrollable : !1), 
                null == this.sliceWidthRatio && (this.sliceWidthRatio = c.defaultSliceWidthRatio);
            }
            return c.converter = function(a, b, c) {
                var e = new d.DonutChartConverter(a, b);
                e.convert();
                var f = d3.layout.pie().sort(null).value(function(a) {
                    return a.percentage;
                }), g = f(e.dataPoints), h = {
                    dataPointsToDeprecate: e.dataPoints,
                    dataPoints: g,
                    unCulledDataPoints: g,
                    dataPointsToEnumerate: e.legendData.dataPoints,
                    legendData: e.legendData,
                    hasHighlights: e.hasHighlights,
                    dataLabelsSettings: e.dataLabelsSettings,
                    legendObjectProperties: e.legendObjectProperties,
                    maxValue: e.maxValue
                };
                return void 0 !== c && (h.suppressLabels = c), h;
            }, c.prototype.init = function(a) {
                this.options = a;
                var d = a.element;
                d.empty(), this.parentViewport = a.viewport, this.currentViewport = {
                    height: a.viewport.height,
                    width: a.viewport.width
                }, this.formatter = b.valueFormatter.format, this.data = {
                    dataPointsToDeprecate: [],
                    dataPointsToEnumerate: [],
                    dataPoints: [],
                    unCulledDataPoints: [],
                    legendData: {
                        title: "",
                        dataPoints: []
                    },
                    hasHighlights: !1,
                    dataLabelsSettings: b.dataLabelUtils.getDefaultDonutLabelSettings()
                }, this.drilled = !1, this.allowDrilldown = !1, this.style = a.style, this.colors = this.style.colorPalette.dataColors, 
                this.radius = 0, this.isInteractive = a.interactivity && a.interactivity.isInteractiveLegend;
                var f = this.options.settings;
                if (this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.legend = b.createLegend(d, a.interactivity && a.interactivity.isInteractiveLegend, this.interactivityService, this.isScrollable), 
                this.hostService = a.host, this.isInteractive) {
                    this.chartRotationAnimationDuration = f && f.chartRotationAnimationDuration ? f.chartRotationAnimationDuration : 0;
                    var g = this.legendContainer = d3.select(d.get(0)).append("div").classed(c.InteractiveLegendClassName, !0);
                    this.interactivityState = {
                        interactiveLegend: new e(this, g, this.colors, a),
                        valueToAngleFactor: 0,
                        sliceAngles: [],
                        currentRotate: 0,
                        interactiveChosenSliceFinishedSetting: !1,
                        lastChosenInteractiveSliceIndex: 0,
                        totalDragAngleDifference: 0,
                        currentIndexDrag: 0,
                        previousIndexDrag: 0,
                        previousDragAngle: 0,
                        donutCenter: {
                            x: 0,
                            y: 0
                        }
                    };
                }
                this.svg = d3.select(d.get(0)).append("svg").style("position", "absolute").classed(c.ClassName, !0), 
                this.clearCatcher = b.appendClearCatcher(this.svg), this.mainGraphicsContext = this.svg.append("g"), 
                this.mainGraphicsContext.append("g").classed("slices", !0), this.mainGraphicsContext.append("g").classed("labels", !0), 
                this.mainGraphicsContext.append("g").classed("lines", !0), this.pie = d3.layout.pie().sort(null).value(function(a) {
                    return a.percentage;
                });
            }, c.prototype.onDataChanged = function(a) {
                var d = a.dataViews;
                if (d && d.length > 0 && d[0].categorical ? (this.data = c.converter(d[0], this.colors), 
                this.options.interactivity && this.options.interactivity.isInteractiveLegend || this.renderLegend(), 
                this.interactivityService && this.interactivityService.applySelectionStateToData(this.data.dataPoints.map(function(a) {
                    return a.data;
                }))) : this.data = {
                    dataPointsToDeprecate: [],
                    dataPointsToEnumerate: [],
                    dataPoints: [],
                    unCulledDataPoints: [],
                    legendData: {
                        title: "",
                        dataPoints: []
                    },
                    hasHighlights: !1,
                    dataLabelsSettings: b.dataLabelUtils.getDefaultDonutLabelSettings()
                }, this.initViewportDependantProperties(), this.updateInternal(this.data, a.duration), 
                this.hasSetData = !0, d) {
                    var e = b.getInvalidValueWarnings(d, !1, !1, !1);
                    if (this.data.visibleGeometryCulled) {
                        var f = new b.SmallSlicesCulledWarning();
                        e ? e.unshift(f) : e = [ f ];
                    }
                    e && e.length > 0 && this.hostService.setWarnings(e);
                }
            }, c.prototype.onResizing = function(a, b) {
                this.parentViewport = a, this.currentViewport && this.currentViewport.height === a.height && this.currentViewport.width === a.width || (this.parentViewport = a, 
                this.hasSetData && this.renderLegend(), this.initViewportDependantProperties(b), 
                this.updateInternal(this.data, b), this.previousRadius = this.radius);
            }, c.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "legend":
                    return this.enumerateLegend();

                  case "dataPoint":
                    return this.enumerateDataPoints();

                  case "labels":
                    return this.data ? b.dataLabelUtils.enumerateDataLabels(this.data.dataLabelsSettings, !1, !0, !0) : b.dataLabelUtils.enumerateDataLabels(b.dataLabelUtils.getDefaultDonutLabelSettings(), !1, !0, !0);

                  case "categoryLabels":
                    return this.data ? b.dataLabelUtils.enumerateCategoryLabels(this.data.dataLabelsSettings, !1, !0) : b.dataLabelUtils.enumerateCategoryLabels(null, !1, !0);
                }
            }, c.prototype.enumerateDataPoints = function() {
                var a = this.data;
                if (a) {
                    for (var c = [], d = a.dataPointsToEnumerate, e = d.length, f = 0; e > f; f++) {
                        var g = d[f];
                        c.push({
                            objectName: "dataPoint",
                            displayName: g.label,
                            selector: b.ColorHelper.normalizeSelector(g.identity.getSelector()),
                            properties: {
                                fill: {
                                    solid: {
                                        color: g.color
                                    }
                                }
                            }
                        });
                    }
                    return c;
                }
            }, c.prototype.enumerateLegend = function() {
                var c = this.data;
                if (c) {
                    var d = {
                        legend: c.legendObjectProperties
                    }, e = a.DataViewObjects.getValue(d, b.donutChartProps.legend.show, this.legend.isVisible()), f = a.DataViewObjects.getValue(d, b.donutChartProps.legend.showTitle, !0), g = a.DataViewObjects.getValue(d, b.donutChartProps.legend.titleText, this.data.legendData.title);
                    return [ {
                        selector: null,
                        objectName: "legend",
                        properties: {
                            show: e,
                            position: b.LegendPosition[this.legend.getOrientation()],
                            showTitle: f,
                            titleText: g
                        }
                    } ];
                }
            }, c.prototype.setInteractiveChosenSlice = function(a) {
                var c = this;
                if (0 !== this.interactivityState.sliceAngles.length) {
                    this.interactivityState.lastChosenInteractiveSliceIndex = a, this.interactivityState.interactiveChosenSliceFinishedSetting = !1;
                    var d = this.currentViewport, e = a % this.data.dataPoints.length, f = this.interactivityState.sliceAngles[e];
                    this.svg.select("g").transition().duration(this.chartRotationAnimationDuration).ease("elastic").attr("transform", b.SVGUtil.translateAndRotate(d.width / 2, d.height / 2, 0, 0, f)).each("end", function() {
                        c.interactivityState.interactiveChosenSliceFinishedSetting = !0;
                    }), this.interactivityState.currentRotate = f, this.interactivityState.interactiveLegend.updateLegend(e), 
                    this.svg.selectAll(".slice").attr("opacity", function(a, b) {
                        return b === e ? 1 : .6;
                    }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
                }
            }, c.prototype.calculateRadius = function() {
                var a = this.currentViewport;
                if (this.isInteractive) return Math.min(a.height, a.width) / 2;
                var b = a.height / a.width, c = 2 + 1 / (1 + Math.exp(-5 * (b - 1)));
                return Math.min(a.height, a.width) / c;
            }, c.prototype.initViewportDependantProperties = function(a) {
                void 0 === a && (a = 0), this.currentViewport.height = this.parentViewport.height, 
                this.currentViewport.width = this.parentViewport.width;
                var d = this.currentViewport;
                if (this.isInteractive) d.height -= c.InteractiveLegendContainerHeight; else {
                    var e = this.legend.getMargins();
                    d.height -= e.height, d.width -= e.width;
                }
                this.svg.attr({
                    width: d.width,
                    height: d.height
                }), this.isInteractive && (this.legendContainer.style({
                    width: "100%",
                    height: c.InteractiveLegendContainerHeight + "px",
                    overflow: "hidden",
                    top: 0
                }), this.svg.style("top", c.InteractiveLegendContainerHeight)), this.previousRadius = this.radius;
                var f = this.radius = this.calculateRadius();
                this.arc = d3.svg.arc(), this.outerArc = d3.svg.arc().innerRadius(f * c.OuterArcRadiusRatio).outerRadius(f * c.OuterArcRadiusRatio), 
                this.isInteractive ? this.mainGraphicsContext.attr("transform", b.SVGUtil.translate(d.width / 2, d.height / 2)) : this.mainGraphicsContext.transition().duration(a).attr("transform", b.SVGUtil.translate(d.width / 2, d.height / 2)), 
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, c.prototype.mergeDatasets = function(b, c) {
                var d = d3.set();
                c.forEach(function(a) {
                    d.add(a.identity ? a.identity.getKey() : a.data.identity.getKey());
                });
                var e = b.filter(function(a) {
                    return !d.has(a.identity ? a.identity.getKey() : a.data.identity.getKey());
                }).map(function(b) {
                    var c = a.Prototype.inherit(b);
                    return void 0 === c.percentage ? c.data.percentage = 0 : c.percentage = 0, c;
                });
                return d3.merge([ c, e ]);
            }, c.prototype.updateInternal = function(a, d) {
                void 0 === d && (d = 0);
                var e = this.currentViewport;
                if (this.data.dataPoints = c.cullDataByViewport(a, e), this.animator) {
                    var f, g, h, i = c.getLayout(this.radius, this.sliceWidthRatio, e), j = {
                        viewModel: a,
                        colors: this.colors,
                        graphicsContext: this.mainGraphicsContext,
                        interactivityService: this.interactivityService,
                        layout: i,
                        radius: this.radius,
                        sliceWidthRatio: this.sliceWidthRatio,
                        viewport: e
                    };
                    f = this.animator.animate(j), g = f.shapes, h = f.highlightShapes, f.failed && (g = c.drawDefaultShapes(this.svg, a, i, this.colors, this.radius), 
                    h = c.drawDefaultHighlightShapes(this.svg, a, i, this.colors, this.radius), c.drawDefaultCategoryLabels(this.svg, a, i, this.sliceWidthRatio, this.radius, this.currentViewport)), 
                    this.assignInteractions(g, h, a), b.TooltipManager.addTooltip(g, function(a) {
                        return a.data.data.tooltipInfo;
                    }), b.TooltipManager.addTooltip(h, function(a) {
                        return a.data.data.tooltipInfo;
                    });
                } else this.updateInternalToMove(a, d);
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, c.prototype.renderLegend = function() {
                var a = this.data.legendObjectProperties;
                if (a) {
                    var c = this.data.legendData;
                    b.LegendData.update(c, a);
                    var d = a[b.legendProps.position];
                    d && this.legend.changeOrientation(b.LegendPosition[d]), this.legend.drawLegend(c, this.parentViewport);
                } else this.legend.changeOrientation(0), this.legend.drawLegend({
                    dataPoints: []
                }, this.parentViewport);
            }, c.prototype.addInteractiveLegendArrow = function() {
                var a = 11, d = 16.5;
                if (!this.interactiveLegendArrow) {
                    var e = this.svg.append("g");
                    e.append("path").classed(c.InteractiveLegendArrowClassName, !0).attr("d", "M1.5,2.6C0.65,1.15,1.85,0,3,0l27,0c1.65,0,2.35,1.15,1.5,2.6L18,26.45c-0.8,1.45-2.15,1.45-2.95,0L1.95,2.6z"), 
                    this.interactiveLegendArrow = e;
                }
                var f = this.currentViewport, g = (f.height - 2 * this.radius) / 2 + a, h = f.width / 2 - d;
                this.interactiveLegendArrow.attr("transform", b.SVGUtil.translate(h, g));
            }, c.prototype.calculateSliceAngles = function() {
                var a = [], b = this.data.dataPoints;
                if (0 === b.length) return this.interactivityState.valueToAngleFactor = 0, void (this.interactivityState.sliceAngles = []);
                for (var c = 0, d = 0, e = b.length; e > d; d++) c += b[d].data.percentage;
                this.interactivityState.valueToAngleFactor = 360 / c;
                for (var f = 0, d = 0, e = b.length; e > d; d++) {
                    var g = b[d].data.percentage * this.interactivityState.valueToAngleFactor;
                    f += g, a.push(g / 2 - f);
                }
                this.interactivityState.sliceAngles = a;
            }, c.prototype.assignInteractions = function(a, b, c) {
                if (this.isInteractive) this.assignInteractiveChartInteractions(a); else if (this.interactivityService) {
                    var d = {
                        clearCatcher: this.clearCatcher,
                        datapoints: c.dataPoints.map(function(a) {
                            return a.data;
                        }),
                        slices: a,
                        highlightSlices: b,
                        allowDrilldown: this.allowDrilldown,
                        visual: this,
                        hasHighlights: c.hasHighlights,
                        svg: this.svg
                    };
                    this.interactivityService.apply(this, d);
                }
            }, c.prototype.setDrilldown = function(a) {
                if (a) {
                    var b = d3.layout.pie().sort(null).value(function(a) {
                        return a.percentage;
                    }), d = [ {
                        label: a.label,
                        color: a.color,
                        icon: 0,
                        identity: a.identity,
                        selected: a.selected
                    } ], e = {
                        title: "",
                        dataPoints: d
                    }, f = b(a.internalDataPoints);
                    this.updateInternal({
                        dataPointsToDeprecate: a.internalDataPoints,
                        dataPoints: f,
                        unCulledDataPoints: f,
                        legendData: e,
                        hasHighlights: !1,
                        dataLabelsSettings: this.data.dataLabelsSettings
                    }, c.UpdateAnimationDuration);
                } else this.updateInternal(this.data, c.UpdateAnimationDuration);
            }, c.prototype.assignInteractiveChartInteractions = function(a) {
                var b = this, c = this.svg;
                this.interactivityState.interactiveChosenSliceFinishedSetting = !0;
                var d = c.node().getBoundingClientRect();
                this.interactivityState.donutCenter = {
                    x: d.left + d.width / 2,
                    y: d.top + d.height / 2
                }, this.interactivityState.totalDragAngleDifference = 0, this.interactivityState.currentRotate = 0, 
                this.calculateSliceAngles(), a.on("click", function(a, c) {
                    d3.event.defaultPrevented || b.setInteractiveChosenSlice(c);
                });
                var e = d3.behavior.drag().origin(Object).on("dragstart", function() {
                    return b.interactiveDragStart();
                }).on("drag", function() {
                    return b.interactiveDragMove();
                }).on("dragend", function() {
                    return b.interactiveDragEnd();
                });
                c.call(e);
            }, c.prototype.getAngleFromDragEvent = function() {
                var a, b, c = this.interactivityState, d = d3.event.sourceEvent;
                if (-1 !== d.type.toLowerCase().indexOf("touch")) {
                    if (1 !== d.touches.length) return null;
                    var e = d.touches[0];
                    a = e.pageX, b = e.pageY;
                } else a = d.pageX, b = d.pageY;
                var f = {
                    x: a - c.donutCenter.x,
                    y: -b + c.donutCenter.y
                }, g = 180 * Math.atan2(f.y, f.x) / Math.PI;
                return g;
            }, c.prototype.interactiveDragStart = function() {
                this.interactivityState.totalDragAngleDifference = 0, this.interactivityState.previousDragAngle = this.getAngleFromDragEvent();
            }, c.prototype.interactiveDragMove = function() {
                var a = this.data.dataPoints, d = this.currentViewport, e = this.interactivityState;
                if (e.interactiveChosenSliceFinishedSetting === !0) {
                    var f = this.getAngleFromDragEvent();
                    if (!f) return;
                    var g = e.previousDragAngle - f;
                    e.totalDragAngleDifference += g, e.previousDragAngle = f, e.currentRotate += g, 
                    this.svg.select("g").attr("transform", b.SVGUtil.translateAndRotate(d.width / 2, d.height / 2, 0, 0, this.interactivityState.currentRotate));
                    var h = a[0].data.percentage * e.valueToAngleFactor, i = e.currentRotate <= 0 ? -1 * e.currentRotate % 360 : 360 - e.currentRotate % 360;
                    e.currentIndexDrag = 0;
                    for (var j = a.length; e.currentIndexDrag < j && i > h; ) e.currentIndexDrag < j - 1 && (h += a[e.currentIndexDrag + 1].data.percentage * e.valueToAngleFactor), 
                    e.currentIndexDrag++;
                    e.currentIndexDrag !== e.previousIndexDrag && (e.interactiveLegend.updateLegend(e.currentIndexDrag), 
                    this.svg.selectAll(".slice").attr("opacity", function(a, b) {
                        return b === e.currentIndexDrag ? c.OpaqueOpacity : c.SemiTransparentOpacity;
                    }), e.previousIndexDrag = e.currentIndexDrag);
                }
            }, c.prototype.interactiveDragEnd = function() {
                0 !== this.interactivityState.totalDragAngleDifference && (this.setInteractiveChosenSlice(this.interactivityState.currentIndexDrag), 
                d3.event.sourceEvent.stopPropagation());
            }, c.prototype.addSliceLabels = function(d, e, f, g) {
                void 0 === g && (g = 0);
                var h, i, j = this.svg, k = d3.layout.pie().sort(null).value(function(a) {
                    return a.percentage;
                }), l = this.key, m = this.arc, n = this.outerArc, o = this.radius, p = this.formatter, q = this.currentViewport, r = this.sliceWidthRatio, s = r ? 2.05 / (2 * (r + (1 - r) / 2)) : 2.05, t = j.select(".labels").selectAll("text").data(k(e), l), u = a.TextMeasurementService.svgEllipsis, v = q.width / 2 - o, w = q.height < c.FontsizeThreshold ? c.SmallFontSize : c.NormalFontSize;
                t.enter().append("text").attr("dy", ".35em").style("opacity", 0).each(function(a) {
                    this._current = a;
                }), t = j.select(".labels").selectAll("text").data(k(f), l), t.text(function(a) {
                    return p(a.data.label);
                }).style("font-size", w).each(function(a) {
                    var b = d3.select(this);
                    u(b[0][0], v);
                }).transition().duration(g).attrTween("transform", function(a) {
                    var b = this, d = d3.interpolate(this._current, a);
                    return function(a) {
                        var e = d(a);
                        b._current = e;
                        var f = n.centroid(e);
                        return f[0] = o * (c.midAngle(e) < Math.PI ? 1 : -1), "translate(" + f + ")";
                    };
                }).styleTween("text-anchor", function(a) {
                    var b = d3.interpolate(this._current, a);
                    return function(a) {
                        var d = b(a);
                        return c.midAngle(d) < Math.PI ? "start" : "end";
                    };
                }).each("end", function(a) {
                    var c = 1, d = d3.select(this), e = b.SVGUtil.parseTranslateTransform(d.attr("transform")), f = parseFloat(e.y), g = d.style("text-anchor");
                    if (a.data.isLabelOverlapping = !1, g === i) {
                        var j = f - h;
                        Math.abs(j) < parseInt(w, 10) && (c = 0, a.data.isLabelOverlapping = !0);
                    }
                    1 === c && (h = f), i = g, d.style("opacity", c);
                }), t = j.select(".labels").selectAll("text").data(d, l), t.exit().transition().delay(g).remove();
                var x = j.select(".lines").selectAll("polyline").data(k(e), l);
                x.enter().append("polyline").style("opacity", 0).each(function(a) {
                    this._current = a;
                }), x = j.select(".lines").selectAll("polyline").data(k(f), l), x.transition().duration(g).attrTween("points", function(a) {
                    var b = this;
                    this._current = this._current;
                    var d = d3.interpolate(this._current, a);
                    return function(a) {
                        var e = d(a);
                        b._current = e;
                        var f = n.centroid(e);
                        f[0] = .95 * o * (c.midAngle(e) < Math.PI ? 1 : -1);
                        var g = n.centroid(e), h = m.centroid(e);
                        return h[0] *= s, h[1] *= s, [ h, g, f ];
                    };
                }).each("end", function() {
                    x.style("opacity", function(a) {
                        return a.data.isLabelOverlapping ? 0 : c.PolylineOpacity;
                    });
                }), x = j.select(".lines").selectAll("polyline").data(d, l), x.exit().transition().delay(g).remove(), 
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, c.midAngle = function(a) {
                return a.startAngle + (a.endAngle - a.startAngle) / 2;
            }, c.prototype.accept = function(a, b) {
                a.visitDonutChart(b);
            }, c.prototype.updateInternalToMove = function(a, d) {
                void 0 === d && (d = 0);
                var e = this.svg, f = this.pie, g = this.key, h = this.arc, i = this.radius, j = this.previousRadius, k = this.sliceWidthRatio, l = this.svg.select(".slices").selectAll("path" + c.sliceClass.selector).data().map(function(a) {
                    return a.data;
                });
                0 === l.length && (l = a.dataPointsToDeprecate);
                var m = this.mergeDatasets(a.dataPointsToDeprecate, l), n = this.mergeDatasets(l, a.dataPointsToDeprecate), o = e.select(".slices").selectAll("path" + c.sliceClass.selector).data(f(a.dataPointsToDeprecate), g);
                o.enter().insert("path").classed(c.sliceClass["class"], !0).each(function(a) {
                    this._current = a;
                }), o = e.select(".slices").selectAll("path" + c.sliceClass.selector).data(f(n), g);
                var p = i * k;
                if (o.style("fill", function(a) {
                    return a.data.color;
                }).style("fill-opacity", function(c) {
                    return b.ColumnUtil.getFillOpacity(c.data.selected, !1, !1, a.hasHighlights);
                }).style("stroke", "white").transition().duration(d).attrTween("d", function(a) {
                    var b = d3.interpolate(this._current, a), d = d3.interpolate(j * c.InnerArcRadiusRatio, i * c.InnerArcRadiusRatio);
                    return this._current = b(0), function(a) {
                        return h.innerRadius(p).outerRadius(d(a))(b(a));
                    };
                }), o = e.select(".slices").selectAll("path" + c.sliceClass.selector).data(f(a.dataPointsToDeprecate), g), 
                o.exit().transition().delay(d).duration(0).remove(), this.isInteractive || this.addSliceLabels(f(a.dataPointsToDeprecate), m, n, d), 
                a.hasHighlights) {
                    var q = e.select(".slices").selectAll("path" + c.sliceHighlightClass.selector).data(f(a.dataPointsToDeprecate), g);
                    q.enter().insert("path").classed(c.sliceHighlightClass["class"], !0).each(function(a) {
                        this._current = a;
                    }), q.style("fill", function(a) {
                        return a.data.color;
                    }).style("fill-opacity", 1).style("stroke", "white").transition().duration(d).attrTween("d", function(a) {
                        var b = d3.interpolate(this._current, a), d = d3.interpolate(j * c.InnerArcRadiusRatio, c.getHighlightRadius(i, k, a.data.highlightRatio));
                        return this._current = b(0), function(a) {
                            return h.innerRadius(p).outerRadius(d(a))(b(a));
                        };
                    }), q.exit().transition().delay(d).duration(0).remove();
                } else e.selectAll("path" + c.sliceHighlightClass.selector).transition().delay(d).duration(0).remove();
                this.assignInteractions(o, q, a), b.TooltipManager.addTooltip(o, function(a) {
                    return a.data.data.tooltipInfo;
                }), a.hasHighlights && b.TooltipManager.addTooltip(q, function(a) {
                    return a.data.data.tooltipInfo;
                }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options), this.isInteractive && (this.addInteractiveLegendArrow(), 
                this.interactivityState.interactiveLegend.drawLegend(this.data.dataPointsToDeprecate), 
                this.setInteractiveChosenSlice(this.interactivityState.lastChosenInteractiveSliceIndex ? this.interactivityState.lastChosenInteractiveSliceIndex : 0));
            }, c.drawDefaultShapes = function(a, d, e, f, g, h) {
                var i = b.dataHasSelection(d.dataPoints.map(function(a) {
                    return a.data;
                })), j = a.select(".slices").selectAll("path" + c.sliceClass.selector).data(d.dataPoints, function(a) {
                    return a.data.identity.getKey();
                });
                return j.enter().insert("path").classed(c.sliceClass["class"], !0), j.style("fill", function(a) {
                    return a.data.color;
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.data.selected, !1, i, d.hasHighlights);
                }).attr(e.shapeLayout), j.exit().remove(), j;
            }, c.drawDefaultHighlightShapes = function(a, d, e, f, g) {
                var h = a.select(".slices").selectAll("path" + c.sliceHighlightClass.selector).data(d.dataPoints.filter(function(a) {
                    return null != a.data.highlightRatio;
                }), function(a) {
                    return a.data.identity.getKey();
                });
                return h.enter().insert("path").classed(c.sliceHighlightClass["class"], !0).each(function(a) {
                    this._current = a;
                }), h.style("fill", function(a) {
                    return a.data.color;
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.data.selected, !0, !1, d.hasHighlights);
                }).style("stroke", "white").attr(e.highlightShapeLayout), h.exit().remove(), h;
            }, c.drawDefaultCategoryLabels = function(a, b, d, e, f, g) {
                var h = d3.svg.arc().innerRadius(0).outerRadius(f * c.InnerArcRadiusRatio), i = d3.svg.arc().innerRadius(f * c.OuterArcRadiusRatio).outerRadius(f * c.OuterArcRadiusRatio), j = b.suppressLabels || !b.dataLabelsSettings.show && !b.dataLabelsSettings.showCategory ? [] : _.filter(b.dataPoints, function(a) {
                    return null != a.data.label && !a.data.isLabelOverlapping;
                });
                c.drawDefaultCategoryLabelText(a, j, d, f, g, i), c.drawDefaultCategoryLabelLines(a, j, f, e, h, i);
            }, c.drawDefaultCategoryLabelText = function(a, d, e, f, g, h) {
                var i = b.valueFormatter.format, j = a.select(".labels").selectAll("text").data(d, function(a) {
                    return a.data.identity.getKey();
                }), k = g.width / 2 - f;
                return j.enter().append("text").attr("dy", ".35em").each(function(a) {
                    this._current = a;
                }), j.text(function(a) {
                    return i(a.data.label);
                }).style({
                    "font-size": e.fontSize,
                    "text-anchor": function(a) {
                        return c.midAngle(a) < Math.PI ? "start" : "end";
                    },
                    fill: function(a) {
                        return a.data.labelColor;
                    },
                    opacity: 1
                }).each(function(a) {
                    var c = d3.select(this);
                    c[0][0].textContent = b.dataLabelUtils.getLabelFormattedText(c[0][0].textContent, k);
                }).attr("transform", function(a) {
                    this._current = a;
                    var b = h.centroid(a);
                    return b[0] = f * (c.midAngle(a) < Math.PI ? 1 : -1), "translate(" + b + ")";
                }).each(e.categoryLabelTextOverlap), j.exit().remove(), j;
            }, c.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, c.drawDefaultCategoryLabelLines = function(a, b, d, e, f, g) {
                var h = a.select(".lines").selectAll("polyline").data(b, function(a) {
                    return a.data.identity.getKey();
                }), i = 2.05;
                return h.enter().append("polyline").each(function(a) {
                    this._current = a;
                }), h.attr("points", function(a) {
                    var b = g.centroid(a);
                    b[0] = .95 * d * (c.midAngle(a) < Math.PI ? 1 : -1);
                    var e = g.centroid(a), h = f.centroid(a);
                    return h[0] *= i, h[1] *= i, [ h, e, b ];
                }).style({
                    opacity: function(a) {
                        return a.data.isLabelOverlapping ? 0 : c.PolylineOpacity;
                    },
                    stroke: function(a) {
                        return a.data.labelColor;
                    }
                }), h.exit().remove(), h;
            }, c.getLayout = function(a, d, e) {
                var f, g, h = a * d, i = d3.svg.arc().innerRadius(h), j = i.outerRadius(a * c.InnerArcRadiusRatio), k = e.height < c.FontsizeThreshold ? c.SmallFontSize : c.NormalFontSize;
                return {
                    fontSize: k,
                    shapeLayout: {
                        d: function(a) {
                            return j(a);
                        }
                    },
                    highlightShapeLayout: {
                        d: function(b) {
                            var e = i.outerRadius(c.getHighlightRadius(a, d, b.data.highlightRatio));
                            return e(b);
                        }
                    },
                    zeroShapeLayout: {
                        d: function(a) {
                            var b = i.outerRadius(h || c.EffectiveZeroValue);
                            return b(a);
                        }
                    },
                    categoryLabelTextOverlap: function(a) {
                        var c = 1, d = d3.select(this), e = b.SVGUtil.parseTranslateTransform(d.attr("transform")), h = parseFloat(e.y), i = d.style("text-anchor");
                        if (a.data.isLabelOverlapping = !1, i === g) {
                            var j = h - f;
                            Math.abs(j) < parseInt(k, 10) && (c = 0, a.data.isLabelOverlapping = !0);
                        }
                        1 === c ? f = h : d.style("opacity", c), g = i;
                    }
                };
            }, c.getHighlightRadius = function(a, b, d) {
                var e = a * b;
                return e + d * a * (c.InnerArcRadiusRatio - b);
            }, c.cullDataByViewport = function(a, b) {
                for (var c = a.unCulledDataPoints, d = Math.min(b.width, b.height) / 2, e = this.invisibleArcLengthInPixels / d, f = this.minimumArcLengthInPixels / d, g = .01 * a.maxValue, h = [], i = !1, j = 0, k = c.length; k > j; j++) {
                    var l = c[j], m = Math.abs(l.endAngle - l.startAngle);
                    m >= e && (m >= f || l.value > g ? h.push(l) : i = !0);
                }
                return a.visibleGeometryCulled = i, h;
            }, c.ClassName = "donutChart", c.InteractiveLegendClassName = "donutLegend", c.InteractiveLegendArrowClassName = "donutLegendArrow", 
            c.UpdateAnimationDuration = 1e3, c.OuterArcRadiusRatio = .9, c.InnerArcRadiusRatio = .8, 
            c.FontsizeThreshold = 150, c.SmallFontSize = "8px", c.NormalFontSize = "11px", c.InteractiveLegendContainerHeight = 70, 
            c.OpaqueOpacity = 1, c.SemiTransparentOpacity = .6, c.defaultSliceWidthRatio = .48, 
            c.invisibleArcLengthInPixels = 2, c.minimumArcLengthInPixels = 4, c.sliceClass = {
                "class": "slice",
                selector: ".slice"
            }, c.sliceHighlightClass = {
                "class": "slice-highlight",
                selector: ".slice-highlight"
            }, c.EffectiveZeroValue = 1e-9, c.PolylineOpacity = .5, c;
        }();
        b.DonutChart = c;
        var d, e = function() {
            function a(a, b, c, d) {
                this.legendContainerParent = b, this.colors = c, this.donutChart = a, this.visualInitOptions = d, 
                this.legendItemsPositions = [];
                var e = d.settings;
                this.legendTransitionAnimationDuration = e && e.legendTransitionAnimationDuration ? e.legendTransitionAnimationDuration : 0;
            }
            return a.prototype.drawLegend = function(c) {
                var d = this;
                this.data = c, this.currentNumberOfLegendItems = c.length, this.currentIndex = 0, 
                this.leftMostIndex = 0, this.rightMostIndex = c.length - 1, this.legendContainerParent.select(a.LegendContainerSelector).empty() && (this.legendContainer = this.legendContainerParent.append("div").classed(a.LegendContainerClassName, !0));
                var e = this.legendContainer.selectAll(a.LegendItemSelector).data(c), f = this.legendContainerWidth = this.legendContainer.node().getBoundingClientRect().width, g = f / 2 - .4 * f / 2 + a.ItemMargin, h = g;
                this.currentXOffset = g;
                var i = function(c, e) {
                    c.attr("data-legend-index", e.index).css({
                        position: "absolute",
                        left: h
                    });
                    var f = b.valueFormatter.format(e.label), g = b.valueFormatter.format(e.measure, e.measureFormat), i = b.valueFormatter.format(e.percentage, "0.00 %;-0.00 %;0.00 %"), j = e.color, k = a.createBasicLegendItemSpan(a.LegendItemValueClassName, g, 11), l = a.createBasicLegendItemSpan(a.LegendItemCategoryClassName, f, 11), m = a.createBasicLegendItemSpan(a.LegendItemPercentageClassName, i, 20), n = a.spanWidth(k), o = a.spanWidth(l), p = a.spanWidth(m), q = a.legendBoxSize(n, o, p);
                    c.css("width", q);
                    var r = function(a) {
                        return q - a > 0 ? (q - a) / 2 : 0;
                    }, s = r(n), t = r(o), u = r(p);
                    a.createLegendItemSpan(l, t), a.createLegendItemSpan(k, s), a.createLegendItemSpan(m, u).css("color", j), 
                    c.append(l), c.append(m), c.append(k), d.legendItemsPositions.push({
                        startX: h,
                        boxWidth: q
                    }), h += q + a.ItemMargin;
                };
                e.enter().insert("div").classed(a.LegendItemClassName, !0).each(function(a) {
                    i($(this), a);
                }), e.exit().remove(), this.assignInteractions();
            }, a.prototype.updateLegend = function(a) {
                var c = this;
                if (!(this.currentNumberOfLegendItems <= 1)) {
                    var d = this.legendContainerWidth;
                    this.currentIndex = a, this.updateLabelBlocks(a);
                    var e = this.legendTransitionAnimationDuration, f = -1 * (this.legendItemsPositions[a].startX + this.legendItemsPositions[a].boxWidth / 2 - d / 2);
                    this.legendContainer.transition().styleTween("-webkit-transform", function(a, d, e) {
                        return d3.interpolate(b.SVGUtil.translateWithPixels(c.currentXOffset, 0), b.SVGUtil.translateWithPixels(f, 0));
                    }).styleTween("transform", function(a, d, e) {
                        return d3.interpolate(b.SVGUtil.translateWithPixels(c.currentXOffset, 0), b.SVGUtil.translateWithPixels(f, 0));
                    }).duration(e).ease("bounce").each("end", function() {
                        c.currentXOffset = f;
                    }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.visualInitOptions);
                }
            }, a.prototype.assignInteractions = function() {
                var b = this, c = 0, d = !1, e = function() {
                    c = 0, d = !1;
                }, f = function() {
                    if (c += d3.event.dx, !(d || Math.abs(c) < a.MinimumSwipeDX)) {
                        var e = 0 > c;
                        b.dragLegend(e), d = !0;
                    }
                }, g = d3.behavior.drag().origin(Object).on("drag", f).on("dragstart", e);
                this.legendContainer.call(g);
            }, a.prototype.dragLegend = function(b) {
                this.currentNumberOfLegendItems > a.MinimumItemsInLegendForCycled - 1 ? this.currentIndex = this.getCyclingCurrentIndex(b) : this.shouldChangeIndexInNonCycling(b) && (b ? this.currentIndex++ : this.currentIndex--), 
                this.donutChart.setInteractiveChosenSlice(this.currentIndex);
            }, a.prototype.shouldChangeIndexInNonCycling = function(a) {
                return 0 === this.currentIndex && !a || this.currentIndex === this.currentNumberOfLegendItems - 1 && a ? !1 : !0;
            }, a.prototype.getCyclingCurrentIndex = function(a) {
                var b = this.data.length, c = a ? 1 : -1, d = (this.currentIndex + c) % (b || 1);
                return 0 > d ? d + b : d;
            }, a.prototype.updateLegendItemsBlocks = function(b, c) {
                var d = $(this.legendContainer[0]);
                if (b) {
                    var e = d.find("[data-legend-index=" + this.leftMostIndex + "]");
                    e.remove().insertAfter(d.find("[data-legend-index=" + this.rightMostIndex + "]"));
                    var f = this.legendItemsPositions[this.rightMostIndex].startX + this.legendItemsPositions[this.rightMostIndex].boxWidth + a.ItemMargin;
                    this.legendItemsPositions[this.leftMostIndex].startX = f, e.css("left", f), this.rightMostIndex = this.leftMostIndex, 
                    this.leftMostIndex = (this.leftMostIndex + 1) % this.data.length;
                } else {
                    var g = d.find("[data-legend-index=" + this.rightMostIndex + "]");
                    g.remove().insertBefore(d.find("[data-legend-index=" + this.leftMostIndex + "]"));
                    var f = this.legendItemsPositions[this.leftMostIndex].startX - this.legendItemsPositions[this.rightMostIndex].boxWidth - a.ItemMargin;
                    this.legendItemsPositions[this.rightMostIndex].startX = f, g.css("left", f), this.leftMostIndex = this.rightMostIndex, 
                    this.rightMostIndex = this.rightMostIndex - 1 === -1 ? this.legendItemsPositions.length - 1 : this.rightMostIndex - 1;
                }
                c - 1 !== 0 && this.updateLegendItemsBlocks(b, c - 1);
            }, a.prototype.updateLabelBlocks = function(b) {
                this.currentNumberOfLegendItems > a.MinimumItemsInLegendForCycled ? (this.rightMostIndex === b && this.updateLegendItemsBlocks(!0, 2), 
                this.leftMostIndex === b && this.updateLegendItemsBlocks(!1, 2), (this.rightMostIndex === b + 1 || 0 === this.rightMostIndex && b === this.currentNumberOfLegendItems - 1) && this.updateLegendItemsBlocks(!0, 1), 
                (this.leftMostIndex === b - 1 || this.leftMostIndex === this.currentNumberOfLegendItems - 1 && 0 === b) && this.updateLegendItemsBlocks(!1, 1)) : this.currentNumberOfLegendItems === a.MinimumItemsInLegendForCycled && (this.rightMostIndex === b && this.updateLegendItemsBlocks(!0, 1), 
                this.leftMostIndex === b && this.updateLegendItemsBlocks(!1, 1));
            }, a.createBasicLegendItemSpan = function(a, b, c) {
                return $("<span/>").addClass(a).css({
                    "white-space": "nowrap",
                    "font-size": c + "px"
                }).text(b);
            }, a.createLegendItemSpan = function(a, b) {
                return a.css({
                    overflow: "hidden",
                    "text-overflow": "ellipsis",
                    display: "inline-block",
                    width: "100%",
                    "margin-left": b
                }), a;
            }, a.legendBoxSize = function(b, c, d) {
                var e = b > c ? b : c;
                return e = e > d ? e : d, e = e > a.MaxLegendItemBoxSize ? a.MaxLegendItemBoxSize : e + 2;
            }, a.spanWidth = function(a) {
                return this.FakeElementSpan || (this.FakeElementSpan = $("<span>").hide().appendTo(document.body)), 
                this.FakeElementSpan.empty(), this.FakeElementSpan.append(a), this.FakeElementSpan.width();
            }, a.LegendContainerClassName = "legend-container", a.LegendContainerSelector = ".legend-container", 
            a.LegendItemClassName = "legend-item", a.LegendItemSelector = ".legend-item", a.LegendItemCategoryClassName = "category", 
            a.LegendItemPercentageClassName = "percentage", a.LegendItemValueClassName = "value", 
            a.MaxLegendItemBoxSize = 160, a.ItemMargin = 30, a.MinimumSwipeDX = 15, a.MinimumItemsInLegendForCycled = 3, 
            a;
        }();
        !function(a) {
            var d = function() {
                function a(a, c) {
                    var d = a.categorical;
                    if (this.dataViewCategorical = d, this.dataViewMetadata = a.metadata, this.seriesCount = d.values ? d.values.length : 0, 
                    this.colorHelper = new b.ColorHelper(c, b.donutChartProps.dataPoint.fill), this.maxValue = 0, 
                    d.categories && d.categories.length > 0) {
                        var e = d.categories[0];
                        this.categoryIdentities = e.identity, this.categoryValues = e.values, this.allCategoryObjects = e.objects, 
                        this.categoryColumnRef = e.identityFields, this.categoryFormatString = b.valueFormatter.getFormatString(e.source, b.donutChartProps.general.formatString);
                    }
                    var f = this.grouped = d && d.values ? d.values.grouped() : void 0;
                    this.isMultiMeasure = f && f.length > 0 && f[0].values && f[0].values.length > 1, 
                    this.isSingleMeasure = f && 1 === f.length && f[0].values && 1 === f[0].values.length, 
                    this.hasHighlights = this.seriesCount > 0 && !!d.values[0].highlights, this.highlightsOverflow = !1, 
                    this.total = 0, this.highlightTotal = 0, this.dataPoints = [], this.legendDataPoints = [], 
                    this.dataLabelsSettings = null;
                    for (var g = 0; g < this.seriesCount; g++) for (var h = d.values[g], i = 0; i < h.values.length; i++) this.total += Math.abs(h.values[i]), 
                    this.highlightTotal += this.hasHighlights ? Math.abs(h.highlights[i]) : 0;
                }
                return a.prototype.convert = function() {
                    var a;
                    a = 0 !== this.total ? this.categoryValues ? this.convertCategoricalWithSlicing() : this.isSingleMeasure || this.isMultiMeasure ? this.convertMeasures() : this.convertSeries() : [];
                    for (var d = !1, e = 0, f = a.length; f > e && !d; e++) {
                        var g = a[e];
                        Math.abs(g.highlight.measure) > Math.abs(g.nonHighlight.measure) && (d = !0);
                    }
                    this.dataLabelsSettings = this.convertDataLableSettings();
                    var h = this.dataViewMetadata;
                    if (h) {
                        var i = h.objects;
                        i && (this.legendObjectProperties = i.legend);
                    }
                    this.dataPoints = [];
                    for (var j = b.donutChartProps.general.formatString, k = b.valueFormatter.create(b.dataLabelUtils.getLabelFormatterOptions(this.dataLabelsSettings)), e = 0, f = a.length; f > e; e++) {
                        var g = a[e], l = g.nonHighlight.measure, m = this.total > 0 ? g.nonHighlight.value / this.total : 0, n = 0;
                        g.nonHighlight.value > this.maxValue && (this.maxValue = g.nonHighlight.value), 
                        g.highlight.value > this.maxValue && (this.maxValue = g.nonHighlight.value), this.hasHighlights && (d ? (l = g.highlight.measure, 
                        m = this.highlightTotal > 0 ? g.highlight.value / this.highlightTotal : 0, n = 1) : n = g.highlight.value / g.nonHighlight.value, 
                        n || (n = c.EffectiveZeroValue));
                        var o = k.format(l);
                        this.dataLabelsSettings.showCategory && this.dataLabelsSettings.show ? g.label += " " + o : g.label = this.dataLabelsSettings.show ? o : g.label;
                        var p = l, q = g.categoryLabel, r = this.dataViewCategorical, s = r.categories ? null : e;
                        s = void 0 !== g.seriesIndex ? g.seriesIndex : s;
                        var t = this.hasHighlights && 0 !== g.highlight.value ? g.highlight.measure : void 0, u = b.TooltipBuilder.createTooltipInfo(j, r.categories, q, r.values, p, null, s, t);
                        this.dataPoints.push({
                            identity: g.identity,
                            measure: l,
                            measureFormat: g.measureFormat,
                            percentage: m,
                            index: g.index,
                            label: g.label,
                            highlightRatio: n,
                            selected: !1,
                            tooltipInfo: u,
                            color: g.color,
                            labelColor: this.dataLabelsSettings.labelColor
                        });
                    }
                    this.legendData = {
                        title: this.getLegendTitle(),
                        dataPoints: this.legendDataPoints
                    };
                }, a.prototype.getLegendTitle = function() {
                    if (0 !== this.total) {
                        var a = this.dataViewCategorical.values && this.dataViewCategorical.values.source ? this.dataViewCategorical.values.source.displayName : "", b = this.dataViewCategorical.categories && this.dataViewCategorical.categories.length > 0 && this.dataViewCategorical.categories[0].source ? this.dataViewCategorical.categories[0].source.displayName : "";
                        return this.categoryValues ? b : a;
                    }
                    return "";
                }, a.prototype.convertCategoricalWithSlicing = function() {
                    for (var a = this.dataViewCategorical, c = b.donutChartProps.general.formatString, d = [], e = 0, f = this.categoryValues.length; f > e; e++) {
                        for (var g = this.categoryValues[e], h = this.allCategoryObjects ? this.allCategoryObjects[e] : void 0, i = b.SelectionId.createWithId(this.categoryIdentities[e]), j = this.colorHelper.getColorForSeriesValue(h, this.categoryColumnRef, g), k = b.valueFormatter.format(g, this.categoryFormatString), l = 0; l < this.seriesCount; l++) {
                            var m = a.values[l], n = this.isSingleMeasure ? k : b.converterHelper.getFormattedLegendLabel(m.source, a.values, c), o = m.values[e] || 0, p = this.hasHighlights ? m.highlights[e] || 0 : 0, q = this.isMultiMeasure ? b.SelectionId.createWithIdAndMeasure(this.categoryIdentities[e], m.source.queryName) : b.SelectionId.createWithIds(this.categoryIdentities[e], m.identity), r = {
                                identity: q,
                                measureFormat: b.valueFormatter.getFormatString(m.source, c, !0),
                                nonHighlight: {
                                    measure: o,
                                    value: Math.abs(o)
                                },
                                highlight: {
                                    measure: p,
                                    value: Math.abs(p)
                                },
                                index: e,
                                label: n,
                                categoryLabel: k,
                                color: j,
                                seriesIndex: l
                            };
                            d.push(r);
                        }
                        this.legendDataPoints.push({
                            label: k,
                            color: j,
                            icon: 0,
                            identity: i,
                            selected: !1
                        });
                    }
                    return d;
                }, a.prototype.convertMeasures = function() {
                    for (var a = this.dataViewCategorical, c = [], d = b.donutChartProps.general.formatString, e = 0; e < this.seriesCount; e++) {
                        var f = a.values[e], g = b.valueFormatter.getFormatString(f.source, d, !0), h = f.source.displayName, i = b.SelectionId.createWithMeasure(f.source.queryName), j = f.values[0] || 0, k = this.hasHighlights ? f.highlights[0] || 0 : 0, l = this.colorHelper.getColorForMeasure(f.source.objects, f.source.queryName), m = {
                            identity: i,
                            measureFormat: g,
                            nonHighlight: {
                                measure: j,
                                value: Math.abs(j)
                            },
                            highlight: {
                                measure: k,
                                value: Math.abs(k)
                            },
                            index: e,
                            label: h,
                            categoryLabel: h,
                            color: l
                        };
                        c.push(m), this.legendDataPoints.push({
                            label: m.label,
                            color: m.color,
                            icon: 0,
                            identity: m.identity,
                            selected: !1
                        });
                    }
                    return c;
                }, a.prototype.convertSeries = function() {
                    for (var a = this.dataViewCategorical, c = [], d = b.donutChartProps.general.formatString, e = 0; e < this.seriesCount; e++) {
                        var f = a.values[e], g = b.valueFormatter.getFormatString(f.source, d, !0), h = b.converterHelper.getFormattedLegendLabel(f.source, a.values, d), i = b.SelectionId.createWithId(f.identity), j = b.converterHelper.getSeriesName(f.source), k = f.objects && f.objects[0], l = f.values[0] || 0, m = this.hasHighlights ? f.highlights[0] || 0 : 0, n = this.colorHelper.getColorForSeriesValue(k, a.values.identityFields, j), o = {
                            identity: i,
                            measureFormat: g,
                            nonHighlight: {
                                measure: l,
                                value: Math.abs(l)
                            },
                            highlight: {
                                measure: m,
                                value: Math.abs(m)
                            },
                            index: e,
                            label: h,
                            categoryLabel: h,
                            color: n,
                            seriesIndex: e
                        };
                        c.push(o), this.legendDataPoints.push({
                            label: o.label,
                            color: o.color,
                            icon: 0,
                            identity: o.identity,
                            selected: !1
                        });
                    }
                    return c;
                }, a.prototype.convertDataLableSettings = function() {
                    var a = this.dataViewMetadata, c = b.dataLabelUtils.getDefaultDonutLabelSettings();
                    if (a) {
                        var d = a.objects;
                        if (d) {
                            var e = d.labels;
                            e && (void 0 !== e.show && (c.show = e.show), void 0 !== e.color && (c.labelColor = e.color.solid.color, 
                            c.overrideDefaultColor = !0), void 0 !== e.labelDisplayUnits && (c.displayUnits = e.labelDisplayUnits), 
                            void 0 !== e.labelPrecision && (c.precision = e.labelPrecision >= 0 ? e.labelPrecision : 0)), 
                            c.formatterOptions = b.dataLabelUtils.getFormatterOptionsColumn(a.columns);
                            var f = d.categoryLabels;
                            if (f) {
                                var g = f.show;
                                void 0 !== g && (c.showCategory = g);
                            }
                        }
                    }
                    return c;
                }, a;
            }();
            a.DonutChartConverter = d;
        }(d || (d = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.filledMapCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Location"),
                preferredTypes: [ {
                    geography: {
                        address: !0
                    }
                }, {
                    geography: {
                        city: !0
                    }
                }, {
                    geography: {
                        continent: !0
                    }
                }, {
                    geography: {
                        country: !0
                    }
                }, {
                    geography: {
                        county: !0
                    }
                }, {
                    geography: {
                        place: !0
                    }
                }, {
                    geography: {
                        postalCode: !0
                    }
                }, {
                    geography: {
                        region: !0
                    }
                }, {
                    geography: {
                        stateOrProvince: !0
                    }
                } ]
            }, {
                name: "Series",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
            }, {
                name: "Size",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        defaultColor: {
                            displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        showAllDataPoints: {
                            displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                            type: {
                                bool: !0
                            }
                        },
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Size",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "Size"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            sorting: {
                custom: {}
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.funnelChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Group")
            }, {
                name: "Y",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            }, {
                name: "Gradient",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Gradient")
            } ],
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 0
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 0
                    },
                    Y: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 1
                        }
                    }
                }
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        defaultColor: {
                            displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        labelPosition: {
                            displayName: a.data.createDisplayNameGetter("Visual_Position"),
                            type: {
                                formatting: {
                                    labelPosition: !0
                                }
                            }
                        },
                        labelDisplayUnits: {
                            displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                            type: {
                                formatting: {
                                    labelDisplayUnits: !0
                                }
                            }
                        },
                        labelPrecision: {
                            displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                }
            },
            supportsHighlight: !0,
            sorting: {
                "default": {}
            }
        }, b.funnelChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(b) {
                this.labelPositionObjects = [ a.labelPosition.outsideEnd, a.labelPosition.insideCenter ], 
                b && b.animator && (this.animator = b.animator);
            }
            return c.converter = function(a, c, d) {
                var e = [], f = b.funnelChartProps.general.formatString, g = a.metadata ? a.metadata.columns.filter(function(a) {
                    return a.isMeasure;
                }) : [], h = a.categorical.categories || [], i = a.categorical.values, j = i && i[0] && !!i[0].highlights, k = !1, l = a.categorical, m = b.dataLabelUtils.getDefaultFunnelLabelSettings(d), n = new b.ColorHelper(c, b.funnelChartProps.dataPoint.fill, d);
                if (a && a.metadata && a.metadata.objects) {
                    var o = a.metadata.objects.labels;
                    o && (m.show = void 0 !== o.show ? o.show : m.show, m.position = void 0 !== o.labelPosition ? o.labelPosition : m.position, 
                    void 0 !== o.color && (m.labelColor = o.color.solid.color, m.overrideDefaultColor = !0), 
                    void 0 !== o.labelDisplayUnits && (m.displayUnits = o.labelDisplayUnits), void 0 !== o.labelPrecision && (m.precision = o.labelPrecision >= 0 ? o.labelPrecision : 0)), 
                    m.formatterOptions = b.dataLabelUtils.getFormatterOptionsColumn(a.metadata.columns);
                }
                if (1 === h.length && h[0].values.length > 1 && i) for (var p = h[0], q = p.values, r = b.valueFormatter.getFormatString(p.source, f), s = 0, t = q.length; t > s; s++) {
                    var u = i[0].source.queryName, v = p.identity ? b.SelectionId.createWithIdAndMeasure(p.identity[s], u) : b.SelectionId.createWithMeasure(u), w = d3.sum(i.map(function(a) {
                        return a.values[s];
                    })), x = b.valueFormatter.format(q[s], r), y = b.TooltipBuilder.createTooltipInfo(f, l.categories, x, l.values, w, null, 0);
                    if (j) {
                        var z = d3.sum(i.map(function(a) {
                            return a.highlights[s];
                        }));
                        0 !== z && (y = b.TooltipBuilder.createTooltipInfo(f, l.categories, x, l.values, w, null, 0, z));
                    }
                    var A = n.getColorForMeasure(p.objects && p.objects[s], "");
                    if (e.push({
                        label: x,
                        value: w,
                        categoryOrMeasureIndex: s,
                        identity: v,
                        selected: !1,
                        key: v.getKey(),
                        tooltipInfo: y,
                        color: A,
                        labelFill: m.overrideDefaultColor ? m.labelColor : A
                    }), j) {
                        var B = b.SelectionId.createWithHighlight(v), z = d3.sum(i.map(function(a) {
                            return a.highlights[s];
                        }));
                        z > w && (k = !0);
                        var C = 0 !== z ? z : void 0, y = b.TooltipBuilder.createTooltipInfo(f, l.categories, x, l.values, w, null, 0, C);
                        e.push({
                            label: x,
                            value: w,
                            categoryOrMeasureIndex: s,
                            identity: B,
                            selected: !1,
                            key: B.getKey(),
                            highlight: !0,
                            highlightValue: z,
                            tooltipInfo: y,
                            color: A
                        });
                    }
                } else if (g.length > 0 && i) for (var s = 0, D = i.length; D > s; s++) {
                    var E = i[s], w = d3.sum(E.values), v = b.SelectionId.createWithMeasure(E.source.queryName), F = g[s].displayName, G = l.categories ? null : s, y = b.TooltipBuilder.createTooltipInfo(f, l.categories, F, l.values, w, null, G), A = n.getColorForMeasure(E.source.objects, "");
                    if (j) {
                        var z = d3.sum(i.map(function(a) {
                            return a.highlights[s];
                        }));
                        0 !== z && (y = b.TooltipBuilder.createTooltipInfo(f, l.categories, F, l.values, w, null, 0, z));
                    }
                    if (e.push({
                        label: g[s].displayName,
                        value: w,
                        categoryOrMeasureIndex: s,
                        identity: v,
                        selected: !1,
                        key: v.getKey(),
                        tooltipInfo: y,
                        color: A,
                        labelFill: m.overrideDefaultColor ? m.labelColor : A
                    }), j) {
                        var B = b.SelectionId.createWithHighlight(v), z = d3.sum(i[s].highlights);
                        z > w && (k = !0);
                        var C = 0 !== z ? z : void 0, y = b.TooltipBuilder.createTooltipInfo(f, l.categories, F, l.values, w, null, 0, C);
                        e.push({
                            label: g[s].displayName,
                            value: w,
                            categoryOrMeasureIndex: s,
                            identity: B,
                            key: B.getKey(),
                            selected: !1,
                            highlight: !0,
                            highlightValue: z,
                            tooltipInfo: y,
                            color: A
                        });
                    }
                }
                return {
                    slices: e,
                    valuesMetadata: g,
                    hasHighlights: j,
                    highlightsOverflow: k,
                    dataLabelsSettings: m
                };
            }, c.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "dataPoint":
                    var c = this.dataViews && this.dataViews.length > 0 && this.dataViews[0] && this.dataViews[0].categorical, d = b.GradientUtils.hasGradientRole(c);
                    if (!d) return this.enumerateDataPoints();
                    break;

                  case "labels":
                    return b.dataLabelUtils.enumerateDataLabels(this.data.dataLabelsSettings, !0, !0, !0, this.labelPositionObjects);
                }
            }, c.prototype.enumerateDataPoints = function() {
                var a = this.data;
                if (a) {
                    var c = [], d = a.slices;
                    c.push({
                        objectName: "dataPoint",
                        selector: null,
                        properties: {
                            defaultColor: {
                                solid: {
                                    color: this.defaultDataPointColor || this.colors.getColor(0).value
                                }
                            }
                        }
                    });
                    for (var e = 0; e < d.length; e++) {
                        var f = d[e];
                        if (!f.highlight) {
                            var g = f.color, h = f.identity.getSelector(), i = !!h.data, j = {
                                objectName: "dataPoint",
                                displayName: f.label,
                                selector: b.ColorHelper.normalizeSelector(h, i),
                                properties: {
                                    fill: {
                                        solid: {
                                            color: g
                                        }
                                    }
                                }
                            };
                            c.push(j);
                        }
                    }
                    return c;
                }
            }, c.prototype.init = function(a) {
                this.options = a;
                var d = a.element, e = this.svg = d3.select(d.get(0)).append("svg").classed(c.VisualClassName, !0);
                this.clearCatcher = b.appendClearCatcher(this.svg), this.currentViewport = a.viewport, 
                this.margin = {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                };
                var f = a.style;
                this.colors = f.colorPalette.dataColors, this.hostServices = a.host, this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.funnelGraphicsContext = e.append("g"), this.axisGraphicsContext = e.append("g");
                var g = this.labelGraphicsContext = e.append("g");
                g.classed(c.InnerTextGroupClassName, !0), this.updateViewportProperties();
            }, c.prototype.updateViewportProperties = function() {
                var a = this.currentViewport;
                this.svg.attr("width", a.width).attr("height", a.height);
            }, c.prototype.update = function(d) {
                this.data = {
                    slices: [],
                    valuesMetadata: [],
                    hasHighlights: !1,
                    highlightsOverflow: !1,
                    dataLabelsSettings: b.dataLabelUtils.getDefaultFunnelLabelSettings()
                };
                var e = this.dataViews = d.dataViews;
                if (this.currentViewport = d.viewport, e && e.length > 0) {
                    var f = e[0];
                    if (f.metadata && f.metadata.objects) {
                        var g = a.DataViewObjects.getFillColor(f.metadata.objects, b.funnelChartProps.dataPoint.defaultColor);
                        g && (this.defaultDataPointColor = g);
                    }
                    f.categorical && (this.data = c.converter(f, this.colors, this.defaultDataPointColor), 
                    this.interactivityService && this.interactivityService.applySelectionStateToData(this.data.slices));
                    var h = b.getInvalidValueWarnings(e, !1, !1, !1);
                    h && h.length > 0 && this.hostServices.setWarnings(h);
                }
                this.updateViewportProperties(), this.updateInternal(!0);
            }, c.prototype.onDataChanged = function(a) {
                this.update({
                    dataViews: a.dataViews,
                    duration: a.duration || 0,
                    viewport: this.currentViewport
                });
            }, c.prototype.onResizing = function(a, b) {
                this.currentViewport = a, this.update({
                    dataViews: this.dataViews,
                    duration: b,
                    viewport: this.currentViewport
                });
            }, c.prototype.getMaxLeftMargin = function(b, d) {
                for (var e = 0, f = a.TextMeasurementService.measureSvgTextWidth, g = 0, h = b.length; h > g; g++) d.text = b[g], 
                e = Math.max(e, f(d));
                return e + c.LabelFunnelPadding;
            }, c.prototype.updateInternal = function(a) {
                if (null != this.data) {
                    var d = this.data, e = d.slices, f = e.filter(function(a) {
                        return !a.highlight;
                    }), g = this.setUpAxis(), h = g.margin, i = g.verticalRange, j = this.funnelGraphicsContext.attr("transform", b.SVGUtil.translateAndRotate(h.left, h.top, i / 2, i / 2, 90));
                    this.svg.style("font-size", c.StandardTextProperties.fontSize), this.svg.style("font-weight", c.StandardTextProperties.fontWeight), 
                    this.svg.style("font-family", c.StandardTextProperties.fontFamily);
                    var k, l, m, n = c.getLayout(d, g), o = b.dataLabelUtils.getFunnelChartLabelLayout(d, g, c.InnerTextHeightDelta, c.InnerTextMinimumPadding, d.dataLabelsSettings, this.currentViewport);
                    if (this.animator) {
                        var p = {
                            viewModel: d,
                            interactivityService: this.interactivityService,
                            layout: n,
                            axisGraphicsContext: this.axisGraphicsContext,
                            shapeGraphicsContext: j,
                            labelGraphicsContext: this.labelGraphicsContext,
                            axisOptions: g,
                            slicesWithoutHighlights: f,
                            colors: this.colors,
                            labelLayout: o
                        };
                        k = this.animator.animate(p), l = k.shapes, m = k.dataLabels;
                    }
                    if (this.animator && a && !k.failed || (c.drawDefaultAxis(this.axisGraphicsContext, g), 
                    l = c.drawDefaultShapes(d, e, j, n, this.colors), d.dataLabelsSettings.show && !g.hideInnerLabels ? b.dataLabelUtils.drawDefaultLabelsForFunnelChart(f, this.labelGraphicsContext, o) : b.dataLabelUtils.cleanDataLabels(this.labelGraphicsContext)), 
                    this.interactivityService) {
                        var q = {
                            datapoints: e,
                            bars: l,
                            labels: m,
                            clearCatcher: this.clearCatcher,
                            hasHighlights: d.hasHighlights
                        };
                        this.interactivityService.apply(this, q);
                    }
                    b.TooltipManager.addTooltip(l, function(a) {
                        return a.data.tooltipInfo;
                    }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
                }
            }, c.prototype.setUpAxis = function() {
                var a = this.data, b = a.slices, d = b.filter(function(a) {
                    return !a.highlight;
                }), e = d.map(function(a) {
                    return a.label;
                }), f = !1, g = this.currentViewport, h = this.margin, i = g.height - (h.top + h.bottom);
                if (e.length > 0 && i / e.length < c.MinBarThickness) e = [], f = !0; else {
                    var j = c.StandardTextProperties;
                    h.left = this.getMaxLeftMargin(e, j);
                }
                var k = g.width - (h.left + h.right), l = c.BarToSpaceRatio, m = d3.max(b.map(function(a) {
                    return a.value;
                })), n = 0, o = 0, p = i;
                if (e.length > 0 && i / e.length > c.MaxBarWidth) {
                    var q = i - e.length * c.MaxBarWidth;
                    o = Math.ceil(q / 2), p = Math.ceil(i - q / 2), l = c.BarToSpaceRatio;
                }
                var r = d3.scale.linear().domain([ n, m ]).range([ k, 0 ]), s = d3.scale.ordinal().domain(d3.range(0, d.length)).rangeBands([ o, p ], l);
                return {
                    margin: h,
                    xScale: s,
                    yScale: r,
                    maxScore: m,
                    verticalRange: k,
                    rangeStart: o,
                    rangeEnd: p,
                    barToSpaceRatio: l,
                    hideInnerLabels: f,
                    categoryLabels: e
                };
            }, c.prototype.accept = function(a, b) {
                a.visitFunnel(b);
            }, c.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, c.getLayout = function(a, b) {
                var d = a.highlightsOverflow, e = b.yScale, f = b.xScale, g = b.maxScore, h = f.rangeBand(), i = h * c.OverflowingHighlightWidthRatio, j = i / 2;
                return {
                    shapeLayout: {
                        width: function(a) {
                            return a.highlight && d ? i : h;
                        },
                        height: function(a) {
                            return Math.abs(e(a.highlight ? a.highlightValue : a.value) - e(0));
                        },
                        x: function(a) {
                            return f(a.categoryOrMeasureIndex) + (a.highlight && d ? j : 0);
                        },
                        y: function(a) {
                            return e(a.highlight ? a.highlightValue : a.value) - (Math.abs(e(g) - e(0)) - Math.abs(e(a.highlight ? a.highlightValue : a.value) - e(0))) / 2;
                        }
                    },
                    shapeLayoutWithoutHighlights: {
                        width: function(a) {
                            return h;
                        },
                        height: function(a) {
                            return Math.abs(e(a.value) - e(0));
                        },
                        x: function(a) {
                            return f(a.categoryOrMeasureIndex) + 0;
                        },
                        y: function(a) {
                            return e(a.value) - (Math.abs(e(g) - e(0)) - Math.abs(e(a.value) - e(0))) / 2;
                        }
                    },
                    zeroShapeLayout: {
                        width: function(a) {
                            return a.highlight && d ? i : h;
                        },
                        height: function(a) {
                            return 0;
                        },
                        x: function(a) {
                            return f(a.categoryOrMeasureIndex) + (a.highlight && d ? j : 0);
                        },
                        y: function(a) {
                            return e((e.domain()[0] + e.domain()[1]) / 2);
                        }
                    }
                };
            }, c.drawDefaultAxis = function(a, d) {
                var e = d3.scale.ordinal().domain(d.categoryLabels).rangeBands([ d.rangeStart, d.rangeEnd ], d.barToSpaceRatio), f = d3.svg.axis().scale(e).orient("right").tickPadding(c.TickPadding).innerTickSize(c.InnerTickSize);
                a.classed("axis", !0).attr("transform", b.SVGUtil.translate(0, d.margin.top)).call(f);
            }, c.drawDefaultShapes = function(a, c, d, e, f) {
                var g = a.hasHighlights, h = d.selectAll(".funnelBar").data(c, function(a) {
                    return a.key;
                });
                return h.enter().append("rect").attr("class", function(a) {
                    return a.highlight ? "funnelBar highlight" : "funnelBar";
                }), h.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(a) {
                    return function(a) {
                        return b.ColumnUtil.getFillOpacity(a.selected, a.highlight, !1, g);
                    };
                }).attr(e.shapeLayout), h.exit().remove(), h;
            }, c.DefaultBarOpacity = 1, c.DimmedBarOpacity = .4, c.InnerTextClassName = "labelSeries", 
            c.VisualClassName = "funnelChart", c.BarToSpaceRatio = .1, c.MaxBarWidth = 40, c.MinBarThickness = 12, 
            c.LabelFunnelPadding = 6, c.InnerTextMinimumPadding = 10, c.InnerTextHeightDelta = 4, 
            c.InnerTextGroupClassName = "innerTextGroup", c.StandardTextProperties = {
                fontFamily: "wf_segoe-ui_normal",
                fontSize: "12px"
            }, c.OverflowingHighlightWidthRatio = .5, c.TickPadding = 0, c.InnerTickSize = 0, 
            c;
        }();
        b.FunnelChart = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = {
            y: "Y",
            minValue: "MinValue",
            maxValue: "MaxValue",
            targetValue: "TargetValue"
        }, d = function() {
            function d(a) {
                this.lastAngle = -Math.PI / 2, a && a.gaugeSmallViewPortProperties && (this.gaugeSmallViewPortProperties = a.gaugeSmallViewPortProperties);
            }
            return d.prototype.init = function(a) {
                this.element = a.element, this.currentViewport = a.viewport, this.style = a.style, 
                this.options = a, this.settings = d.DefaultStyleProperties, this.targetSettings = d.DefaultTargetSettings, 
                this.setMargins(), this.color = d3.scale.ordinal().range(this.style.colorPalette.dataColors.getSentimentColors().map(function(a) {
                    return a.value;
                })), this.hostService = a.host;
                var c = this.svg = d3.select(this.element.get(0)).append("svg");
                c.classed(d.VisualClassName, !0);
                var e = this.mainGraphicsContext = c.append("g");
                e.attr("class", d.MainGaugeGroupElementName), this.initKpiBands();
                var f = this.backgroundArc = d3.svg.arc().innerRadius(0).outerRadius(0).startAngle(-Math.PI / 2).endAngle(Math.PI / 2), g = this.foregroundArc = d3.svg.arc().innerRadius(0).outerRadius(0).startAngle(-Math.PI / 2);
                this.backgroundArcPath = e.append("path").classed("backgroundArc", !0).attr("d", f), 
                this.foregroundArcPath = e.append("path").datum({
                    endAngle: -Math.PI / 2
                }).classed("foregroundArc", !0).attr("d", g);
                var h = this.animatedNumberGrapicsContext = c.append("g");
                this.animatedNumber = new b.AnimatedNumber(h), this.animatedNumber.init(a);
                var i = this.gaugeVisualProperties = this.getGaugeVisualProperties(), j = this.getAnimatedNumberProperties(i.radius, i.innerRadiusFactor, i.top, i.left);
                this.animatedNumber.svg.attr("transform", j.transformString), this.animatedNumber.onResizing(j.viewport, 0);
            }, d.prototype.update = function(a) {
                this.currentViewport = a.viewport;
                var c = this.dataViews = a.dataViews;
                if (c && c[0]) {
                    this.data = d.converter(c[0]), this.targetSettings = this.data.targetSettings, c[0] && (c[0].single = {
                        value: this.data.total
                    }), this.showTargetLabel = null != this.targetSettings.target && (this.currentViewport.width > d.MinWidthForTargetLabel || !this.showMinMaxLabelsOnBottom()) && this.showSideNumbersLabelText(), 
                    this.setMargins();
                    var e = this.gaugeVisualProperties = this.getGaugeVisualProperties(), f = this.getAnimatedNumberProperties(e.radius, e.innerRadiusFactor, e.top, e.left);
                    this.drawViewPort(this.gaugeVisualProperties), this.updateInternal(a.duration), 
                    this.animatedNumber.svg.attr("transform", f.transformString), this.animatedNumber.update({
                        viewport: f.viewport,
                        dataViews: a.dataViews,
                        duration: a.duration
                    });
                    var g = b.getInvalidValueWarnings(c, !1, !1, !1);
                    g && g.length > 0 && this.hostService.setWarnings(g);
                }
            }, d.prototype.onDataChanged = function(a) {
                this.update({
                    dataViews: a.dataViews,
                    duration: a.duration || 0,
                    viewport: this.currentViewport
                });
            }, d.prototype.onResizing = function(a, b) {
                this.update({
                    dataViews: this.dataViews,
                    duration: b,
                    viewMode: 0,
                    viewport: a
                });
            }, d.prototype.onStyleChanged = function(a) {
                this.style = a, this.color = d3.scale.ordinal().range(a.colorPalette.dataColors.getSentimentColors().map(function(a) {
                    return a.value;
                })), this.updateInternal(0);
            }, d.getValidSettings = function(a) {
                var b = a.max === d.MAX_VALUE ? d.DEFAULT_MAX : a.max, c = a.min === d.MIN_VALUE ? d.DEFAULT_MIN : a.min, e = a.target;
                return {
                    min: c,
                    max: b,
                    target: e
                };
            }, d.getGaugeData = function(a) {
                var b = {
                    max: d.MAX_VALUE,
                    min: d.MIN_VALUE,
                    target: void 0,
                    total: 0,
                    tooltipItems: []
                };
                if (a && a.categorical && a.categorical.values && a.metadata && a.metadata.columns) for (var e = a.categorical.values, f = a.metadata.columns, g = 0; g < e.length; g++) {
                    var h = f[g], i = e[g].values[0] || 0;
                    h && h.roles && (h.roles[c.y] ? (b.total = i, i && b.tooltipItems.push({
                        value: i,
                        metadata: e[g]
                    })) : h.roles[c.minValue] ? b.min = i : h.roles[c.maxValue] ? b.max = i : h.roles[c.targetValue] && (b.target = i, 
                    i && b.tooltipItems.push({
                        value: i,
                        metadata: e[g]
                    })));
                }
                return b;
            }, d.converter = function(a) {
                var c = d.getGaugeData(a), e = c.total;
                if (e > 0 && c.max === d.MAX_VALUE) {
                    var f = !1, g = a.metadata.columns;
                    if (!_.isEmpty(g)) {
                        var h = b.valueFormatter.getFormatString(a.metadata.columns[0], d.formatStringProp, !0);
                        f = b.valueFormatter.getFormatMetadata(h).hasPercent;
                    }
                    c.max = f ? d.DEFAULT_MAX : 2 * e;
                }
                var i = d.getValidSettings(c), j = Math.max(e, i.min);
                j = Math.min(j, i.max);
                var k, l = i.min !== i.max ? (j - i.min) / (i.max - i.min) : 0;
                if (a) if (c.tooltipItems.length > 0) k = b.TooltipBuilder.createTooltipInfo(d.formatStringProp, null, null, null, null, c.tooltipItems, null, null); else {
                    var m = a.categorical;
                    if (m && m.values && m.values.length > 0) {
                        var n = m.values[0], o = n.values[0];
                        k = b.TooltipBuilder.createTooltipInfo(d.formatStringProp, null, null, m.values, o, null, null, null);
                    }
                }
                return {
                    percent: l,
                    adjustedTotal: j,
                    total: e,
                    metadataColumn: d.getMetaDataColumn(a),
                    targetSettings: i,
                    tooltipInfo: k
                };
            }, d.getMetaDataColumn = function(a) {
                if (a && a.metadata && a.metadata.columns) for (var b = 0, c = a.metadata.columns.length; c > b; b++) {
                    var d = a.metadata.columns[b];
                    if (d.isMeasure) return d;
                }
                return null;
            }, d.prototype.initKpiBands = function() {
                if (this.settings.kpiBands.show) for (var a = this.kpiArcs = [], b = this.kpiArcPaths = [], c = this.mainGraphicsContext, d = 0; 3 > d; d++) {
                    var e = d3.svg.arc().innerRadius(0).outerRadius(0).startAngle(0).endAngle(0);
                    a.push(e);
                    var f = c.append("path").attr("d", e);
                    b.push(f);
                }
            }, d.prototype.updateKpiBands = function(a, b, c, e) {
                if (this.settings.kpiBands.show) for (var f = 0; f < e.length; f++) this.kpiArcs[f].innerRadius(a * b - (d.KpiBandDistanceFromMainArc + this.settings.kpiBands.thickness)).outerRadius(a * b - d.KpiBandDistanceFromMainArc).startAngle(e[f].start).endAngle(e[f].end), 
                this.kpiArcPaths[f].attr("fill", e[f].fill).attr("d", this.kpiArcs[f]).attr("transform", c);
            }, d.prototype.removeTargetElements = function() {
                this.targetLine && (this.targetLine.remove(), this.targetText.remove(), this.targetConnector.remove(), 
                this.targetLine = this.targetConnector = this.targetText = null);
            }, d.prototype.updateTargetLine = function(a, b, c, d) {
                var e = this.targetSettings;
                this.targetLine || (this.targetLine = this.mainGraphicsContext.append("line"));
                var f = (e.target - e.min) / (e.max - e.min) * Math.PI, g = d - a * Math.sin(f), h = c - a * Math.cos(f), i = d - b * Math.sin(f), j = c - b * Math.cos(f);
                this.targetLine.attr({
                    x1: j,
                    y1: i,
                    x2: h,
                    y2: g
                });
            }, d.prototype.getAnimatedNumberProperties = function(a, c, e, f) {
                var g = Math.PI / 4, h = 1, i = a * c, j = i - (this.settings.kpiBands.show ? d.KpiBandDistanceFromMainArc + this.settings.kpiBands.thickness : 0), k = j * Math.cos(g), l = j * Math.sin(g), m = e - l, n = f - k, m = m * h, n = n * h, o = 2 * k, p = {
                    transformString: b.SVGUtil.translate(n, m),
                    viewport: {
                        height: l,
                        width: o
                    }
                };
                return p;
            }, d.prototype.getGaugeVisualProperties = function() {
                var a = this.currentViewport, c = this.margin, e = a.width - c.right - c.left, f = e / 2, g = a.height - c.top - c.bottom, h = Math.min(f, g), i = d.InnerRadiusFactor, j = c.left + f, k = h + (g - h) / 2 + c.top, l = b.SVGUtil.translate(j, k), m = h * i, n = {
                    radius: h,
                    innerRadiusOfArc: m,
                    left: j,
                    top: k,
                    height: g,
                    width: e,
                    margin: c,
                    transformString: l,
                    innerRadiusFactor: i
                };
                return n;
            }, d.prototype.drawViewPort = function(a) {
                var b = this.settings.kpiBands.separationRadians, c = d.InnerRadiusFactor, e = this.backgroundArc, f = this.color, g = [ {
                    fill: f(0),
                    start: -Math.PI / 2,
                    end: -Math.PI / 2 + Math.PI / 4 - b
                }, {
                    fill: f(1),
                    start: -Math.PI / 2 + 1 * Math.PI / 4 + b,
                    end: -Math.PI / 2 + 3 * Math.PI / 4 - b
                }, {
                    fill: f(2),
                    start: -Math.PI / 2 + 3 * Math.PI / 4 + b,
                    end: Math.PI / 2
                } ], h = a.radius, i = a.transformString;
                this.updateKpiBands(h, c, i, g), e.innerRadius(h * c).outerRadius(h).startAngle(-Math.PI / 2).endAngle(Math.PI / 2), 
                this.backgroundArcPath.attr("d", e).attr("transform", i);
                var j = this.foregroundArc;
                j.innerRadius(h * c).outerRadius(h).startAngle(-Math.PI / 2), this.foregroundArcPath.datum({
                    endAngle: this.lastAngle
                }).attr("transform", i).attr("d", j);
                var k = a.innerRadiusOfArc, l = a.left, m = a.top, n = a.margin, o = a.height, p = this.targetSettings;
                this.settings.targetLine.show && null != p.target ? p.min > p.target || p.max < p.target ? this.removeTargetElements() : (this.updateTargetLine(h, k, l, m), 
                this.appendTargetTextAlongArc(h, o, a.width, n)) : this.removeTargetElements(), 
                this.svg.attr("height", this.currentViewport.height).attr("width", this.currentViewport.width);
            }, d.prototype.createTicks = function(a) {
                for (var c = this.settings, e = this.targetSettings, a = e.max - e.min, f = c.labels.count, g = a / f, h = [], i = b.valueFormatter.create({
                    format: b.valueFormatter.getFormatString(this.data.metadataColumn, d.formatStringProp),
                    value: e.min,
                    value2: e.max,
                    formatSingleValues: !0,
                    allowFormatBeautification: !0
                }), j = 0; f + 1 > j; j++) h.push(i.format(e.min + j * g));
                return h;
            }, d.prototype.updateInternal = function(a) {
                void 0 === a && (a = 0);
                var c = this.gaugeVisualProperties.height, d = this.gaugeVisualProperties.width, e = this.gaugeVisualProperties.radius, f = this.margin, g = this.data, h = this.lastAngle = -Math.PI / 2 + Math.PI * g.percent, i = this.createTicks(g.adjustedTotal);
                this.foregroundArcPath.transition().ease(this.settings.transition.ease).duration(a).call(this.arcTween, [ h, this.foregroundArc ]), 
                this.appendTextAlongArc(i, e, c, d, f), this.updateVisualConfigurations(), this.updateVisualStyles(), 
                b.TooltipManager.addTooltip(this.foregroundArcPath, function(a) {
                    return g.tooltipInfo;
                });
            }, d.prototype.updateVisualStyles = function() {
                this.mainGraphicsContext.selectAll("text").style({
                    fill: this.style.labelText.color.value
                });
            }, d.prototype.updateVisualConfigurations = function() {
                var a = this.settings;
                this.mainGraphicsContext.select("line").attr({
                    stroke: a.targetLine.color,
                    "stroke-width": a.targetLine.thickness
                }), this.backgroundArcPath.style("fill", a.arcColors.background), this.foregroundArcPath.style("fill", a.arcColors.foreground);
            }, d.prototype.appendTextAlongArc = function(a, b, c, e, f) {
                this.svg.selectAll(d.LabelText.selector).remove();
                for (var g = a.length, h = g - 1, i = b + (c - b) / 2 + f.top, j = this.showMinMaxLabelsOnBottom(), k = this.style.labelText.fontSize, l = this.settings.labels.padding, m = 0; g > m; m++) if (Math.floor(g / 2) !== m && this.showSideNumbersLabelText()) {
                    var n, o = f.left + e / 2 - b * Math.cos(Math.PI * m / h), p = i - b * Math.sin(Math.PI * m / h), q = 2 * m > g, r = !1;
                    !j || 0 !== m && m !== g - 1 ? (n = q ? "start" : "end", o += l * (q ? 1 : -1)) : (r = !0, 
                    p += l / 2, n = q ? "end" : "start");
                    var s = this.mainGraphicsContext.append("text").attr({
                        x: o,
                        y: p,
                        dy: r ? k : 0,
                        "class": d.LabelText["class"]
                    }).style({
                        "text-anchor": n,
                        "font-size": k
                    }).text(a[m]);
                    r || this.truncateTextIfNeeded(s, o, q);
                }
            }, d.prototype.truncateTextIfNeeded = function(c, d, e) {
                var f = e ? this.currentViewport.width - d : d;
                c.call(b.AxisHelper.LabelLayoutStrategy.clip, f, a.TextMeasurementService.svgEllipsis);
            }, d.prototype.appendTargetTextAlongArc = function(a, c, e, f) {
                var g = this.targetSettings, h = g.target, i = (h - g.min) / (g.max - g.min), j = a + (c - a) / 2 + f.top, k = i > .5, l = this.settings.labels.padding, m = k ? "start" : "end", n = b.valueFormatter.create({
                    format: b.valueFormatter.getFormatString(this.data.metadataColumn, d.formatStringProp),
                    value: g.min,
                    value2: g.max,
                    formatSingleValues: !0,
                    allowFormatBeautification: !0
                }), o = Math.asin(d.MinDistanceFromBottom / a) / Math.PI, p = o > i || i > 1 - o ? k ? 1 - o : o : i, q = f.left + e / 2 - (a + l) * Math.cos(Math.PI * p), r = j - (a + l) * Math.sin(Math.PI * p);
                this.targetText || (this.targetText = this.mainGraphicsContext.append("text").classed(d.TargetText["class"], !0)), 
                this.targetText.attr({
                    x: q,
                    y: r
                }).style({
                    "text-anchor": m,
                    display: this.showTargetLabel ? "" : "none",
                    "font-size": this.style.labelText.fontSize
                }).text(n.format(h)), this.truncateTextIfNeeded(this.targetText, q, k), this.targetConnector || (this.targetConnector = this.mainGraphicsContext.append("line").classed(d.TargetConnector["class"], !0)), 
                i === p ? this.targetConnector.style("display", "none") : this.targetConnector.attr({
                    x1: f.left + e / 2 - a * Math.cos(Math.PI * i),
                    y1: j - a * Math.sin(Math.PI * i),
                    x2: q,
                    y2: r
                }).style({
                    "stroke-width": this.settings.targetLine.thickness,
                    stroke: this.settings.targetLine.color,
                    display: ""
                });
            }, d.prototype.arcTween = function(a, b) {
                a.attrTween("d", function(a) {
                    var c = d3.interpolate(a.endAngle, b[0]);
                    return function(d) {
                        return a.endAngle = c(d), b[1](a);
                    };
                });
            }, d.prototype.showMinMaxLabelsOnBottom = function() {
                return this.currentViewport.height > this.currentViewport.width && this.settings.labels.count <= 3;
            }, d.prototype.setMargins = function() {
                if (this.gaugeSmallViewPortProperties && this.gaugeSmallViewPortProperties.smallGaugeMarginsOnSmallViewPort && this.currentViewport.height < this.gaugeSmallViewPortProperties.MinHeightGaugeSideNumbersVisible) {
                    var a = this.gaugeSmallViewPortProperties.GaugeMarginsOnSmallViewPort;
                    return void (this.margin = {
                        top: a,
                        bottom: a,
                        left: a,
                        right: a
                    });
                }
                if (this.margin = {
                    top: d.DefaultTopBottomMargin,
                    bottom: d.DefaultTopBottomMargin,
                    left: d.DefaultLeftRightMargin,
                    right: d.DefaultLeftRightMargin
                }, !this.showSideNumbersLabelText() || this.showMinMaxLabelsOnBottom()) {
                    var b = this.targetSettings;
                    if (this.showTargetLabel) {
                        var c = (b.target - b.min) / (b.max - b.min);
                        c > .5 ? this.margin.left = d.ReducedLeftRightMargin : this.margin.right = d.ReducedLeftRightMargin;
                    } else this.margin.left = this.margin.right = d.ReducedLeftRightMargin;
                }
            }, d.prototype.showSideNumbersLabelText = function() {
                return this.gaugeSmallViewPortProperties && this.gaugeSmallViewPortProperties.hideGaugeSideNumbersOnSmallViewPort && this.currentViewport.height < this.gaugeSmallViewPortProperties.MinHeightGaugeSideNumbersVisible ? !1 : !0;
            }, d.MIN_VALUE = -(1 / 0), d.MAX_VALUE = +(1 / 0), d.MinDistanceFromBottom = 10, 
            d.MinWidthForTargetLabel = 150, d.DefaultTopBottomMargin = 20, d.DefaultLeftRightMargin = 45, 
            d.ReducedLeftRightMargin = 15, d.DEFAULT_MAX = 1, d.DEFAULT_MIN = 0, d.VisualClassName = "gauge", 
            d.DefaultStyleProperties = {
                transition: {
                    ease: "bounce"
                },
                arcColors: {
                    background: "#e9e9e9",
                    foreground: "#00B8AA"
                },
                targetLine: {
                    show: !0,
                    color: "#666666",
                    thickness: 2
                },
                labels: {
                    count: 2,
                    padding: 5
                },
                kpiBands: {
                    show: !1,
                    separationRadians: Math.PI / 128,
                    thickness: 5
                }
            }, d.DefaultTargetSettings = {
                min: 0,
                max: 1,
                target: void 0
            }, d.InnerRadiusFactor = .7, d.KpiBandDistanceFromMainArc = 2, d.MainGaugeGroupElementName = "mainGroup", 
            d.LabelText = {
                "class": "labelText",
                selector: ".labelText"
            }, d.TargetConnector = {
                "class": "targetConnector",
                selector: ".targetConnector"
            }, d.TargetText = {
                "class": "targetText",
                selector: ".targetText"
            }, d.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, d.capabilities = {
                dataRoles: [ {
                    name: c.y,
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Value")
                }, {
                    name: c.minValue,
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_MinValue")
                }, {
                    name: c.maxValue,
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_MaxValue")
                }, {
                    name: c.targetValue,
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_TargetValue")
                } ],
                objects: {
                    general: {
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Y: {
                            max: 1
                        },
                        MinValue: {
                            max: 1
                        },
                        MaxValue: {
                            max: 1
                        },
                        TargetValue: {
                            max: 1
                        }
                    } ],
                    categorical: {
                        values: {
                            select: [ {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "MinValue"
                                }
                            }, {
                                bind: {
                                    to: "MaxValue"
                                }
                            }, {
                                bind: {
                                    to: "TargetValue"
                                }
                            } ]
                        }
                    }
                } ]
            }, d;
        }();
        b.Gauge = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a() {}
            return a.prototype.init = function(a) {
                this.element = a.element;
            }, a.prototype.onDataChanged = function(a) {
                this.element.empty();
                var b = a.dataViews;
                if (b && 0 !== b.length) {
                    var c = b[0].metadata.objects;
                    if (c && c.general) {
                        var d = $("<div class='imageBackground' />");
                        c.general.imageUrl && d.css("backgroundImage", "url(" + c.general.imageUrl + ")"), 
                        d.appendTo(this.element);
                    }
                }
            }, a.prototype.onResizing = function(a, b) {}, a.capabilities = {
                objects: {
                    general: {
                        properties: {
                            imageUrl: {
                                type: {
                                    misc: {
                                        imageUrl: !0
                                    }
                                }
                            }
                        }
                    }
                }
            }, a;
        }();
        a.ImageVisual = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    !function(a) {
        a[a.Grouping = 0] = "Grouping", a[a.Measure = 1] = "Measure", a[a.GroupingOrMeasure = 2] = "GroupingOrMeasure";
    }(a.VisualDataRoleKind || (a.VisualDataRoleKind = {}));
    a.VisualDataRoleKind;
    !function(a) {
        a[a.Create = 0] = "Create", a[a.Append = 1] = "Append";
    }(a.VisualDataChangeOperationKind || (a.VisualDataChangeOperationKind = {}));
    a.VisualDataChangeOperationKind;
    !function(a) {
        a[a.View = 0] = "View", a[a.Edit = 1] = "Edit";
    }(a.ViewMode || (a.ViewMode = {}));
    a.ViewMode;
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        function b(a) {
            return {
                DisplayUnitSystemType: a.DisplayUnitSystemType
            };
        }
        a.copyCommonSettings = b;
    }(b = a.SettingsUtil || (a.SettingsUtil = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.lineChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Axis")
            }, {
                name: "Series",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
            }, {
                name: "Y",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        defaultColor: {
                            displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        showAllDataPoints: {
                            displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                            type: {
                                bool: !0
                            }
                        },
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                categoryAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_XAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        start: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                            type: {
                                numeric: !0
                            }
                        },
                        end: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                            type: {
                                numeric: !0
                            }
                        },
                        axisType: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Type"),
                            type: {
                                formatting: {
                                    axisType: !0
                                }
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                },
                valueAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_YAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                            type: {
                                formatting: {
                                    yAxisPosition: !0
                                }
                            }
                        },
                        start: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                            type: {
                                numeric: !0
                            }
                        },
                        end: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                            type: {
                                numeric: !0
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        labelDisplayUnits: {
                            displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                            type: {
                                formatting: {
                                    labelDisplayUnits: !0
                                }
                            }
                        },
                        labelPrecision: {
                            displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        min: 1,
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                "for": {
                                    "in": "Y"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    }
                }
            } ],
            sorting: {
                "default": {}
            }
        }, b.lineChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            categoryAxis: {
                axisType: {
                    objectName: "categoryAxis",
                    propertyName: "axisType"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = jsCommon.EnumExtensions;
        !function(a) {
            a[a["default"] = 1] = "default", a[a.area = 2] = "area", a[a.smooth = 4] = "smooth", 
            a[a.lineShadow = 8] = "lineShadow";
        }(b.LineChartType || (b.LineChartType = {}));
        var d = (b.LineChartType, function() {
            function d(a) {
                this.isScrollable = a.isScrollable ? a.isScrollable : !1, this.lineType = a.chartType ? a.chartType : 1, 
                this.interactivityService = a.interactivityService, this.animator = a.animator;
            }
            return d.customizeQuery = function(a) {
                var c = a.dataViewMappings[0];
                if (c && c.categorical && c.categorical.categories) {
                    var d = c.categorical.categories, e = d["for"]["in"].items;
                    if (!jsCommon.ArrayExtensions.isUndefinedOrEmpty(e)) {
                        var f, g = e[0].type;
                        c.metadata && (f = c.metadata.objects), b.CartesianChart.getIsScalar(f, b.lineChartProps.categoryAxis.axisType, g) && (d.dataReductionAlgorithm = {
                            sample: {}
                        });
                    }
                }
            }, d.getSortableRoles = function(a) {
                var c = a.dataViewMappings[0];
                if (!c || !c.categorical || !c.categorical.categories) return null;
                var d = c.categorical.categories, e = d["for"]["in"].items;
                if (!jsCommon.ArrayExtensions.isUndefinedOrEmpty(e)) {
                    var f, g = e[0].type;
                    if (c.metadata && (f = c.metadata.objects), !b.CartesianChart.getIsScalar(f, b.lineChartProps.categoryAxis.axisType, g)) return [ "Category" ];
                }
                return null;
            }, d.converter = function(c, d, e, f, g) {
                var h = c.categorical, i = h.categories && h.categories.length > 0 ? h.categories[0] : {
                    source: void 0,
                    values: [ d ],
                    identity: void 0
                }, j = b.CartesianHelper.getCategoryAxisProperties(c.metadata);
                f = b.CartesianHelper.isScalar(f, j), h = b.ColumnUtil.applyUserMinMax(f, h, j);
                var k = b.lineChartProps.general.formatString, l = b.AxisHelper.getCategoryValueType(i.source), m = b.AxisHelper.isDateTime(l), n = i.values, o = [], p = h.values ? h.values.length : 0, q = !(!h.values || !h.values.source), r = h.values, s = b.dataLabelUtils.getDefaultPointLabelSettings();
                if (c.metadata && c.metadata.objects) {
                    var t = c.metadata.objects, u = a.DataViewObjects.getFillColor(t, b.columnChartProps.dataPoint.defaultColor), v = a.DataViewObjects.getValue(t, b.columnChartProps.dataPoint.showAllDataPoints), w = t.labels;
                    w && (void 0 !== w.show && (s.show = w.show), void 0 !== w.color && (s.labelColor = w.color.solid.color, 
                    s.overrideDefaultColor = !0), void 0 !== w.labelDisplayUnits && (s.displayUnits = w.labelDisplayUnits), 
                    void 0 !== w.labelPrecision && (s.precision = w.labelPrecision >= 0 ? w.labelPrecision : 0)), 
                    s.formatterOptions = b.dataLabelUtils.getFormatterOptionsColumn(c.metadata.columns);
                }
                var x, y = new b.ColorHelper(e, b.lineChartProps.dataPoint.fill, u);
                c.categorical.values && (x = c.categorical.values.grouped());
                for (var z = 0; p > z; z++) {
                    for (var A = h.values[z], B = [], C = x[z], D = q ? b.SelectionId.createWithIdAndMeasure(C.identity, A.source.queryName) : b.SelectionId.createWithMeasure(A.source.queryName), E = D.getKey(), F = this.getColor(y, q, r, x, z, C), G = 0, H = A.values.length; H > G; G++) {
                        var I = n[G], J = b.AxisHelper.normalizeNonFiniteNumber(A.values[G]);
                        if (!f || null != I && null != J) {
                            var h = c.categorical, K = b.TooltipBuilder.createTooltipInfo(k, h.categories, I, h.values, J, null, z);
                            B.push({
                                categoryValue: m && I ? I.getTime() : I,
                                value: J,
                                categoryIndex: G,
                                seriesIndex: z,
                                tooltipInfo: K,
                                selected: !1,
                                identity: D,
                                key: JSON.stringify({
                                    ser: E,
                                    catIdx: G
                                }),
                                labelFill: s.overrideDefaultColor ? s.labelColor : F
                            });
                        }
                    }
                    g && g.applySelectionStateToData(B), o.push({
                        key: E,
                        lineIndex: z,
                        color: F,
                        xCol: i.source,
                        yCol: A.source,
                        data: B,
                        identity: D,
                        selected: !1
                    });
                }
                var j = b.CartesianHelper.getCategoryAxisProperties(c.metadata), L = b.CartesianHelper.getValueAxisProperties(c.metadata), M = [];
                if (r) for (var N = 0; N < r.length; N++) r[N] && r[N].source && r[N].source.displayName && M.push({
                    displayName: r[N].source.displayName
                });
                var O = b.converterHelper.createAxesLabels(j, L, i.source, M), P = !1;
                return g && g.applySelectionStateToData(o) && (P = !0), {
                    series: o,
                    isScalar: f,
                    dataLabelsSettings: s,
                    axesLabels: {
                        x: O.xAxisLabel,
                        y: O.yAxisLabel
                    },
                    defaultDataPointColor: u,
                    showAllDataPoints: v,
                    hasDynamicSeries: q,
                    hasSelection: P,
                    categoryMetadata: i.source,
                    categories: n
                };
            }, d.getColor = function(a, b, c, d, e, f) {
                var g;
                return b ? d && (g = d[e].objects) : g = c[e].source.objects, b ? a.getColorForSeriesValue(g, c.identityFields, f.name) : a.getColorForMeasure(g, c[e].source.queryName);
            }, d.prototype.init = function(a) {
                this.options = a;
                var c = this.element = a.element;
                this.host = a.host, this.currentViewport = a.viewport, this.colors = a.style.colorPalette.dataColors, 
                this.isInteractiveChart = a.interactivity && a.interactivity.isInteractiveLegend, 
                c.addClass(d.ClassName);
                var e = a.svg;
                this.clearCatcher = e.select(".clearCatcher"), this.mainGraphicsSVG = e.append("svg"), 
                this.mainGraphicsContext = this.mainGraphicsSVG.append("g").classed(d.MainGraphicsContextClassName, !0), 
                this.dataLabelsSVG = e.append("g").classed(d.DataLabelsSVGClassName, !0), this.toolTipContext = e.append("g").classed("hover-line", !0), 
                this.toolTipContext.append(d.LineElementName).attr("x1", 0).attr("x2", 0).attr("y1", 0).attr("y2", 0);
                var f = this.hoverLine = this.toolTipContext.select(d.LineElementName);
                this.isInteractiveChart && f.classed("interactive", !0), this.selectionCircles = [];
                var g = b.AxisHelper.ToolTip.createCallout();
                this.element.append(g), f.style("opacity", b.SVGUtil.AlmostZero), g.css("opacity", b.SVGUtil.AlmostZero);
                var h = this;
                this.xAxisProperties = {
                    axis: null,
                    scale: null,
                    axisType: null,
                    formatter: null,
                    graphicsContext: null,
                    values: null,
                    axisLabel: null,
                    isCategoryAxis: !0
                };
                var i = function() {
                    var a = d3.mouse(this)[0], b = h.findIndex(a);
                    h.selectColumn(b);
                };
                if (this.isInteractiveChart) {
                    var j = d3.behavior.drag().origin(Object).on("drag", i);
                    e.call(j), d3.select(this.element.get(0)).call(j), e.on("click", i), d3.select(this.element.get(0)).on("click", i);
                }
            }, d.prototype.setData = function(c) {
                if (this.data = {
                    series: [],
                    dataLabelsSettings: b.dataLabelUtils.getDefaultPointLabelSettings(),
                    axesLabels: {
                        x: null,
                        y: null
                    },
                    hasDynamicSeries: !1,
                    defaultDataPointColor: null,
                    hasSelection: !1,
                    categories: [],
                    categoryMetadata: void 0
                }, c.length > 0) {
                    var e = c[0];
                    if (e && e.categorical) {
                        var f = this.dataViewCat = e.categorical, g = f.categories, h = a.ValueType.fromDescriptor({
                            text: !0
                        });
                        g && g.length > 0 && g[0].source && g[0].source.type && (h = g[0].source.type);
                        var i = d.converter(e, b.valueFormatter.format(null), this.colors, b.CartesianChart.getIsScalar(e.metadata ? e.metadata.objects : null, b.lineChartProps.categoryAxis.axisType, h), this.interactivityService);
                        this.data = i;
                    }
                }
            }, d.prototype.calculateLegend = function() {
                return this.createLegendDataPoints(0);
            }, d.prototype.hasLegend = function() {
                return this.data && (this.data.hasDynamicSeries || this.data.series && this.data.series.length > 1);
            }, d.prototype.setFilteredData = function(b, c) {
                var e = c - b, f = this.clippedData = a.Prototype.inherit(this.data);
                return f.series = d.sliceSeries(f.series, e, b), f.categories = f.categories.slice(b, c), 
                f;
            }, d.prototype.calculateAxesProperties = function(c) {
                var e = this, f = this.data, g = c.viewport, h = c.margin;
                this.currentViewport = g, this.margin = h;
                var i = f.series && f.series.length > 0 ? f.series[0].data.length : 0, j = b.CartesianChart.MinOrdinalRectThickness, k = this.data.isScalar, l = this.getPreferredPlotArea(k, i, j);
                if (l.width === this.currentViewport.width && (l.width -= h.left + h.right), l.height -= h.top + h.bottom, 
                this.clippedData = void 0, f && !k && !this.isScrollable) {
                    var m = this.getCategoryCount(i), n = Math.min(i, m);
                    n !== i && (f = this.clippedData = a.Prototype.inherit(f), this.clippedData.series = d.sliceSeries(f.series, n));
                }
                var o, p;
                f.series && f.series.length > 0 && (o = f.series[0].xCol, p = f.series[0].yCol);
                var q = b.AxisHelper.createValueDomain(f.series, !1), r = b.AxisHelper.combineDomain(c.forcedYDomain, q);
                this.yAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: l.height,
                    dataDomain: r,
                    metaDataColumn: p,
                    formatStringProp: b.lineChartProps.general.formatString,
                    outerPadding: 0,
                    isScalar: !0,
                    isVertical: !0,
                    forcedTickCount: c.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    isCategoryAxis: !1,
                    shouldClamp: b.AxisHelper.scaleShouldClamp(r, q)
                });
                var s = b.AxisHelper.createDomain(f.series, this.xAxisProperties.axisType, this.data.isScalar, c.forcedXDomain);
                return this.xAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: l.width,
                    dataDomain: s,
                    metaDataColumn: o,
                    formatStringProp: b.lineChartProps.general.formatString,
                    outerPadding: 0,
                    isScalar: this.data.isScalar,
                    isVertical: !1,
                    forcedTickCount: c.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    getValueFn: function(a, b) {
                        return e.lookupXValue(a, b);
                    },
                    categoryThickness: b.CartesianChart.getCategoryThickness(f.series, i, this.getAvailableWidth(), s, k),
                    isCategoryAxis: !0
                }), this.xAxisProperties.axisLabel = c.showXLabel ? f.axesLabels.x : null, this.yAxisProperties.axisLabel = c.showYLabel ? f.axesLabels.y : null, 
                [ this.xAxisProperties, this.yAxisProperties ];
            }, d.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "dataPoint":
                    return this.enumerateDataPoints();

                  case "labels":
                    return b.dataLabelUtils.enumerateDataLabels(this.data.dataLabelsSettings, !1, !0, !0);
                }
            }, d.prototype.enumerateDataPoints = function() {
                var a = this.data;
                if (a && a.series && 0 !== a.series.length) {
                    var c = [], d = a.series, e = d.length;
                    if (a.hasDynamicSeries) {
                        c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                defaultColor: {
                                    solid: {
                                        color: a.defaultDataPointColor || this.colors.getColor(0).value
                                    }
                                }
                            }
                        });
                        var f = void 0 !== a.showAllDataPoints ? a.showAllDataPoints : e > 1;
                        if (c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                showAllDataPoints: f
                            }
                        }), !f) return c;
                    }
                    for (var g = b.lineChartProps.general.formatString, d = a.series, e = d.length, h = 0; e > h; h++) {
                        var i = b.ColorHelper.normalizeSelector(d[h].identity.getSelector()), j = b.converterHelper.getFormattedLegendLabel(d[h].yCol, this.dataViewCat.values, g);
                        c.push({
                            objectName: "dataPoint",
                            displayName: j,
                            selector: i,
                            properties: {
                                fill: {
                                    solid: {
                                        color: d[h].color
                                    }
                                }
                            }
                        });
                    }
                    return c;
                }
            }, d.prototype.overrideXScale = function(a) {
                this.xAxisProperties = a;
            }, d.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, d.prototype.render = function(a) {
                this.animator ? this.renderNew(a) : this.renderOld(a), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, d.prototype.renderNew = function(a) {
                var e = this, f = this.clippedData ? this.clippedData : this.data;
                if (f) {
                    var g, h = this.margin, i = this.currentViewport, j = i.height - (h.top + h.bottom), k = this.xAxisProperties.scale, l = this.yAxisProperties.scale, m = b.dataHasSelection(f.series), n = c.hasFlag(this.lineType, 2);
                    n && (g = d3.svg.area().x(function(a) {
                        return k(e.getXValue(a));
                    }).y0(j).y1(function(a) {
                        return l(a.value);
                    }).defined(function(a) {
                        return null !== a.value;
                    }));
                    var o = d3.svg.line().x(function(a) {
                        return k(e.getXValue(a));
                    }).y(function(a) {
                        return l(a.value);
                    }).defined(function(a) {
                        return null !== a.value;
                    });
                    c.hasFlag(this.lineType, 4) && (o.interpolate("basis"), g && g.interpolate("basis"));
                    var p = this.extraLineShift();
                    if (this.mainGraphicsContext.attr("transform", b.SVGUtil.translate(d.HorizontalShift + p, 0)), 
                    this.dataLabelsSVG.attr("transform", b.SVGUtil.translate(d.HorizontalShift + p, 0)), 
                    this.mainGraphicsSVG.attr("height", this.getAvailableHeight()).attr("width", this.getAvailableWidth()), 
                    this.toolTipContext.attr("transform", b.SVGUtil.translate(d.HorizontalShift + p, 0)), 
                    n) {
                        var q = this.mainGraphicsContext.selectAll(d.CategoryAreaClassSelector).data(f.series, function(a) {
                            return a.identity.getKey();
                        });
                        q.enter().append(d.PathElementName).classed(d.CategoryAreaClassName, !0), q.style("fill", function(a) {
                            return a.color;
                        }).style("fill-opacity", function(a) {
                            return m && !a.selected ? d.DimmedAreaFillOpacity : d.AreaFillOpacity;
                        }).transition().ease("linear").duration(a).attr("d", function(a) {
                            return g(a.data);
                        }), q.exit().remove();
                    }
                    var r = this.mainGraphicsContext.selectAll(".line").data(f.series, function(a) {
                        return a.identity.getKey();
                    });
                    r.enter().append(d.PathElementName).classed("line", !0), r.style("stroke", function(a) {
                        return a.color;
                    }).style("stroke-opacity", function(a) {
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, m, !1);
                    }).transition().ease("linear").duration(a).attr("d", function(a) {
                        return o(a.data);
                    }), r.exit().remove();
                    var s = this.mainGraphicsContext.selectAll(".interactivity-line").data(f.series, function(a) {
                        return a.identity.getKey();
                    });
                    s.enter().append(d.PathElementName).classed("interactivity-line", !0), s.attr("d", function(a) {
                        return o(a.data);
                    }), s.exit().remove();
                    var t = this.mainGraphicsContext.selectAll(d.CategoryClassSelector).data(f.series, function(a) {
                        return a.identity.getKey();
                    });
                    t.enter().append("g").classed(d.CategoryClassName, !0), t.exit().remove();
                    var u = t.selectAll(d.CategoryValuePoint.selector).data(function(a) {
                        return a.data.filter(function(b, c) {
                            return e.shouldDrawCircle(a, c);
                        });
                    }, function(a) {
                        return a.key;
                    });
                    if (u.enter().append(d.CircleElementName).classed(d.CategoryValuePoint["class"], !0), 
                    u.style("fill", function() {
                        var a = d3.select(this.parentNode).datum();
                        return a.color;
                    }).style("fill-opacity", function() {
                        var a = d3.select(this.parentNode).datum();
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, m, !1);
                    }).transition().duration(a).attr({
                        cx: function(a, b) {
                            return k(e.getXValue(a));
                        },
                        cy: function(a, b) {
                            return l(a.value);
                        },
                        r: d.CircleRadius
                    }), u.exit().remove(), f.dataLabelsSettings.show) {
                        for (var v = b.dataLabelUtils.getLineChartLabelLayout(k, l, f.dataLabelsSettings, f.isScalar), w = [], x = 0, y = f.series.length; y > x; x++) Array.prototype.push.apply(w, f.series[x].data);
                        b.dataLabelUtils.drawDefaultLabelsForDataPointChart(w, this.dataLabelsSVG, v, this.currentViewport);
                    } else b.dataLabelUtils.cleanDataLabels(this.dataLabelsSVG);
                    var z = function(a) {
                        var b = a.elementCoordinates[0];
                        return d.getTooltipInfoByPointX(e, a.data, b);
                    };
                    if (b.TooltipManager.addTooltip(s, z, !0), n && b.TooltipManager.addTooltip(q, z, !0), 
                    b.TooltipManager.addTooltip(u, function(a) {
                        return a.data.tooltipInfo;
                    }, !0), this.interactivityService) {
                        for (var A = f.series.slice(), x = 0, y = f.series.length; y > x; x++) A = A.concat(f.series[x].data);
                        var B = {
                            dataPoints: A,
                            lines: r,
                            interactivityLines: s,
                            dots: u,
                            areas: q,
                            background: d3.selectAll(this.element.toArray()),
                            clearCatcher: this.clearCatcher
                        };
                        this.interactivityService.apply(this, B);
                    }
                }
            }, d.prototype.renderOld = function(a) {
                var e = this, f = this.clippedData ? this.clippedData : this.data;
                if (f) {
                    var g, h = this.margin, i = this.currentViewport, j = i.height - (h.top + h.bottom), k = this.xAxisProperties.scale, l = this.yAxisProperties.scale, m = this.data.hasSelection;
                    c.hasFlag(this.lineType, 2) && (g = d3.svg.area().x(function(a) {
                        return k(e.getXValue(a));
                    }).y0(j).y1(function(a) {
                        return l(a.value);
                    }).defined(function(a) {
                        return null !== a.value;
                    }));
                    var n = d3.svg.line().x(function(a) {
                        return k(e.getXValue(a));
                    }).y(function(a) {
                        return l(a.value);
                    }).defined(function(a) {
                        return null !== a.value;
                    });
                    c.hasFlag(this.lineType, 4) && (n.interpolate("basis"), g && g.interpolate("basis"));
                    var o = this.extraLineShift();
                    if (this.mainGraphicsContext.attr("transform", b.SVGUtil.translate(d.HorizontalShift + o, 0)), 
                    this.dataLabelsSVG.attr("transform", b.SVGUtil.translate(d.HorizontalShift + o, 0)), 
                    this.mainGraphicsSVG.attr("height", this.getAvailableHeight()).attr("width", this.getAvailableWidth()), 
                    this.toolTipContext.attr("transform", b.SVGUtil.translate(d.HorizontalShift + o, 0)), 
                    c.hasFlag(this.lineType, 2)) {
                        var p = this.mainGraphicsContext.selectAll(d.CategoryAreaClassSelector).data(f.series, function(a) {
                            return a.identity.getKey();
                        }), q = p.enter().append("g").classed(d.CategoryAreaClassName, !0);
                        q.append(d.PathElementName);
                        var r = this.mainGraphicsContext.selectAll(d.CategoryAreaClassSelector);
                        r.select(d.PathElementName).transition().ease("linear").duration(a).attr("d", function(a) {
                            return g(a.data);
                        }).style("fill", function(a) {
                            return a.color;
                        }).style("fill-opacity", function(a) {
                            return m && !a.selected ? d.DimmedAreaFillOpacity : d.AreaFillOpacity;
                        }), p.exit().remove();
                    }
                    var s = this.mainGraphicsContext.selectAll(d.CategoryClassSelector).data(f.series, function(a) {
                        return a.identity.getKey();
                    }), t = s.enter().append("g").classed(d.CategoryClassName, !0);
                    if (t.append(d.PathElementName), t.selectAll(d.CategoryValuePoint.selector).data(function(a) {
                        return a.data;
                    }).enter().append(d.CircleElementName).classed(d.CategoryValuePoint["class"], !0), 
                    s.exit().remove(), this.isInteractiveChart && !this.dragHandle) {
                        var u = this.getAvailableHeight();
                        this.dragHandle = this.toolTipContext.append("circle").attr("cx", 0).attr("cy", u).attr("r", "6px").classed("drag-handle", !0);
                    }
                    for (var v = s.data().length; this.selectionCircles.length < v; ) {
                        var w = this.toolTipContext.append(d.CircleElementName).classed(d.CircleClassName, !0).attr("r", d.CircleRadius).style("opacity", 0);
                        this.selectionCircles.push(w);
                    }
                    for (;this.selectionCircles.length > v; ) this.selectionCircles.pop().remove();
                    var x = this.mainGraphicsContext.selectAll(d.CategoryClassSelector), y = x.select(d.PathElementName).classed("line", !0).style("stroke", function(a) {
                        return a.color;
                    }).style("stroke-opacity", function(a) {
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, m, !1);
                    });
                    y.transition().ease("linear").duration(a).attr("d", function(a) {
                        return n(a.data);
                    });
                    var z = this, A = x.selectAll(d.CategoryValuePoint.selector), B = A.style("fill", function() {
                        var a = d3.select(this.parentNode).datum();
                        return a.color;
                    }).style("fill-opacity", function() {
                        var a = d3.select(this.parentNode).datum();
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, m, !1);
                    }).transition().duration(a).attr({
                        cx: function(a, b) {
                            var c = d3.select(this.parentNode).datum(), d = z.shouldDrawCircle(c, b);
                            return d ? k(z.getXValue(a)) : 0;
                        },
                        cy: function(a, b) {
                            var c = d3.select(this.parentNode).datum(), d = z.shouldDrawCircle(c, b);
                            return d ? l(a.value) : 0;
                        },
                        r: function(a, b) {
                            var c = d3.select(this.parentNode).datum(), e = z.shouldDrawCircle(c, b);
                            return e ? d.CircleRadius : 0;
                        }
                    });
                    if (this.isInteractiveChart && this.hasDataPoint(f.series)) {
                        var C = A.size(), D = 0;
                        B.each("end", function() {
                            D++, D === C && e.selectColumn(0, !0);
                        });
                    }
                    if (f.dataLabelsSettings.show) {
                        for (var E = b.dataLabelUtils.getLineChartLabelLayout(k, l, f.dataLabelsSettings, f.isScalar), F = [], G = 0, H = f.series.length; H > G; G++) Array.prototype.push.apply(F, f.series[G].data);
                        b.dataLabelUtils.drawDefaultLabelsForDataPointChart(F, this.dataLabelsSVG, E, this.currentViewport);
                    } else b.dataLabelUtils.cleanDataLabels(this.dataLabelsSVG);
                    if (b.TooltipManager.addTooltip(s, function(a) {
                        var b = a.elementCoordinates[0];
                        return d.getTooltipInfoByPointX(z, a.data, b);
                    }, !0), s.exit().remove(), this.interactivityService) {
                        for (var I = f.series.slice(), G = 0, H = f.series.length; H > G; G++) I = I.concat(f.series[G].data);
                        var J = {
                            dataPoints: I,
                            lines: y,
                            interactivityLines: y,
                            dots: this.mainGraphicsContext.selectAll(".cat .dot"),
                            areas: r,
                            clearCatcher: this.clearCatcher
                        };
                        this.interactivityService.apply(this, J);
                    }
                }
            }, d.getTooltipInfoByPointX = function(c, d, e) {
                var f = 0;
                if (c.data.isScalar) {
                    var g = a.visuals.AxisHelper.invertScale(c.xAxisProperties.scale, e);
                    f = c.findClosestXAxisIndex(g, d.data);
                } else {
                    var h = c.xAxisProperties.scale;
                    f = b.AxisHelper.getOrdinalScaleClosestDataPointIndex(h, e);
                }
                return d.data[f].tooltipInfo;
            }, d.prototype.getVisualCategoryAxisIsScalar = function() {
                return this.data ? this.data.isScalar : !1;
            }, d.prototype.getSupportedCategoryAxisType = function() {
                var c = this.dataViewCat ? this.dataViewCat.categories : void 0, d = a.ValueType.fromDescriptor({
                    text: !0
                });
                c && c.length > 0 && c[0].source && c[0].source.type && (d = c[0].source.type);
                var e = b.AxisHelper.isOrdinal(d);
                return e ? a.axisType.categorical : a.axisType.both;
            }, d.prototype.getPreferredPlotArea = function(a, c, d) {
                return b.CartesianChart.getPreferredPlotArea(c, d, this.currentViewport, this.isScrollable, a);
            }, d.prototype.getCategoryCount = function(a) {
                var c = this.getAvailableWidth(), d = b.CartesianChart.MinOrdinalRectThickness;
                return Math.min(Math.round((c - d * b.CartesianChart.OuterPaddingRatio * 2) / d), a);
            }, d.prototype.getAvailableWidth = function() {
                return this.currentViewport.width - (this.margin.left + this.margin.right);
            }, d.prototype.getAvailableHeight = function() {
                return this.currentViewport.height - (this.margin.top + this.margin.bottom);
            }, d.sliceSeries = function(b, c, d) {
                void 0 === d && (d = 0);
                var e = [];
                if (b && b.length > 0) for (var f = 0, g = b.length; g > f; f++) e[f] = a.Prototype.inherit(b[f]), 
                e[f].data = b[f].data.slice(d, d + c);
                return e;
            }, d.prototype.extraLineShift = function() {
                if (!this.data.isScalar) {
                    var a = this.xAxisProperties.scale;
                    if (a.rangeBand) return a.rangeBand() / 2;
                }
                return 0;
            }, d.prototype.hasDataPoint = function(a) {
                if (0 === a.length) return !1;
                for (var b = 0, c = a.length; c > b; b++) if (a[b].data.length > 0) return !0;
                return !1;
            }, d.prototype.lookupXValue = function(a, c) {
                var d = b.AxisHelper.isDateTime(c);
                if (d && this.data.isScalar) return new Date(a);
                if (this.data && this.data.series && this.data.series.length > 0) {
                    var e = this.data.series[0];
                    if (e) {
                        var f = e.data;
                        if (f) {
                            var g = f[a];
                            if (g) return d ? new Date(g.categoryValue) : g.categoryValue;
                        }
                    }
                }
                return a;
            }, d.prototype.getXValue = function(a) {
                return this.data.isScalar ? a.categoryValue : a.categoryIndex;
            }, d.prototype.shouldDrawCircle = function(a, b) {
                var c = a.data.length, d = b === c - 1, e = 0 === b;
                return b > c - 1 || null === a.data[b] || null === a.data[b].value ? !1 : e && d ? !0 : e && c > 1 && null === a.data[b + 1].value ? !0 : !e && d && null === a.data[b - 1].value ? !0 : e || d || null !== a.data[b - 1].value || null !== a.data[b + 1].value ? !1 : !0;
            }, d.prototype.selectColumn = function(a, b) {
                if (void 0 === b && (b = !1), b || this.lastInteractiveSelectedColumnIndex !== a) {
                    this.lastInteractiveSelectedColumnIndex = a;
                    var c = this.getChartX(a);
                    this.setHoverLine(c);
                    var d = this.createLegendDataPoints(a);
                    this.options.cartesianHost.updateLegend(d);
                }
            }, d.prototype.setHoverLine = function(a) {
                this.hoverLine.attr("x1", a).attr("x2", a).attr("y1", 0).attr("y2", this.getAvailableHeight()).style("opacity", 1);
                var b = this;
                this.mainGraphicsContext.selectAll(d.CategoryClassSelector).selectAll(d.PathElementName).each(function(c) {
                    var d = this, e = c.color, f = b.selectionCircles[c.lineIndex];
                    f.attr({
                        cx: a,
                        cy: function() {
                            var c = d3.select(d).node(), e = b.getPosition(a, c);
                            return e.y;
                        }
                    }).style({
                        opacity: 1,
                        fill: e
                    }), b.dragHandle && b.dragHandle.attr("cx", a);
                });
            }, d.prototype.getChartX = function(b) {
                var c;
                c = this.data.isScalar ? Math.max(0, this.xAxisProperties.scale(this.data.series[0].data[b].categoryValue)) : Math.max(0, this.xAxisProperties.scale(b));
                var d = a.visuals.AxisHelper.extent(this.xAxisProperties.scale)[1];
                return c = Math.min(c, d), isNaN(c) ? void 0 : c;
            }, d.prototype.findIndex = function(b) {
                b -= this.margin.left + a.visuals.LineChart.HorizontalShift;
                var c = a.visuals.AxisHelper.invertScale(this.xAxisProperties.scale, b), d = c;
                return this.data.isScalar && (d = this.findClosestXAxisIndex(c, this.data.series[0].data)), 
                d;
            }, d.prototype.findClosestXAxisIndex = function(a, b) {
                var c = -1, d = Number.MAX_VALUE;
                for (var e in b) {
                    var f = Math.abs(a - b[e].categoryValue);
                    d > f && (d = f, c = e);
                }
                return c;
            }, d.prototype.getPosition = function(a, c) {
                for (var d, e, f = c.getTotalLength(), g = 0, h = f; ;) {
                    if (e = Math.floor((g + h) / 2), d = c.getPointAtLength(e), b.SVGUtil.ensureValidSVGPoint(d), 
                    (e === h || e === g) && d.x !== a) break;
                    if (d.x > a) h = e; else {
                        if (!(d.x < a)) break;
                        g = e;
                    }
                }
                return d;
            }, d.prototype.createLegendDataPoints = function(a) {
                var c = this.data;
                if (!c) return null;
                var d, e = [];
                if (c.series.length > 0) {
                    var f = c.series[0].data[a], g = b.AxisHelper.isDateTime(this.xAxisProperties.axisType), h = g && this.data.isScalar ? f.categoryValue : a;
                    d = f && this.lookupXValue(h, this.xAxisProperties.axisType);
                }
                for (var i = b.lineChartProps.general.formatString, j = null, k = 0, l = c.series.length; l > k; k++) {
                    var m = c.series[k], n = m.data, o = n[a], p = o && o.value, q = b.converterHelper.getFormattedLegendLabel(m.yCol, this.dataViewCat.values, i);
                    j = m.yCol, e.push({
                        color: m.color,
                        icon: 2,
                        label: q,
                        category: b.valueFormatter.format(d, b.valueFormatter.getFormatString(m.xCol, i)),
                        measure: b.valueFormatter.format(p, b.valueFormatter.getFormatString(m.yCol, i)),
                        identity: m.identity,
                        selected: !1
                    });
                }
                var r = this.dataViewCat ? this.dataViewCat.values : null, s = r && r.source ? r.source.displayName : "";
                return {
                    title: s,
                    dataPoints: e
                };
            }, d.prototype.accept = function(a, b) {
                a.visitLineChart(b);
            }, d.ClassName = "lineChart", d.MainGraphicsContextClassName = "mainGraphicsContext", 
            d.DataLabelsSVGClassName = "dataLabelsSVG", d.CategoryClassName = "cat", d.CategoryClassSelector = ".cat", 
            d.CategoryValuePoint = {
                "class": "dot",
                selector: ".dot"
            }, d.CategoryAreaClassName = "catArea", d.CategoryAreaClassSelector = ".catArea", 
            d.HorizontalShift = 0, d.CircleRadius = 4, d.PathElementName = "path", d.CircleElementName = "circle", 
            d.CircleClassName = "selection-circle", d.LineElementName = "line", d.AreaFillOpacity = .4, 
            d.DimmedAreaFillOpacity = .2, d;
        }());
        b.LineChart = d;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a, b) {
            return {
                m00: 1,
                m01: 0,
                m02: a,
                m10: 0,
                m11: 1,
                m12: b
            };
        }
        function d(a, b) {
            return {
                m00: a,
                m01: 0,
                m02: 0,
                m10: 0,
                m11: b,
                m12: 0
            };
        }
        function e(a) {
            var b = a, c = Math.sin(b), d = Math.cos(b);
            return {
                m00: d,
                m01: -c,
                m02: 0,
                m10: c,
                m11: d,
                m12: 0
            };
        }
        function f(a) {
            var b = a.m00 * a.m11 - a.m01 * a.m10, c = 1 / b;
            return {
                m00: a.m11 * c,
                m01: -a.m01 * c,
                m02: (a.m01 * a.m12 - a.m02 * a.m11) * c,
                m10: -a.m10 * c,
                m11: a.m00 * c,
                m12: -(a.m00 * a.m12 - a.m10 * a.m02) * c
            };
        }
        function g(a, b) {
            return {
                m00: a.m00 * b.m00 + a.m01 * b.m10,
                m01: a.m00 * b.m01 + a.m01 * b.m11,
                m02: a.m00 * b.m02 + a.m01 * b.m12 + a.m02,
                m10: a.m10 * b.m00 + a.m11 * b.m10,
                m11: a.m10 * b.m01 + a.m11 * b.m11,
                m12: a.m10 * b.m02 + a.m11 * b.m12 + a.m12
            };
        }
        var h = function() {
            function a(a, b) {
                void 0 === a && (a = 0), void 0 === b && (b = 0), this.x = a || 0, this.y = b || 0;
            }
            return a;
        }();
        b.Point = h;
        var i = function() {
            function a(a, b, c, d) {
                void 0 === a && (a = 0), void 0 === b && (b = 0), void 0 === c && (c = 0), void 0 === d && (d = 0), 
                this.left = a || 0, this.top = b || 0, this.width = c || 0, this.height = d || 0;
            }
            return a;
        }();
        b.Rect = i;
        var j = function() {
            function a(a) {
                this.matrix = a || {
                    m00: 1,
                    m01: 0,
                    m02: 0,
                    m10: 0,
                    m11: 1,
                    m12: 0
                };
            }
            return a.prototype.applyToPoint = function(a) {
                if (!a) return a;
                var b = this.matrix;
                return {
                    x: b.m00 * a.x + b.m01 * a.y + b.m02,
                    y: b.m10 * a.x + b.m11 * a.y + b.m12
                };
            }, a.prototype.applyToRect = function(a) {
                if (!a) return a;
                var b = a.left, c = a.top, d = this.matrix, e = 1 !== d.m00 || 1 !== d.m11, f = 0 !== d.m01 || 0 !== d.m10;
                if (!f && !e) return {
                    left: b + d.m02,
                    top: c + d.m12,
                    width: a.width,
                    height: a.height
                };
                var g, h, i, j, k = a.left + a.width, l = a.top + a.height;
                if (f) {
                    var m = d.m00 * b + d.m01 * c + d.m02, n = d.m10 * b + d.m11 * c + d.m12, o = d.m00 * b + d.m01 * l + d.m02, p = d.m10 * b + d.m11 * l + d.m12, q = d.m00 * k + d.m01 * c + d.m02, r = d.m10 * k + d.m11 * c + d.m12, s = d.m00 * k + d.m01 * l + d.m02, t = d.m10 * k + d.m11 * l + d.m12;
                    g = Math.min(m, o, q, s), h = Math.max(m, o, q, s), i = Math.min(n, p, r, t), j = Math.max(n, p, r, t);
                } else {
                    var m = d.m00 * b + d.m02, n = d.m11 * c + d.m12, s = d.m00 * k + d.m02, t = d.m11 * l + d.m12;
                    g = Math.min(m, s), h = Math.max(m, s), i = Math.min(n, t), j = Math.max(n, t);
                }
                return {
                    left: g,
                    top: i,
                    width: h - g,
                    height: j - i
                };
            }, a.prototype.translate = function(a, b) {
                if (0 !== a || 0 !== b) {
                    var d = c(a, b);
                    this.matrix = g(this.matrix, d), this._inverse = null;
                }
            }, a.prototype.scale = function(a, b) {
                if (1 !== a || 1 !== b) {
                    var c = d(a, b);
                    this.matrix = g(this.matrix, c), this._inverse = null;
                }
            }, a.prototype.rotate = function(a) {
                if (0 !== a) {
                    var b = e(a);
                    this.matrix = g(this.matrix, b), this._inverse = null;
                }
            }, a.prototype.add = function(a) {
                a && (this.matrix = g(this.matrix, a.matrix), this._inverse = null);
            }, a.prototype.getInverse = function() {
                return this._inverse || (this._inverse = new a(f(this.matrix))), this._inverse;
            }, a;
        }();
        b.Transform = j, b.createTranslateMatrix = c, b.createScaleMatrix = d, b.createRotationMatrix = e, 
        b.createInverseMatrix = f;
        var k = 11, l = function() {
            function b() {
                this._locationRect = new Microsoft.Maps.LocationRect(new Microsoft.Maps.Location(30, -30), 60, 60);
            }
            return b.prototype.reCalc = function(b, c, d) {
                var e = [ this._locationRect.getNorthwest(), this._locationRect.getSoutheast() ], c = c / 2, d = d / 2;
                if (!this._baseRect) {
                    var f = a.visuals.BI.Services.MapServices.locationToPixelXY(this._locationRect.getNorthwest(), k), g = a.visuals.BI.Services.MapServices.locationToPixelXY(this._locationRect.getSoutheast(), k);
                    this._baseRect = new i(f.x, f.y, g.x - f.x, g.y - f.y);
                }
                var h = b.tryLocationToPixel(e);
                this._currentRect = new i(h[0].x + c, h[0].y + d, h[1].x - h[0].x, h[1].y - h[0].y);
            }, Object.defineProperty(b.prototype, "scale", {
                get: function() {
                    return this._baseRect ? this._currentRect.width / this._baseRect.width : 1;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(b.prototype, "transform", {
                get: function() {
                    var a = this._baseRect, b = this._currentRect, c = new j();
                    return c.translate(b.left, b.top), c.scale(b.width / a.width, b.height / a.height), 
                    c.translate(-a.left, -a.top), c;
                },
                enumerable: !0,
                configurable: !0
            }), Object.defineProperty(b.prototype, "outherTransform", {
                get: function() {
                    var a = this._baseRect, b = this._currentRect, c = new j();
                    c.translate(b.left, b.top);
                    var d = Math.sqrt(b.width / a.width);
                    return c.scale(d, d), c;
                },
                enumerable: !0,
                configurable: !0
            }), b.prototype.setViewBox = function(a) {
                var b = a.getBoundingClientRect(), c = this._currentRect;
                a.setAttribute("viewBox", [ -c.left, -c.top, b.width, b.height ].join(" "));
            }, Object.defineProperty(b.prototype, "innerTransform", {
                get: function() {
                    var a = this._baseRect, b = this._currentRect, c = new j(), d = b.width / a.width;
                    return c.scale(d, d), c.translate(-a.left, -a.top), c;
                },
                enumerable: !0,
                configurable: !0
            }), b.prototype.transformToString = function(a) {
                var b = a.matrix;
                return "matrix(" + b.m00 + " " + b.m10 + " " + b.m01 + " " + b.m11 + " " + b.m02 + " " + b.m12 + ")";
            }, b;
        }();
        b.MapPolygonInfo = l;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(a) {
            var b;
            !function(a) {
                var b;
                !function(b) {
                    "use strict";
                    function c(a) {
                        return b.CategoryTypeArray.indexOf(a) > -1;
                    }
                    function d(a) {
                        var b = p ? p.getCoordinates(a) : void 0, c = $.Deferred();
                        return b ? c.resolve(b) : (l.push({
                            query: a,
                            deferred: c
                        }), g()), c;
                    }
                    function e(a, b) {
                        return void 0 === b && (b = ""), d(new q(a, b));
                    }
                    function f(a, b, c, e, f) {
                        return void 0 === c && (c = ""), void 0 === e && (e = 2), void 0 === f && (f = 3), 
                        d(new r(a, b, c, e, f));
                    }
                    function g(a) {
                        for (void 0 === a && (a = 0), m -= a; m < b.Settings.MaxBingRequest && 0 !== l.length; ) m++, 
                        h(l.shift());
                    }
                    function h(a) {
                        var c = p ? p.getCoordinates(a.query) : void 0;
                        if (c) return setTimeout(function() {
                            return g(1);
                        }), void a.deferred.resolve(c);
                        var d = {
                            type: "GET",
                            dataType: "jsonp",
                            jsonp: "jsonp"
                        }, e = a.query.getUrl();
                        e || i(a, new Error("Unsupported query.")), b.BingAjaxCall(e, d).then(function(b) {
                            try {
                                if (a.query instanceof r) {
                                    var c = b;
                                    if (c && c.d && Array.isArray(c.d.results) && c.d.results.length > 0) {
                                        var d = c.d.results[0], e = d.Primitives;
                                        if (e && e.length > 0) {
                                            var f = {
                                                latitude: a.query.latitude,
                                                longitude: a.query.longitude,
                                                locations: []
                                            };
                                            e.sort(function(a, b) {
                                                return a.Shape.length < b.Shape.length ? 1 : a.Shape.length > b.Shape.length ? -1 : 0;
                                            });
                                            for (var g = Math.min(e.length, a.query.maxGeoData), h = 0; g > h; h++) for (var k = e[h].Shape, l = k.split(","), m = 1; m < l.length; m++) f.locations.push({
                                                nativeBing: l[m]
                                            });
                                            i(a, null, f);
                                        } else i(a, new Error("Geocode result is empty."));
                                    } else i(a, new Error("Geocode result is empty."));
                                } else {
                                    var n = b.resourceSets[0].resources;
                                    if (Array.isArray(n) && n.length > 0) {
                                        var o = j(n, a.query), p = n[o].point.coordinates, f = {
                                            latitude: parseFloat(p[0]),
                                            longitude: parseFloat(p[1])
                                        };
                                        i(a, null, f);
                                    } else i(a, new Error("Geocode result is empty."));
                                }
                            } catch (q) {
                                i(a, q);
                            }
                        }, function(b) {
                            i(a, b);
                        });
                    }
                    function i(a, c, d) {
                        void 0 === d && (d = null), s = setTimeout(function() {
                            return g(1);
                        }, b.Settings.UseDoubleArrayGeodataResult ? b.Settings.UseDoubleArrayDequeueTimeout : 0), 
                        c ? a.deferred.reject(c) : (p && p.registerCoordinates(a.query, d), a.deferred.resolve(d));
                    }
                    function j(a, b) {
                        for (var c = b.getBingEntity().toLowerCase(), d = 0; d < a.length; d++) {
                            var e = (a[d].entityType || "").toLowerCase();
                            if (e === c) return d;
                        }
                        return 0;
                    }
                    function k() {
                        l = [], m = 0, n = null, clearTimeout(s);
                    }
                    b.Settings = {
                        MaxBingRequest: 6,
                        MaxCacheSize: 3e3,
                        MaxCacheSizeOverflow: 100,
                        BingKey: "INSERT KEY",
                        BingUrl: "https://dev.virtualearth.net/REST/v1/Locations?",
                        BingUrlGeodata: "https://platform.bing.com/geo/spatial/v1/public/Geodata?",
                        UseDoubleArrayGeodataResult: !0,
                        UseDoubleArrayDequeueTimeout: 0
                    }, b.safeCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-", 
                    b.BingAjaxCall = $.ajax, b.CategoryTypes = {
                        Address: "Address",
                        City: "City",
                        Continent: "Continent",
                        CountryRegion: "Country",
                        County: "County",
                        Longitude: "Longitude",
                        Latitude: "Latitude",
                        Place: "Place",
                        PostalCode: "PostalCode",
                        StateOrProvince: "StateOrProvince"
                    }, b.CategoryTypeArray = [ "Address", "City", "Continent", "Country", "County", "Longitude", "Latitude", "Place", "PostalCode", "StateOrProvince" ], 
                    b.isCategoryType = c, b.BingEntities = {
                        Continent: "Continent",
                        Sovereign: "Sovereign",
                        CountryRegion: "CountryRegion",
                        AdminDivision1: "AdminDivision1",
                        AdminDivision2: "AdminDivision2",
                        PopulatedPlace: "PopulatedPlace",
                        Postcode: "Postcode",
                        Postcode1: "Postcode1",
                        Neighborhood: "Neighborhood",
                        Address: "Address"
                    };
                    var l, m, n, o, p, q = function() {
                        function c(c, d) {
                            void 0 === c && (c = ""), void 0 === d && (d = ""), this.query = c, this.category = d, 
                            this.key = (this.query + "/" + this.category).toLowerCase(), this._cacheHits = 0, 
                            p || (p = a.createGeocodingCache(b.Settings.MaxCacheSize, b.Settings.MaxCacheSizeOverflow));
                        }
                        return c.prototype.incrementCacheHit = function() {
                            this._cacheHits++;
                        }, c.prototype.getCacheHits = function() {
                            return this._cacheHits;
                        }, c.prototype.getBingEntity = function() {
                            var a = this.category.toLowerCase();
                            return n || (n = {}, n[b.CategoryTypes.Continent.toLowerCase()] = b.BingEntities.Continent, 
                            n[b.CategoryTypes.CountryRegion.toLowerCase()] = b.BingEntities.Sovereign, n[b.CategoryTypes.StateOrProvince.toLowerCase()] = b.BingEntities.AdminDivision1, 
                            n[b.CategoryTypes.County.toLowerCase()] = b.BingEntities.AdminDivision2, n[b.CategoryTypes.City.toLowerCase()] = b.BingEntities.PopulatedPlace, 
                            n[b.CategoryTypes.PostalCode.toLowerCase()] = b.BingEntities.Postcode, n[b.CategoryTypes.Address.toLowerCase()] = b.BingEntities.Address), 
                            n[a] || "";
                        }, c.prototype.getUrl = function() {
                            var a = b.Settings.BingUrl + "key=" + b.Settings.BingKey, c = this.getBingEntity(), d = !1;
                            c && (c === b.BingEntities.Postcode ? a += "&includeEntityTypes=Postcode,Postcode1,Postcode2,Postcode3,Postcode4" : -1 !== this.query.indexOf(",") || c !== b.BingEntities.AdminDivision1 && c !== b.BingEntities.AdminDivision2 ? a += "&includeEntityTypes=" + c : (d = !0, 
                            a += "&adminDistrict=" + decodeURIComponent(this.query))), d || (a += "&q=" + decodeURIComponent(this.query));
                            var e = navigator.userLanguage || navigator.language;
                            return e && (a += "&c=" + e), a += "&maxRes=20";
                        }, c;
                    }();
                    b.GeocodeQuery = q;
                    var r = function(a) {
                        function c(b, c, d, e, f) {
                            void 0 === f && (f = 3), a.call(this, [ b, c, e, f ].join(","), d), this.latitude = b, 
                            this.longitude = c, this.levelOfDetail = e, this.maxGeoData = f;
                        }
                        return __extends(c, a), c.prototype.getBingEntity = function() {
                            var a = this.category.toLowerCase();
                            return o || (o = {}, o[b.CategoryTypes.CountryRegion.toLowerCase()] = b.BingEntities.CountryRegion, 
                            o[b.CategoryTypes.StateOrProvince.toLowerCase()] = b.BingEntities.AdminDivision1, 
                            o[b.CategoryTypes.County.toLowerCase()] = b.BingEntities.AdminDivision2, o[b.CategoryTypes.City.toLowerCase()] = b.BingEntities.PopulatedPlace, 
                            o[b.CategoryTypes.PostalCode.toLowerCase()] = b.BingEntities.Postcode1), o[a] || "";
                        }, c.prototype.getUrl = function() {
                            var a = b.Settings.BingUrlGeodata + "key=" + b.Settings.BingKey + "&$format=json", c = this.getBingEntity();
                            if (!c) return null;
                            var d = navigator.userLanguage || navigator.language, e = d.split("-"), f = [ this.latitude, this.longitude, this.levelOfDetail, "'" + c + "'", 1, 0, "'" + d + "'" ];
                            return e.length > 1 && f.push("'" + e[1] + "'"), a + "&SpatialFilter=GetBoundary(" + f.join(", ") + ")";
                        }, c;
                    }(q);
                    b.GeocodeBoundaryQuery = r, b.geocodeCore = d, b.geocode = e, b.geocodeBoundary = f;
                    var s;
                    b.reset = k, k();
                }(b = a.GeocodingManager || (a.GeocodingManager = {}));
            }(b = a.Services || (a.Services = {}));
        }(b = a.BI || (a.BI = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c;
        !function(b) {
            var c;
            !function(b) {
                var c;
                !function(b) {
                    "use strict";
                    function c(a, b, c) {
                        return Math.min(Math.max(a, b), c);
                    }
                    function d(a) {
                        return 23 === a ? 2147483648 : Math.floor(a) === a ? 256 << a : 256 * Math.pow(2, a);
                    }
                    function e(a, e) {
                        for (var f = new Float64Array(a.length), g = 0; g < a.length; g += 2) {
                            var h = c(a[g], b.MinAllowedLatitude, b.MaxAllowedLatitude), i = c(a[g + 1], b.MinAllowedLongitude, b.MaxAllowedLongitude), j = (i + 180) / 360, k = Math.sin(h * Math.PI / 180), l = .5 - Math.log((1 + k) / (1 - k)) / (4 * Math.PI), m = d(e);
                            f[g] = c(j * m + .5, 0, m - 1), f[g + 1] = c(l * m + .5, 0, m - 1);
                        }
                        return f;
                    }
                    function f(a) {
                        var b = 8e4;
                        if (a.length > b) {
                            for (var c = "", d = 0; d < a.length; d += b) {
                                var e = Array.apply([], a.subarray(d, d + b));
                                c += e.join(" ") + " ";
                            }
                            return c;
                        }
                        return Array.apply([], a).join(" ");
                    }
                    function g(a) {
                        var b = 8e4, c = [];
                        if (a.length > b) {
                            for (var d = 0; d < a.length; d += b) {
                                var e = Array.apply([], a.subarray(d, d + b));
                                c.concat(e);
                            }
                            return c;
                        }
                        return Array.apply([], a);
                    }
                    function h(a) {
                        for (var b = {
                            latitude: -90,
                            longitude: 180
                        }, d = {
                            latitude: 90,
                            longitude: -180
                        }, e = 0; e < a.length; e += 2) b.latitude = Math.max(a[e], b.latitude), b.longitude = Math.min(a[e + 1], b.longitude), 
                        d.latitude = Math.min(a[e], d.latitude), d.longitude = Math.max(a[e + 1], d.longitude);
                        return b.longitude = c(b.longitude, -180, 180), d.longitude = c(d.longitude, -180, 180), 
                        Microsoft.Maps.LocationRect.fromCorners(new Microsoft.Maps.Location(b.latitude, b.longitude), new Microsoft.Maps.Location(d.latitude, d.longitude));
                    }
                    function i(a) {
                        for (var b = [], c = 0, d = 0, e = 0, f = 4294967296; c < a.length; ) {
                            for (var g = 0, h = 0; ;) {
                                if (c >= a.length) return null;
                                var i = o.indexOf(a.charAt(c++));
                                if (-1 === i) return null;
                                var j = (31 & i) * Math.pow(2, h), k = j / f, l = j % f, m = g / f, n = g % f, p = (l | n) >>> 0;
                                if (g = (k | m) * f + p, h += 5, 32 > i) break;
                            }
                            var q = Math.floor((Math.sqrt(8 * g + 5) - 1) / 2);
                            g -= q * (q + 1) / 2;
                            var r = Math.floor(g), s = q - r;
                            s = s >> 1 ^ -(1 & s), r = r >> 1 ^ -(1 & r), d += s, e += r;
                            var t = 1e-5 * e, u = 1e-5 * d;
                            b.push(t), b.push(u);
                        }
                        return new Float64Array(b);
                    }
                    function j(a) {
                        for (var c = a.locations, d = 0; d < c.length; d++) {
                            var e = c[d];
                            e.geographic || (e.geographic = b.parseEncodedSpatialValueArray(e.nativeBing));
                            var f = e.geographic;
                            f && (e.absolute || (e.absolute = b.latLongToPixelXYArray(f, b.DefaultLevelOfDetail), 
                            e.absoluteString = b.pointArrayToString(e.absolute), e.geographicBounds = b.getLocationBoundaries(f), 
                            e.absoluteBounds = b.locationRectToRectXY(e.geographicBounds, b.DefaultLevelOfDetail)));
                        }
                    }
                    function k(b, c, d) {
                        var f = e(new Float64Array([ b, c ]), d);
                        return new a.visuals.Point(f[0], f[1]);
                    }
                    function l(a, b) {
                        return k(a.latitude, a.longitude, b);
                    }
                    function m(b, c) {
                        var d = l(b.getNorthwest(), c), e = l(b.getSoutheast(), c);
                        return new a.visuals.Rect(d.x, d.y, e.x - d.x, e.y - d.y);
                    }
                    function n(a, b, e) {
                        var f = d(e), g = c(a, 0, f - 1) / f - .5, h = .5 - c(b, 0, f - 1) / f, i = 90 - 360 * Math.atan(Math.exp(2 * -h * Math.PI)) / Math.PI, j = 360 * g;
                        return new Microsoft.Maps.Location(i, j);
                    }
                    b.MinAllowedLatitude = -85.05112878, b.MaxAllowedLatitude = 85.05112878, b.MinAllowedLongitude = -180, 
                    b.MaxAllowedLongitude = 180, b.TileSize = 256, b.MaxLevelOfDetail = 23, b.MinLevelOfDetail = 1, 
                    b.MaxAutoZoomLevel = 5, b.DefaultLevelOfDetail = 11, b.WorkerErrorName = "___error___";
                    var o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
                    b.clip = c, b.getMapSize = d, b.latLongToPixelXYArray = e, b.pointArrayToString = f, 
                    b.pointArrayToArray = g, b.getLocationBoundaries = h, b.parseEncodedSpatialValueArray = i, 
                    b.calcGeoData = j, b.latLongToPixelXY = k, b.locationToPixelXY = l, b.locationRectToRectXY = m, 
                    b.pixelXYToLocation = n;
                }(c = b.MapServices || (b.MapServices = {}));
            }(c = b.Services || (b.Services = {}));
        }(c = b.BI || (b.BI = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a, b, c, d, e) {
            return void 0 === d && (d = !1), void 0 === e && (e = 0), b ? new h(a) : new g(a, e, c, d);
        }
        function d(a) {
            switch (a) {
              case 1:
                return "icon circle";

              case 0:
                return "icon tall";

              case 2:
                return "icon short";
            }
        }
        function e(a, b, c) {
            var d, e = a.width, f = 250, g = 490, h = 750, i = 20, j = 28;
            return 1 > b ? "48px" : f >= e ? (d = c ? 4 : 3, Math.floor((f - i - j * d) / Math.min(b, d)) + "px") : g >= e ? (d = c ? 6 : 5, 
            Math.floor((g - i - j * d) / Math.min(b, d)) + "px") : h >= e ? (d = c ? 8 : 7, 
            Math.floor((h - i - j * d) / Math.min(b, d)) + "px") : (d = c ? 10 : 9, Math.floor((e - i - j * d) / Math.min(b, d)) + "px");
        }
        !function(a) {
            a[a.Box = 0] = "Box", a[a.Circle = 1] = "Circle", a[a.Line = 2] = "Line";
        }(b.LegendIcon || (b.LegendIcon = {}));
        b.LegendIcon;
        !function(a) {
            a[a.Top = 0] = "Top", a[a.Bottom = 1] = "Bottom", a[a.Right = 2] = "Right", a[a.Left = 3] = "Left", 
            a[a.None = 4] = "None";
        }(b.LegendPosition || (b.LegendPosition = {}));
        b.LegendPosition;
        b.legendProps = {
            show: "show",
            position: "position",
            titleText: "titleText",
            showTitle: "showTitle"
        }, b.createLegend = c, b.getIconClass = d, b.getLabelMaxSize = e;
        var f, g = function() {
            function c(a, c, d, e) {
                this.svg = d3.select(a.get(0)).insert("svg", ":first-child"), this.svg.style("display", "inherit"), 
                this.svg.classed("legend", !0), this.clearCatcher = b.appendClearCatcher(this.svg), 
                this.interactivityService = d, this.element = a, this.changeOrientation(c), this.parentViewport = {
                    height: 0,
                    width: 0
                }, this.calculateViewport(), this.updateLayout();
            }
            return c.prototype.updateLayout = function() {
                var a = this.viewport, b = this.orientation;
                this.svg.attr({
                    height: a.height || (4 === b ? 0 : this.parentViewport.height),
                    width: a.width || (4 === b ? 0 : this.parentViewport.width)
                }), this.svg.style({
                    "float": this.getFloat(),
                    position: 1 === b ? "absolute" : "",
                    bottom: 1 === b ? "0px" : ""
                });
            }, c.prototype.calculateViewport = function() {
                switch (this.orientation) {
                  case 0:
                  case 1:
                    return void (this.viewport = {
                        height: c.TopLegendHeight,
                        width: 0
                    });

                  case 2:
                  case 3:
                    return void (this.viewport = {
                        height: 0,
                        width: this.parentViewport.width * c.LegendMaxWidthFactor
                    });

                  case 4:
                    this.viewport = {
                        height: 0,
                        width: 0
                    };
                }
            }, c.prototype.getFloat = function() {
                switch (this.orientation) {
                  case 2:
                    return "right";

                  case 3:
                    return "left";

                  default:
                    return "";
                }
            }, c.prototype.accept = function(a, b) {
                a.visitLegend(b);
            }, c.prototype.getMargins = function() {
                return this.viewport;
            }, c.prototype.isVisible = function() {
                return 4 !== this.orientation;
            }, c.prototype.changeOrientation = function(a) {
                a ? this.orientation = a : this.orientation = 0, this.svg.attr("orientation", a);
            }, c.prototype.getOrientation = function() {
                return this.orientation;
            }, c.prototype.drawLegend = function(a, b) {
                var d = jsCommon.PerformanceUtil.create("drawLegend");
                this.parentViewport = b, 0 === a.dataPoints.length && this.changeOrientation(4), 
                4 === this.getOrientation() && (a.dataPoints = []);
                var e = this.element.children(".mapControl");
                e.length > 0 && !this.isTopOrBottom(this.orientation) && e.css("display", "inline-block"), 
                this.calculateViewport();
                var f = this.calculateLayout(a), g = f.title, h = g ? [ g ] : [], i = this.svg.selectAll(c.LegendTitle.selector).data(h);
                i.enter().append("text").style({
                    "font-size": c.LegendTitleTextProperties.fontSize,
                    "font-family": c.LegendTitleTextProperties.fontFamily
                }).classed(c.LegendTitle["class"], !0), i.text(function(a) {
                    return a.text;
                }).attr({
                    x: function(a) {
                        return a.x;
                    },
                    y: function(a) {
                        return a.y;
                    }
                }), i.exit().remove();
                var j = f.dataPoints, k = this.svg.selectAll(c.LegendItem.selector).data(j, function(a) {
                    return a.label + a.color;
                }), l = k.enter().append("g").classed(c.LegendItem["class"], !0);
                if (l.append("circle").classed(c.LegendIcon["class"], !0), l.append("title"), l.append("text").classed(c.LegendText["class"], !0).style({
                    "font-size": c.LegendTextProperties.fontSize,
                    "font-family": c.LegendTextProperties.fontFamily
                }), k.select(c.LegendIcon.selector).attr({
                    cx: function(a, b) {
                        return a.glyphPosition.x;
                    },
                    cy: function(a) {
                        return a.glyphPosition.y;
                    },
                    r: c.LegendIconRadius
                }).style("fill", function(a) {
                    return a.color;
                }), k.select("title").text(function(a) {
                    return a.tooltip;
                }), k.select(c.LegendText.selector).attr({
                    x: function(a) {
                        return a.textPosition.x;
                    },
                    y: function(a) {
                        return a.textPosition.y;
                    }
                }).text(function(a) {
                    return a.label;
                }), this.interactivityService) {
                    var m = k.select(c.LegendIcon.selector), n = {
                        datapoints: j,
                        legendItems: k,
                        legendIcons: m,
                        clearCatcher: this.clearCatcher
                    };
                    this.interactivityService.apply(this, n);
                }
                k.exit().remove(), this.updateLayout(), d.end();
            }, c.prototype.calculateTitleLayout = function(b) {
                var d = 0, e = !jsCommon.StringExtensions.isNullOrEmpty(b);
                if (e) {
                    var f = c.LegendTextProperties, g = f.text = b, h = this.isTopOrBottom(this.orientation), i = c.TextAndIconPadding + c.LegendIconRadius, j = c.LegendIconRadius + c.TextAndIconPadding + i, k = this.parentViewport.width * c.LegendMaxWidthFactor - j - c.LegendEdgeMariginWidth, l = h ? c.MaxTitleLength : k, d = a.TextMeasurementService.measureSvgTextWidth(f);
                    return d > l && (g = a.TextMeasurementService.getTailoredTextOrDefault(f, l), d = l), 
                    h && (d += c.TitlePadding), {
                        x: 0,
                        y: 0,
                        text: g,
                        width: d
                    };
                }
                return null;
            }, c.prototype.calculateLayout = function(a) {
                if (0 === a.dataPoints.length) return {
                    dataPoints: [],
                    title: null
                };
                var b = a.dataPoints, c = this.calculateTitleLayout(a.title), d = $.extend(!0, [], b);
                return this.isTopOrBottom(this.orientation) ? {
                    dataPoints: this.calculateHorizontalLayout(d, c),
                    title: c
                } : {
                    dataPoints: this.calculateVerticalLayout(d, c),
                    title: c
                };
            }, c.prototype.calculateHorizontalLayout = function(b, d) {
                var e = c.LegendIconRadius + c.TextAndIconPadding, f = 11, e = f + 4, g = 0, h = 2 * c.LegendIconRadius + 3 * c.TextAndIconPadding;
                d && (g = d.width, d.y = e);
                var i = b.length, j = this.parentViewport.width, k = i > 0 ? (j - g - h * i) / i | 0 : 0;
                k = k > c.MaxTextLength ? k : c.MaxTextLength;
                for (var l = 0; i > l; l++) {
                    var m = b[l];
                    m.glyphPosition = {
                        x: g + c.LegendIconRadius,
                        y: f
                    }, m.textPosition = {
                        x: g + e,
                        y: e
                    };
                    var n = c.LegendTextProperties;
                    n.text = m.label, m.tooltip = m.label;
                    var o = a.TextMeasurementService.measureSvgTextWidth(n), p = 0;
                    if (k > o) p = h + o; else {
                        var q = a.TextMeasurementService.getTailoredTextOrDefault(n, k);
                        m.label = q, p = h + k;
                    }
                    if (g += p, g > j) {
                        b.length = l;
                        break;
                    }
                }
                return b;
            }, c.prototype.calculateVerticalLayout = function(b, d) {
                var e = 20, f = 15, g = e, h = 4, i = c.TextAndIconPadding + c.LegendIconRadius, j = c.LegendIconRadius + c.TextAndIconPadding + i, k = this.parentViewport.width * c.LegendMaxWidthFactor - j - c.LegendEdgeMariginWidth, l = 0, m = this.parentViewport.height;
                d && (g += f, d.x = c.TextAndIconPadding, d.y = f, l = d.width || 0);
                for (var n = 0, o = b.length; o > n; n++) {
                    var p = b[n];
                    p.glyphPosition = {
                        x: i,
                        y: g
                    }, p.textPosition = {
                        x: j,
                        y: g + h
                    };
                    var q = c.LegendTextProperties;
                    q.text = p.label, p.tooltip = p.label;
                    var r = a.TextMeasurementService.measureSvgTextWidth(q);
                    if (r > l && (l = r), r > k) {
                        var s = a.TextMeasurementService.getTailoredTextOrDefault(q, k);
                        p.label = s;
                    }
                    if (g += e, g > m) {
                        b.length = n;
                        break;
                    }
                }
                return k > l + j ? this.viewport.width = Math.ceil(l + j + c.LegendEdgeMariginWidth) : this.viewport.width = Math.ceil(this.parentViewport.width * c.LegendMaxWidthFactor), 
                b;
            }, c.prototype.isTopOrBottom = function(a) {
                switch (a) {
                  case 0:
                  case 1:
                    return !0;

                  default:
                    return !1;
                }
            }, c.prototype.reset = function() {}, c.LegendIconRadius = 5, c.MaxTextLength = 60, 
            c.MaxTitleLength = 80, c.TextAndIconPadding = 5, c.TitlePadding = 15, c.LegendEdgeMariginWidth = 10, 
            c.LegendMaxWidthFactor = .3, c.TopLegendHeight = 24, c.LegendTextProperties = {
                fontFamily: "wf_segoe-ui_normal",
                fontSize: "11px"
            }, c.LegendTitleTextProperties = {
                fontFamily: "wf_segoe-ui_Semibold",
                fontSize: "11px"
            }, c.LegendItem = {
                "class": "legendItem",
                selector: ".legendItem"
            }, c.LegendText = {
                "class": "legendText",
                selector: ".legendText"
            }, c.LegendIcon = {
                "class": "legendIcon",
                selector: ".legendIcon"
            }, c.LegendTitle = {
                "class": "legendTitle",
                selector: ".legendTitle"
            }, c;
        }(), h = function() {
            function c(a) {
                this.element = a;
            }
            return c.getIconClass = function(a) {
                switch (a) {
                  case 1:
                  case 0:
                  case 2:
                    return "icon";
                }
            }, c.prototype.getMargins = function() {
                return {
                    height: c.LegendHeight,
                    width: 0
                };
            }, c.prototype.drawLegend = function(a) {
                var b = a.dataPoints;
                if (!(b.length < 1)) {
                    var d = this.legendContainerDiv;
                    if (!d) {
                        if (!b.length) return;
                        var e = $("<div></div>").height(this.getMargins().height).addClass(c.LegendContainerClass);
                        this.element.prepend(e), this.legendContainerDiv = d = d3.select(e.get(0));
                    }
                    this.drawTitle(b), this.drawLegendItems(b);
                }
            }, c.prototype.reset = function() {
                this.legendContainerDiv && (this.legendContainerDiv.remove(), this.legendContainerDiv = null);
            }, c.prototype.isVisible = function() {
                return !0;
            }, c.prototype.changeOrientation = function(a) {}, c.prototype.getOrientation = function() {
                return 0;
            }, c.prototype.drawTitle = function(a) {
                var b = this.legendContainerDiv.selectAll("div." + c.LegendTitleClass), d = b.data([ a[0] ]), e = d.enter(), f = e.append("div").attr("class", c.LegendTitleClass);
                f.filter(function(a) {
                    return a.iconOnlyOnLabel;
                }).append("span").attr("class", c.legendIconClass).html(c.legendPlaceSelector), 
                f.append("span"), d.filter(function(a) {
                    return a.iconOnlyOnLabel;
                }).select("span." + c.legendIconClass).style(c.legendColorCss, function(a) {
                    return a.color;
                }), d.select("span:last-child").text(function(a) {
                    return a.category;
                });
            }, c.prototype.drawLegendItems = function(b) {
                this.ensureLegendTableCreated();
                var d = c.splitArrayToOddEven(b), e = this.legendContainerDiv.select("tbody").selectAll("tr").data(d), f = e.enter(), g = f.append("tr"), h = g.selectAll("td").data(function(a) {
                    return a;
                }, function(a) {
                    return a.label;
                }).enter().append("td").attr("class", c.LegendItem), i = h.append("span");
                i.filter(function(a) {
                    return !a.iconOnlyOnLabel;
                }).append("span").html(c.legendPlaceSelector).attr("class", c.legendIconClass).style("color", function(a) {
                    return a.color;
                }).attr("white-space", "nowrap"), i.append("span").attr("class", c.legendItemNameClass), 
                i.append("span").attr("class", c.legendItemMeasureClass);
                var j = e.selectAll("td").data(function(a) {
                    return a;
                }, function(a) {
                    return a.label;
                });
                j.select("span." + c.legendItemNameClass).html(function(b) {
                    return a.visuals.TextUtil.removeBreakingSpaces(b.label);
                }), j.select("span." + c.legendItemMeasureClass).html(function(a) {
                    return "&nbsp;" + a.measure;
                }), j.exit().remove();
            }, c.prototype.ensureLegendTableCreated = function() {
                if (this.legendContainerDiv.select("div table").empty()) {
                    var a = this.legendContainerDiv.append("div").append("table");
                    a.style("table-layout", "fixed").append("tbody"), this.setPanGestureOnLegend(a);
                }
            }, c.prototype.setPanGestureOnLegend = function(a) {
                var c = $(this.legendContainerDiv.select("div:nth-child(2)")[0]).width(), d = d3.scale.linear().domain([ 0, c ]).range([ 0, c ]), e = d3.behavior.zoom().scaleExtent([ 1, 1 ]).x(d).on("zoom", function() {
                    if ($(a[0]).width() > c) {
                        var d = e.translate(), f = d[0], g = d[1];
                        f = Math.min(f, 0), f = Math.max(f, c - $(a[0]).width()), e.translate([ f, g ]), 
                        a.style("transform", function() {
                            return b.SVGUtil.translateXWithPixels(f);
                        });
                    }
                });
                a.call(e);
            }, c.splitArrayToOddEven = function(a) {
                for (var b = [], c = [], d = 0; d < a.length; ++d) d % 2 === 0 ? c.push(a[d]) : b.push(a[d]);
                return [ c, b ];
            }, c.LegendHeight = 65, c.LegendContainerClass = "interactive-legend", c.LegendTitleClass = "title", 
            c.LegendItem = "item", c.legendPlaceSelector = "■", c.legendIconClass = "icon", 
            c.legendColorCss = "color", c.legendItemNameClass = "itemName", c.legendItemMeasureClass = "itemMeasure", 
            c;
        }();
        !function(c) {
            function d(c, d) {
                null == d[b.legendProps.show] && (d[b.legendProps.show] = !0), d[b.legendProps.show] === !1 && (c.dataPoints = []), 
                d[b.legendProps.show] === !0 && null == d[b.legendProps.position] && (d[b.legendProps.position] = a.legendPosition.top), 
                d[b.legendProps.showTitle] === !1 ? c.title = "" : void 0 !== d[b.legendProps.titleText] && (c.title = d[b.legendProps.titleText]);
            }
            c.update = d;
        }(f = b.LegendData || (b.LegendData = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.mapCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Location"),
                preferredTypes: [ {
                    geography: {
                        address: !0
                    }
                }, {
                    geography: {
                        city: !0
                    }
                }, {
                    geography: {
                        continent: !0
                    }
                }, {
                    geography: {
                        country: !0
                    }
                }, {
                    geography: {
                        county: !0
                    }
                }, {
                    geography: {
                        place: !0
                    }
                }, {
                    geography: {
                        postalCode: !0
                    }
                }, {
                    geography: {
                        region: !0
                    }
                }, {
                    geography: {
                        stateOrProvince: !0
                    }
                } ]
            }, {
                name: "Series",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
            }, {
                name: "X",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Longitude"),
                preferredTypes: [ {
                    geography: {
                        longitude: !0
                    }
                } ]
            }, {
                name: "Y",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Latitude"),
                preferredTypes: [ {
                    geography: {
                        latitude: !0
                    }
                } ]
            }, {
                name: "Size",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            }, {
                name: "Gradient",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Gradient")
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        defaultColor: {
                            displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        showAllDataPoints: {
                            displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                            type: {
                                bool: !0
                            }
                        },
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                },
                categoryLabels: {
                    displayName: a.data.createDisplayNameGetter("Visual_CategoryLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            sorting: {
                custom: {}
            }
        }, b.mapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                },
                showAllDataPoints: {
                    objectName: "dataPoint",
                    propertyName: "showAllDataPoints"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = b.BI.Services.MapServices, d = jsCommon.ArrayExtensions, e = function() {
            function a() {
                this.values = [];
            }
            return a.prototype.init = function(a) {
                this.mapControl = a;
                var c = this.mapControl.getRootElement();
                c.setAttribute("drag-resize-disabled", "true");
                var d = this.svg = d3.select(c).append("svg").style("position", "absolute");
                this.clearCatcher = b.appendClearCatcher(d), this.bubbleGraphicsContext = d.append("g").classed("mapBubbles", !0), 
                this.sliceGraphicsContext = d.append("g").classed("mapSlices", !0), this.sliceLayout = d3.layout.pie().sort(null).value(function(a) {
                    return a.value;
                }), this.arc = d3.svg.arc(), this.clearMaxDataPointRadius(), this.dataLabelsSettings = b.dataLabelUtils.getDefaultPointLabelSettings();
            }, a.prototype.addDataPoint = function(a) {
                this.values.push(a);
            }, a.prototype.clearDataPoints = function() {
                this.values = [];
            }, a.prototype.getDataPointCount = function() {
                return this.values.length;
            }, a.prototype.getDataPointPadding = function() {
                return 2 * this.maxDataPointRadius;
            }, a.prototype.clearMaxDataPointRadius = function() {
                this.maxDataPointRadius = 0;
            }, a.prototype.setMaxDataPointRadius = function(a) {
                this.maxDataPointRadius = Math.max(a, this.maxDataPointRadius);
            }, a.prototype.beginDataPointUpdate = function(a, b) {
                this.values.length = 0;
            }, a.prototype.getDefaultMap = function(a, b) {
                this.values.length = 0;
            }, a.prototype.converter = function(a, c, d, e) {
                var f = this.mapControl, g = a.width / 2, h = a.height / 2;
                this.svg.style("width", a.width.toString() + "px").style("height", a.width.toString() + "px");
                var i = 1;
                this.dataLabelsSettings.show = e.show, this.dataLabelsSettings.labelColor = e.labelColor, 
                this.dataLabelsSettings.overrideDefaultColor = e.overrideDefaultColor;
                var j = Math.min(a.width, a.height) / 384;
                this.clearMaxDataPointRadius();
                for (var k = [], l = [], m = b.mapProps.general.formatString, n = 0, o = this.values.length; o > n; n++) {
                    var p = c ? c.categorical : null, q = this.values[n], r = q.categoryValue, s = q.cachedLocation;
                    if (s) {
                        var t = f.tryLocationToPixel(s), u = t.x + g, v = t.y + h, w = q.radius * j;
                        this.setMaxDataPointRadius(w);
                        var x = q.seriesInfo.sizeValuesForGroup.length;
                        if (1 === x) {
                            var y = q.seriesInfo.sizeValuesForGroup[0], z = y.value, A = y.index, B = b.TooltipBuilder.createTooltipInfo(m, p.categories, r, p.values, z, null, A), C = q.seriesInfo.sizeValuesForGroup[0];
                            k.push({
                                x: u,
                                y: v,
                                labeltext: r,
                                radius: w,
                                fill: C.fill,
                                stroke: C.stroke,
                                strokeWidth: i,
                                tooltipInfo: B,
                                identity: b.SelectionId.createWithId(q.categoryIdentity),
                                selected: !1,
                                labelFill: e.overrideDefaultColor ? e.labelColor : C.fill
                            });
                        } else {
                            for (var D = [], E = 0; x > E; ++E) {
                                var y = q.seriesInfo.sizeValuesForGroup[E], z = y.value, A = y.index, B = b.TooltipBuilder.createTooltipInfo(m, p.categories, r, p.values, z, null, A), F = q.seriesInfo.sizeValuesForGroup[E];
                                D.push({
                                    x: u,
                                    y: v,
                                    labeltext: r,
                                    radius: w,
                                    fill: F.fill,
                                    stroke: F.stroke,
                                    strokeWidth: i,
                                    value: z,
                                    tooltipInfo: B,
                                    identity: b.SelectionId.createWithIds(q.categoryIdentity, F.seriesId),
                                    selected: !1,
                                    labelFill: e.labelColor
                                });
                            }
                            d && d.applySelectionStateToData(D), l.push(D);
                        }
                    }
                }
                return d && d.applySelectionStateToData(k), {
                    bubbleData: k,
                    sliceData: l
                };
            }, a.prototype.updateInternal = function(a) {
                var c = this.arc, d = !1;
                if (b.dataHasSelection(a.bubbleData) && (d = !0), !d) for (var e = 0, f = a.sliceData.length; f > e; e++) b.dataHasSelection(a.sliceData[e]) && (d = !0);
                var g = this.bubbleGraphicsContext.selectAll(".bubble").data(a.bubbleData, function(a) {
                    return a.identity.getKey();
                });
                g.enter().append("circle").classed("bubble", !0), g.attr("cx", function(a) {
                    return a.x;
                }).attr("cy", function(a) {
                    return a.y;
                }).attr("r", function(a) {
                    return a.radius;
                }).style("fill", function(a) {
                    return a.fill;
                }).style("stroke", function(a) {
                    return a.stroke;
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.selected, !1, d, !1);
                }).style("strokeWidth", function(a) {
                    return a.strokeWidth;
                }).style("stroke-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.selected, !1, d, !1);
                }).style("cursor", "default"), g.exit().remove(), b.TooltipManager.addTooltip(g, function(a) {
                    return a.data.tooltipInfo;
                });
                var h = a.sliceData, i = this.sliceGraphicsContext.selectAll(".sliceContainer").data(h);
                i.enter().append("g").classed("sliceContainer", !0), i.exit().remove();
                var j = this.sliceLayout, k = i.selectAll(".slice").data(function(a) {
                    return j(a);
                }, function(a) {
                    return a.data.identity.getKey();
                });
                if (k.enter().append("path").classed("slice", !0), k.style("fill", function(a) {
                    return a.data.fill;
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.data.selected, !1, d, !1);
                }).style("stroke", function(a) {
                    return a.data.stroke;
                }).style("strokeWidth", function(a) {
                    return a.data.strokeWidth;
                }).style("stroke-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.data.selected, !1, d, !1);
                }).style("cursor", "default").attr("transform", function(a) {
                    return b.SVGUtil.translate(a.data.x, a.data.y);
                }).attr("d", function(a) {
                    return c.innerRadius(0).outerRadius(function(a) {
                        return a.data.radius;
                    })(a);
                }), k.exit().remove(), this.dataLabelsSettings.show) {
                    for (var l = b.dataLabelUtils.getMapLabelLayout(this.dataLabelsSettings), m = [], e = 0, f = h.length; f > e; e++) m.push(h[e][0]);
                    for (var n = 0, o = a.bubbleData.length; o > n; n++) m.push(a.bubbleData[n]);
                    var p = {
                        height: this.mapControl.getHeight(),
                        width: this.mapControl.getWidth()
                    };
                    b.dataLabelUtils.drawDefaultLabelsForDataPointChart(m, this.bubbleGraphicsContext, l, p);
                } else b.dataLabelUtils.cleanDataLabels(this.bubbleGraphicsContext);
                b.TooltipManager.addTooltip(k, function(a) {
                    return a.data.data.tooltipInfo;
                });
                for (var q = a.bubbleData.slice(), e = 0, f = h.length; f > e; e++) q.push.apply(q, h[e]);
                var r = {
                    bubbles: g,
                    slices: this.sliceGraphicsContext.selectAll("path"),
                    clearCatcher: this.clearCatcher,
                    dataPoints: q
                };
                return r;
            }, a;
        }();
        b.MapOneD3DataPointRenderer = e;
        var f = function() {
            function c() {
                this.values = [], this.dataPointCount = 0;
            }
            return c.getFilledMapParams = function(a, c) {
                switch (a) {
                  case b.BI.Services.GeocodingManager.CategoryTypes.Continent:
                  case b.BI.Services.GeocodingManager.CategoryTypes.CountryRegion:
                    return 10 > c ? {
                        level: 2,
                        maxPolygons: 50,
                        strokeWidth: 0
                    } : 30 > c ? {
                        level: 2,
                        maxPolygons: 20,
                        strokeWidth: 0
                    } : {
                        level: 1,
                        maxPolygons: 3,
                        strokeWidth: 0
                    };

                  default:
                    return 100 > c ? {
                        level: 1,
                        maxPolygons: 5,
                        strokeWidth: 6
                    } : 200 > c ? {
                        level: 0,
                        maxPolygons: 5,
                        strokeWidth: 6
                    } : {
                        level: 0,
                        maxPolygons: 5,
                        strokeWidth: 0
                    };
                }
            }, c.buildPaths = function(a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var d = a[c], e = d.geographic;
                    e.length > 2 && b.push(d);
                }
                return b;
            }, c.prototype.init = function(c) {
                this.mapControl = c, this.polygonInfo = new a.visuals.MapPolygonInfo();
                var d = this.mapControl.getRootElement();
                d.setAttribute("drag-resize-disabled", "true");
                var e = this.svg = d3.select(d).append("svg").style("position", "absolute");
                this.clearCatcher = b.appendClearCatcher(e), this.shapeGraphicsContext = e.append("g").classed("mapShapes", !0), 
                this.clearMaxShapeDimension();
            }, c.prototype.beginDataPointUpdate = function(a, b) {
                this.geocodingCategory = a, this.dataPointCount = b, this.values = [];
            }, c.prototype.addDataPoint = function(a) {
                this.values.push(a);
            }, c.prototype.clearDataPoints = function() {
                this.values = [];
            }, c.prototype.getDataPointCount = function() {
                return this.dataPointCount;
            }, c.prototype.converter = function(a, c, d) {
                this.viewport = a, this.clearMaxShapeDimension(), this.svg.style("width", a.width.toString() + "px").style("height", a.width.toString() + "px");
                for (var e = 1, f = [], g = b.mapProps.general.formatString, h = 0, i = this.values.length; i > h; h++) {
                    var j = c ? c.categorical : null, k = this.values[h], l = k.categoryValue, m = k.cachedLocation;
                    if (m) for (var n = k.seriesInfo.sizeValuesForGroup[0], o = n.value, p = n.index, q = b.TooltipBuilder.createTooltipInfo(g, j.categories, l, j.values, o, null, p), r = k.paths, s = b.SelectionId.createWithId(k.categoryIdentity), t = s.getKey(), u = 0, v = r.length; v > u; u++) {
                        var w = r[u];
                        this.setMaxShapeDimension(w.absoluteBounds.width, w.absoluteBounds.height), f.push({
                            path: w.absoluteString,
                            fill: k.seriesInfo.sizeValuesForGroup[0].fill,
                            stroke: k.seriesInfo.sizeValuesForGroup[0].stroke,
                            strokeWidth: e,
                            tooltipInfo: q,
                            identity: s,
                            selected: !1,
                            key: JSON.stringify({
                                id: t,
                                pIdx: u
                            })
                        });
                    }
                }
                return d && d.applySelectionStateToData(f), {
                    shapeData: f
                };
            }, c.prototype.updateInternal = function(a) {
                if (this.viewport) {
                    var c = this.viewport;
                    this.polygonInfo.reCalc(this.mapControl, c.width, c.height), this.shapeGraphicsContext.attr("transform", this.polygonInfo.transformToString(this.polygonInfo.transform));
                    var d = b.dataHasSelection(a.shapeData), e = this.shapeGraphicsContext.selectAll("polygon").data(a.shapeData, function(a) {
                        return a.key;
                    });
                    e.enter().append("polygon").classed("shape", !0).attr("points", function(a) {
                        return a.path;
                    }), e.style("fill", function(a) {
                        return a.fill;
                    }).style("stroke", function(a) {
                        return a.stroke;
                    }).style("fill-opacity", function(a) {
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, d, !1);
                    }).style("strokeWidth", function(a) {
                        return a.strokeWidth;
                    }).style("stroke-opacity", function(a) {
                        return b.ColumnUtil.getFillOpacity(a.selected, !1, d, !1);
                    }).style("cursor", "default"), e.exit().remove(), b.TooltipManager.addTooltip(e, function(a) {
                        return a.data.tooltipInfo;
                    });
                    var f = {
                        shapes: e,
                        clearCatcher: this.clearCatcher,
                        dataPoints: a.shapeData
                    };
                    return f;
                }
            }, c.prototype.clearMaxShapeDimension = function() {
                this.maxShapeDimension = 0;
            }, c.prototype.setMaxShapeDimension = function(a, b) {
                this.maxShapeDimension = Math.max(a, this.maxShapeDimension), this.maxShapeDimension = Math.max(b, this.maxShapeDimension);
            }, c.prototype.getDataPointPadding = function() {
                return 12;
            }, c;
        }();
        b.MapShapeDataPointRenderer = f;
        var g = function() {
            function g(a) {
                a.filledMap ? (this.dataPointRenderer = new f(), this.enableGeoShaping = !0) : (this.dataPointRenderer = new e(), 
                this.enableGeoShaping = !1);
            }
            return g.prototype.init = function(c) {
                var d = this, e = this.element = c.element;
                this.pendingGeocodingRender = !1, this.currentViewport = c.viewport, this.style = c.style, 
                this.colors = this.style.colorPalette.dataColors, this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(c), 
                this.dataLabelsSettings = b.dataLabelUtils.getDefaultPointLabelSettings(), this.legend = a.visuals.createLegend(e, c.interactivity && c.interactivity.isInteractiveLegend, this.interactivityService), 
                this.legendHeight = 0, this.legendData = {
                    dataPoints: []
                }, this.geoTaggingAnalyzerService = a.createGeoTaggingAnalyzerService(c.host.getLocalizedString), 
                this.host = c.host, this.resetBounds(), jsCommon.ensureMap(function() {
                    Microsoft.Maps.loadModule("Microsoft.Maps.Overlays.Style", {
                        callback: function() {
                            d.initialize(e[0]);
                        }
                    });
                });
            }, g.prototype.addDataPoint = function(a) {
                var b = a.cachedLocation;
                this.updateBounds(b.latitude, b.longitude), this.dataPointRenderer.addDataPoint(a), 
                this.scheduleRedraw();
            }, g.prototype.scheduleRedraw = function() {
                var a = this;
                !this.pendingGeocodingRender && this.mapControl && (this.pendingGeocodingRender = !0, 
                setTimeout(function() {
                    a.updateInternal(), a.pendingGeocodingRender = !1;
                }, 1e3));
            }, g.prototype.enqueueGeoCode = function(a) {
                var c = this;
                b.BI.Services.GeocodingManager.geocode(a.geocodingQuery, this.geocodingCategory).then(function(b) {
                    b && (a.cachedLocation = b, c.addDataPoint(a));
                });
            }, g.prototype.enqueueGeoCodeAndGeoShape = function(a, c) {
                var d = this;
                b.BI.Services.GeocodingManager.geocode(a.geocodingQuery, this.geocodingCategory).then(function(b) {
                    b && (a.cachedLocation = b, d.enqueueGeoShape(a, c));
                });
            }, g.prototype.enqueueGeoShape = function(a, c) {
                var d = this;
                b.BI.Services.GeocodingManager.geocodeBoundary(a.cachedLocation.latitude, a.cachedLocation.longitude, this.geocodingCategory, c.level, c.maxPolygons).then(function(c) {
                    var e;
                    0 === c.locations.length || c.locations[0].geographic ? e = f.buildPaths(c.locations) : (b.BI.Services.MapServices.calcGeoData(c), 
                    e = f.buildPaths(c.locations)), a.paths = e, d.addDataPoint(a);
                });
            }, g.prototype.getOptimumLevelOfDetail = function(a, b) {
                var d = this.dataPointRenderer.getDataPointCount();
                if (0 === d) return c.MinLevelOfDetail;
                for (var e = this.dataPointRenderer.getDataPointPadding(), f = c.MaxLevelOfDetail; f >= c.MinLevelOfDetail; f--) {
                    var g = c.latLongToPixelXY(this.minLatitude, this.minLongitude, f), h = c.latLongToPixelXY(this.maxLatitude, this.maxLongitude, f);
                    if (h.x - g.x + e <= a && g.y - h.y + e <= b) return 2 > d && (f = Math.min(c.MaxAutoZoomLevel, f)), 
                    f;
                }
                return c.MinLevelOfDetail;
            }, g.prototype.getViewCenter = function(a) {
                var b = c.latLongToPixelXY(this.minLatitude, this.minLongitude, a), d = c.latLongToPixelXY(this.maxLatitude, this.maxLongitude, a);
                return c.pixelXYToLocation((b.x + d.x) / 2, (d.y + b.y) / 2, a);
            }, g.prototype.resetBounds = function() {
                this.minLongitude = c.MaxAllowedLongitude, this.maxLongitude = c.MinAllowedLongitude, 
                this.minLatitude = c.MaxAllowedLatitude, this.maxLatitude = c.MinAllowedLatitude;
            }, g.prototype.updateBounds = function(a, b) {
                b < this.minLongitude && (this.minLongitude = b), b > this.maxLongitude && (this.maxLongitude = b), 
                a < this.minLatitude && (this.minLatitude = a), a > this.maxLatitude && (this.maxLatitude = a);
            }, g.legendObject = function(a) {
                return a && a.metadata && a.metadata.objects && a.metadata.objects.legend;
            }, g.isLegendHidden = function(a) {
                var c = g.legendObject(a);
                return null != c && c[b.legendProps.show] === !1;
            }, g.legendPosition = function(a) {
                var c = g.legendObject(a);
                return c && b.LegendPosition[c[b.legendProps.position]];
            }, g.isShowLegendTitle = function(a) {
                var c = g.legendObject(a);
                return c && c[b.legendProps.showTitle];
            }, g.prototype.legendTitle = function() {
                var a = g.legendObject(this.dataView);
                return a && a[b.legendProps.titleText] || this.legendData.title;
            }, g.prototype.renderLegend = function(a) {
                var b = g.isLegendHidden(this.dataView), c = g.isShowLegendTitle(this.dataView), d = this.legendTitle(), e = {
                    dataPoints: b ? [] : a.dataPoints,
                    grouped: a.grouped,
                    title: c ? d : ""
                }, f = g.legendPosition(this.dataView);
                void 0 !== f && this.legend.getOrientation() !== f ? this.legend.changeOrientation(f) : this.legend.changeOrientation(0), 
                this.legend.drawLegend(e, this.currentViewport);
            }, g.calculateGroupSizes = function(a, b, c, d, e) {
                for (var f = a.values[0].values.length, g = b.length, h = 0, i = f; i > h; ++h) {
                    var j = null;
                    if (d >= 0) for (var k = 0; g > k; ++k) {
                        var l = b[k].values[d].values[h];
                        l && (null === j ? j = l : j += l);
                    }
                    c.push(j), j && (e ? (e.min = Math.min(e.min, j), e.max = Math.max(e.max, j)) : e = {
                        min: j,
                        max: j
                    });
                }
                return e;
            }, g.createMapDataPoint = function(a, b, c, d, e, f) {
                if (c && c.sizeValuesForGroup && c.sizeValuesForGroup.length > 0) {
                    var g = c.latitude, h = c.longitude, i = {
                        geocodingQuery: a,
                        location: null !== g && null !== h ? new Microsoft.Maps.Location(g, h) : null,
                        value: b,
                        radius: d,
                        seriesInfo: c,
                        categoryIdentity: f,
                        categoryValue: a
                    };
                    return null === i.geocodingQuery && null === i.location ? null : (i.cachedLocation = i.location, 
                    i);
                }
                return null;
            }, g.calculateSeriesLegend = function(a, c, d, e, f, g) {
                for (var h = a.length, i = [], j = new b.ColorHelper(e, b.mapProps.dataPoint.fill, f), k = 0; h > k; ++k) {
                    var l, m, n = a[k];
                    if (d >= 0) {
                        var o = n.values[d];
                        l = o.values[c], m = o.source.queryName;
                    } else l = null, m = "";
                    if (null !== l || 0 > d) {
                        var p = n.identity ? b.SelectionId.createWithId(n.identity) : b.SelectionId.createNull(), q = void 0 !== g ? j.getColorForSeriesValue(n.objects, g, n.name) : j.getColorForMeasure(n.objects, m);
                        i.push({
                            color: q,
                            label: b.valueFormatter.format(n.name),
                            icon: 1,
                            identity: p,
                            selected: !1
                        });
                    }
                }
                return i;
            }, g.calculateSeriesInfo = function(a, c, d, e, f, h, i, j, k) {
                for (var l = null, m = null, n = [], o = a.length, p = new b.ColorHelper(h, b.mapProps.dataPoint.fill, i), q = 0; o > q; ++q) {
                    var r, s, t = a[q];
                    if (d >= 0) {
                        var u = t.values[d];
                        r = u.values[c], s = u.source.queryName;
                    } else r = null, s = "";
                    var v = j && j[c] || t && t.objects;
                    if (null !== r || 0 > d) {
                        var w = a[q].identity, x = void 0 !== k ? p.getColorForSeriesValue(v, k, t.name) : p.getColorForMeasure(v, s), y = jsCommon.color.parseRgb(x), z = jsCommon.color.rgbToHexString(jsCommon.color.darken(y, g.StrokeDarkenColorValue)), A = jsCommon.color.rgbWithAlphaString(y, .6);
                        n.push({
                            value: r,
                            index: q,
                            fill: A,
                            stroke: z,
                            seriesId: w
                        });
                    }
                    l = g.getOptionalMeasure(t, f, c, l), m = g.getOptionalMeasure(t, e, c, m);
                }
                return {
                    sizeValuesForGroup: n,
                    latitude: l,
                    longitude: m
                };
            }, g.getOptionalMeasure = function(a, b, c, d) {
                if (b >= 0) {
                    var e = a.values[b].values[c];
                    if (null != e) return e;
                }
                return d;
            }, g.calculateRadius = function(a, b, c) {
                var d = 6;
                return 0 !== b && (d = 14 * ((c - a.min) / b) + 6), d;
            }, g.getGeocodingCategory = function(a, b) {
                if (a && a.categories && a.categories.length > 0 && a.categories[0].source) {
                    var c = a.categories[0].source.type;
                    if (c && c.categoryString) return b.getFieldType(c.categoryString);
                    var d = a.categories[0].source.displayName, e = b.getFieldType(d);
                    if (e) return e;
                    var f = a.categories[0].source.roles;
                    if (f) for (var g = Object.keys(f), h = 0, i = g.length; i > h; ++h) {
                        var j = b.getFieldType(g[h]);
                        if (j) return j;
                    }
                }
                return void 0;
            }, g.hasSizeField = function(a, b) {
                if (d.isUndefinedOrEmpty(a)) return !1;
                for (var c = 0, e = a.length; e > c; c++) {
                    var f = a[c].source.roles;
                    if (!f && c === b && a[c].source.type.numeric) return !0;
                    if (f) for (var g = Object.keys(f), h = 0, i = g.length; i > h; h++) {
                        var j = g[h];
                        if ("Size" === j) return !0;
                    }
                }
                return !1;
            }, g.createDefaultValueColumns = function(c) {
                var d = [];
                if (c.categories && c.categories.length > 0) for (var e = 0, f = c.categories[0].values.length; f > e; e++) d.push(1);
                var g = {
                    displayName: "col",
                    isMeasure: !0,
                    queryName: "",
                    roles: {
                        Size: !0
                    },
                    type: a.ValueType.fromDescriptor({
                        numeric: !0
                    }),
                    isAutoGeneratedColumn: !0
                }, h = [ {
                    source: g,
                    values: d
                } ], i = b.GradientUtils.getGradientMeasureIndex(c), j = i >= 0;
                if (j) {
                    var k = c.values[i];
                    h.push(k);
                }
                return a.data.DataViewTransform.createValueColumns(h);
            }, g.shouldEnumerateDataPoints = function(a, c) {
                var d = b.DataRoleHelper.hasRoleInDataView(a, "Series"), e = c ? "Size" : "Gradient", f = b.DataRoleHelper.hasRoleInDataView(a, e);
                return d || !f;
            }, g.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "dataPoint":
                    if (g.shouldEnumerateDataPoints(this.dataView, this.enableGeoShaping)) return this.enumerateDataPoints();
                    break;

                  case "categoryLabels":
                    return b.dataLabelUtils.enumerateCategoryLabels(this.dataLabelsSettings, !0);

                  case "legend":
                    return g.enumerateLegend(this.dataView, this.legend, this.legendTitle());
                }
            }, g.prototype.enumerateDataPoints = function() {
                var a = this.legendData, b = [], c = this.hasDynamicSeries, d = this.showAllDataPoints, e = a.dataPoints.length;
                b.push({
                    objectName: "dataPoint",
                    selector: null,
                    properties: {
                        defaultColor: {
                            solid: {
                                color: this.defaultDataPointColor || this.colors.getColor(0).value
                            }
                        }
                    }
                });
                var d = void 0 !== d ? d : e > 1;
                if (b.push({
                    objectName: "dataPoint",
                    selector: null,
                    properties: {
                        showAllDataPoints: d
                    }
                }), !d) return b;
                if (c) for (var f = 0; f < a.dataPoints.length; f++) {
                    var g = a.dataPoints[f];
                    b.push({
                        objectName: "dataPoint",
                        displayName: g.label,
                        selector: g.identity.getSelector(),
                        properties: {
                            fill: {
                                solid: {
                                    color: g.color
                                }
                            }
                        }
                    });
                } else for (var h = this.dataPointRenderer.converter(this.getMapViewPort(), this.dataView, this.interactivityService, this.dataLabelsSettings), i = h.bubbleData, f = 0; f < i.length; f++) {
                    var j = i[f];
                    b.push({
                        objectName: "dataPoint",
                        displayName: j.labeltext,
                        selector: j.identity.getSelector(),
                        properties: {
                            fill: {
                                solid: {
                                    color: jsCommon.color.rgbaStringToHexString(j.fill)
                                }
                            }
                        }
                    });
                }
                return b;
            }, g.enumerateLegend = function(a, c, d) {
                return [ {
                    selector: null,
                    properties: {
                        show: !g.isLegendHidden(a),
                        position: b.LegendPosition[c.getOrientation()],
                        showTitle: g.isShowLegendTitle(a),
                        titleText: d
                    },
                    objectName: "legend"
                } ];
            }, g.prototype.onDataChanged = function(c) {
                var d = this, e = c.dataViews[0];
                this.dataView = e;
                var h = this.enableGeoShaping;
                if (this.dataLabelsSettings = b.dataLabelUtils.getDefaultPointLabelSettings(), this.defaultDataPointColor = null, 
                this.showAllDataPoints = null, e) {
                    if (e.metadata && e.metadata.objects) {
                        var i = e.metadata.objects;
                        this.defaultDataPointColor = a.DataViewObjects.getFillColor(i, b.mapProps.dataPoint.defaultColor), 
                        this.showAllDataPoints = a.DataViewObjects.getValue(i, b.mapProps.dataPoint.showAllDataPoints);
                        var j = i.categoryLabels;
                        j && (this.dataLabelsSettings.show = void 0 !== j.show ? j.show : this.dataLabelsSettings.show, 
                        void 0 !== j.color && (this.dataLabelsSettings.labelColor = j.color.solid.color, 
                        this.dataLabelsSettings.overrideDefaultColor = !0));
                    }
                    var k = g.showLocationMissingWarningIfNecessary(e);
                    k && k.length > 0 && this.host.setWarnings(k);
                    var l = e.categorical;
                    if (l && l.categories && l.categories.length > 0) {
                        this.resetBounds();
                        var m;
                        if (g.hasSizeField(l.values, 0)) m = l.values.grouped(); else {
                            var n = g.createDefaultValueColumns(l);
                            l.values = n, m = [ {
                                values: n
                            } ];
                        }
                        var o = !!l.values.source;
                        this.hasDynamicSeries = o;
                        var p;
                        o ? p = l.values.identityFields : l.values.length > 0 && (p = l.categories[0].identityFields);
                        var q = b.DataRoleHelper.getMeasureIndexOfRole(m, "Size", 0), r = b.DataRoleHelper.getMeasureIndexOfRole(m, "X"), s = b.DataRoleHelper.getMeasureIndexOfRole(m, "Y"), t = [];
                        this.valueScale = null, this.valueScale = g.calculateGroupSizes(l, m, t, q, this.valueScale), 
                        this.geocodingCategory = g.getGeocodingCategory(l, this.geoTaggingAnalyzerService);
                        var u = this.valueScale ? this.valueScale.max - this.valueScale.min : 0;
                        jsCommon.ensureMap(function() {
                            var a = l.categories[0].values, b = e.categorical.categories[0].identity;
                            d.dataPointRenderer.beginDataPointUpdate(d.geocodingCategory, a.length);
                            for (var c = e.categorical.categories[0].objects, i = 0, j = a.length; j > i; i++) {
                                var k, n = a[i], o = t[i], v = g.calculateSeriesInfo(m, i, q, r, s, d.colors, d.defaultDataPointColor, c, p), w = g.calculateRadius(d.valueScale, u, o);
                                h && (k = f.getFilledMapParams(d.geocodingCategory, a.length));
                                var x = g.createMapDataPoint(n, o, v, w, d.colors, b ? b[i] : void 0);
                                x && (x.location ? h && !x.paths ? d.enqueueGeoShape(x, k) : d.addDataPoint(x) : h ? d.enqueueGeoCodeAndGeoShape(x, k) : d.enqueueGeoCode(x));
                            }
                            var y = g.calculateSeriesLegend(m, i, q, d.colors, d.defaultDataPointColor, p);
                            1 === y.length && (y = []);
                            var z = l.values, A = z && z.source ? z.source.displayName : "";
                            d.legendData = {
                                title: A,
                                dataPoints: y
                            }, d.renderLegend(d.legendData);
                        });
                    } else this.clearDataPoints();
                } else this.clearDataPoints();
                this.scheduleRedraw();
            }, g.showLocationMissingWarningIfNecessary = function(a) {
                var c = a.metadata;
                if (c && c.columns) {
                    for (var d = c.columns, e = !1, f = 0; f < d.length; f++) b.DataRoleHelper.hasRole(d[f], "Category") && (e = !0);
                    if (!e) return [ new b.NoMapLocationWarning() ];
                }
                return null;
            }, g.prototype.onResizing = function(a, b) {
                (this.currentViewport.width !== a.width || this.currentViewport.height !== a.height) && (this.currentViewport = a, 
                this.renderLegend(this.legendData), this.updateInternal());
            }, g.prototype.initialize = function(a) {
                var c = this, d = {
                    credentials: b.BI.Services.GeocodingManager.Settings.BingKey,
                    showMapTypeSelector: !1,
                    enableClickableLogo: !1,
                    enableSearchLogo: !1,
                    mapTypeId: Microsoft.Maps.MapTypeId.road,
                    customizeOverlays: !0,
                    showDashboard: !1,
                    showScalebar: !1,
                    disableKeyboardInput: !0
                }, e = InJs.DomFactory.div().addClass(g.MapContainer.cssClass).appendTo(a);
                this.mapControl = new Microsoft.Maps.Map(e[0], d), Microsoft.Maps.Events.addHandler(this.mapControl, "viewchange", function() {
                    c.onViewChanged();
                }), this.dataPointRenderer.init(this.mapControl), this.pendingGeocodingRender || this.updateInternal();
            }, g.prototype.onViewChanged = function() {
                this.updateOffsets();
            }, g.prototype.getMapViewPort = function() {
                var a = this.currentViewport, b = this.legend.getMargins(), c = {
                    width: a.width - b.width,
                    height: a.height - b.height
                };
                return c;
            }, g.prototype.updateInternal = function() {
                if (this.mapControl) {
                    var a = this.legend.getMargins().height;
                    1 >= a && (this.legendData = {
                        dataPoints: []
                    });
                    var b = this.element.children(g.MapContainer.selector), c = this.getMapViewPort();
                    b.height(c.height), b.width(c.width), this.updateOffsets();
                    var d = this.getOptimumLevelOfDetail(c.width, c.height), e = this.getViewCenter(d);
                    this.mapControl.setView({
                        center: e,
                        zoom: d,
                        animate: !0
                    });
                }
            }, g.prototype.updateOffsets = function() {
                var a, b = this.dataView;
                if (b && b.categorical) {
                    var c = this.getMapViewPort();
                    a = this.dataPointRenderer.converter(c, this.dataView, this.interactivityService, this.dataLabelsSettings);
                } else a = {
                    bubbleData: [],
                    shapeData: [],
                    sliceData: []
                };
                var d = this.dataPointRenderer.updateInternal(a);
                this.interactivityService && d && this.interactivityService.apply(this, d);
            }, g.prototype.accept = function(a, b) {
                a.visitMap(b);
            }, g.prototype.onClearSelection = function() {
                this.interactivityService.clearSelection(), this.updateOffsets();
            }, g.prototype.clearDataPoints = function() {
                this.dataPointRenderer.clearDataPoints();
            }, g.MapContainer = {
                cssClass: "visual mapControl",
                selector: ".visual.mapControl"
            }, g.StrokeDarkenColorValue = 63.75, g;
        }();
        b.Map = g;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c() {
                this.isCardWrapped = !1, this.isInteractivityOverflowHidden = !1;
            }
            return c.prototype.init = function(a) {
                this.options = a, this.style = a.style;
                var b = this.currentViewport = a.viewport, d = this.interactivity = a.interactivity;
                d && "hidden" === d.overflow && (this.isInteractivityOverflowHidden = !0), this.settings = c.DefaultStyle;
                var e = $("<div/>").addClass(c.multiRowCardClass);
                a.element.append(e);
                var f = this.element = e;
                f.css("height", this.getPixelString(b.height)), this.initializeCardRowSelection();
            }, c.prototype.onDataChanged = function(a) {
                var b = a.dataViews;
                b && b.length > 0 && (this.dataView = b[0]);
                var c = 1 !== a.operationKind;
                this.updateInternal(c), this.waitingForData = !1;
            }, c.prototype.onResizing = function(a, b) {
                var a = this.currentViewport = a;
                this.element.css("height", this.getPixelString(a.height)), this.updateInternal();
            }, c.converter = function(a, d, e, f) {
                void 0 === f && (f = !1);
                for (var g = [], h = a.table.rows, i = a.table.columns, j = 0, k = e; k > j; j++) {
                    for (var l = h[j], m = void 0, n = void 0, o = [], p = 0; d > p; p++) {
                        var q = i[p], r = b.valueFormatter.format(l[p], b.valueFormatter.getFormatString(q, c.formatStringProp)), s = i[p].displayName;
                        f || q.type.numeric || (void 0 === m ? (m = !0, n = r) : m && (m = !1)), o.push({
                            caption: r,
                            details: s
                        });
                    }
                    g.push({
                        title: m ? n : void 0,
                        cardItemsData: m ? o.filter(function(a) {
                            return a.caption !== n;
                        }) : o
                    });
                }
                return g;
            }, c.prototype.updateInternal = function(a) {
                void 0 === a && (a = !1);
                var b = this.dataView;
                if (!(b && b.metadata && b.table && b.table.rows && b.table.rows.length > 0 && b.table.columns && b.table.columns.length > 0)) return void this.listView.empty();
                this.setCardDimensions();
                var c = this.cardHeightTotal, d = this.dataModel;
                this.listView.viewport(this.currentViewport).rowHeight(c).data(d, function(a) {
                    return d.indexOf(a);
                }).render(!0, a);
            }, c.prototype.initializeCardRowSelection = function() {
                var a = this, d = this.settings, e = this.cardHeightTotal, f = this.cardHeight, g = this.isInteractivityOverflowHidden, h = function(b) {
                    var e = b.append("div").style({
                        color: d.card.color,
                        "overflow-y": "hidden",
                        "box-sizing": "border-box"
                    }).classed(c.Card["class"], !0);
                    g ? e.style("padding-top", a.isCardWrapped ? "0px" : a.getPixelString(d.card.topPadding)) : (e.style({
                        "border-left": a.getPixelString(d.card.leftBorderWidth) + " " + d.card.borderStyle,
                        "border-left-color": d.card.leftBorderColor,
                        "padding-left": a.getPixelString(d.card.leftPadding)
                    }), a.cardHasTitle && e.append("div").classed(c.Title["class"], !0).style({
                        height: a.getPixelString(d.title.height),
                        "margin-bottom": a.isCardWrapped ? "0px" : a.getPixelString(d.title.marginBottom)
                    }));
                    var f = e.selectAll(c.CardItemContainer.selector).data(function(a) {
                        return a.cardItemsData;
                    }).enter().append("div").classed(c.CardItemContainer["class"], !0).style({
                        "box-sizing": "border-box",
                        height: a.getPixelString(a.cardItemContainerHeight),
                        "margin-right": a.isSingleValueCard ? "0px" : a.getPixelString(d.cardItemContainer.marginRight),
                        "float": "left",
                        "padding-top": a.isCardWrapped ? g ? a.getPixelString(d.cardItemContainer.topPadding) : a.getPixelString(d.cardItemContainer.topPaddingCanvas) : "0px"
                    });
                    f.append("div").classed(c.Caption["class"], !0).style({
                        height: a.getPixelString(d.caption.height),
                        "font-size": a.getPixelString(d.caption.fontSize),
                        color: d.caption.color,
                        "text-align": "left",
                        "white-space": "nowrap",
                        "text-overflow": "ellipsis",
                        overflow: "hidden"
                    }), f.append("div").classed(c.Details["class"], !0).style({
                        height: a.getPixelString(d.details.height),
                        "font-size": a.getPixelString(d.details.fontSize),
                        color: d.details.color,
                        "text-align": "left",
                        "white-space": "nowrap",
                        "text-overflow": "ellipsis",
                        overflow: "hidden"
                    });
                }, i = function(b) {
                    f = a.cardHeight, !g && a.cardHasTitle && b.selectAll(c.Title.selector).text(function(a) {
                        return a.title;
                    });
                    var e = b.selectAll(c.Card.selector).style({
                        height: a.getPixelString(f),
                        width: a.getPixelString(a.cardWidth)
                    }), h = a.isSingleValueCard ? a.columnWidth : a.columnWidth - d.cardItemContainer.marginRight;
                    if (e.selectAll(c.CardItemContainer.selector).style("width", a.getPixelString(h)), 
                    e.selectAll(c.Caption.selector).text(function(a) {
                        return a.caption;
                    }), e.selectAll(c.Details.selector).text(function(a) {
                        return a.details;
                    }), g) {
                        var i = a.dataModel;
                        i && i.length > 0 && (e = e.filter(function(a) {
                            return a !== i[i.length - 1];
                        })), e.style({
                            "border-bottom-style": d.card.borderStyle,
                            "border-bottom-width": a.getPixelString(d.card.bottomBorderWidth),
                            "border-bottom-color": d.card.borderColor,
                            "padding-bottom": a.getPixelString(d.card.bottomPadding)
                        });
                    }
                    e.style("margin-bottom", g ? "0px" : a.isSingleRowCard ? "0px" : a.getPixelString(d.card.marginBottom));
                }, j = function(a) {
                    a.remove();
                }, k = {
                    rowHeight: e,
                    enter: h,
                    exit: j,
                    update: i,
                    loadMoreData: function() {
                        return a.onLoadMoreData();
                    },
                    viewport: this.currentViewport,
                    baseContainer: d3.select(this.element.get(0))
                };
                this.listView = b.ListViewFactory.createHTMLListView(k);
            }, c.prototype.setCardDimensions = function() {
                var a = this.dataView, b = a.table.columns, d = a.table.rows, e = this.currentViewport, f = this.settings, g = 0, h = g = b.length, i = e.width;
                if (this.cardHasTitle = !1, this.isInteractivityOverflowHidden) i <= c.SmallTileWidth ? (g = Math.min(f.cardRowColumns.maxRowColumnsSmallTile, g), 
                h = Math.min(f.cardItems.maxItemsSmallTile, h)) : i <= c.MediumTileWidth ? (g = Math.min(f.cardRowColumns.maxRowColumnsMediumTile, g), 
                h = Math.min(f.cardItems.maxItemsMediumTile, h)) : i <= c.LargeTileWidth && (g = Math.min(f.cardRowColumns.maxRowColumnsLargeTile, g), 
                h = Math.min(f.cardItems.maxItemsLargeTile, h)), this.calculateCardDimensions(e, g, h, d.length), 
                this.dataModel = c.converter(a, h, this.maxCardsDisplayed, this.isInteractivityOverflowHidden); else {
                    var j = this.dataModel = c.converter(a, h, d.length);
                    if (h = 0, j && j.length > 0 && (h = j[0].cardItemsData ? j[0].cardItemsData.length : 0, 
                    this.cardHasTitle = void 0 !== j[0].title, this.isSingleRowCard = 1 === j.length ? !0 : !1), 
                    this.calculateCardDimensions(e, h, h, j.length), this.cardHasTitle) {
                        var k = this.cardHeight += f.title.height + (this.isCardWrapped ? 0 : f.title.marginBottom);
                        this.cardHeightTotal = this.getTotalCardHeight(k);
                    }
                }
            }, c.prototype.calculateCardDimensions = function(a, b, c, d) {
                var e = this.settings, f = this.isInteractivityOverflowHidden, g = a.width - e.scrollbar.padding, h = b, i = e.caption.height + e.details.height, j = !1;
                f || (g -= e.card.leftBorderWidth + e.card.leftPadding);
                var k = g / b;
                b === c && (k = Math.max(k, e.cardItemContainer.maxWidth), k = Math.min(k, g), h = Math.floor(g / k)), 
                this.isSingleValueCard = 1 === h;
                var l = Math.ceil(c / h);
                l > 1 && (i += f ? e.cardItemContainer.topPadding : e.cardItemContainer.topPaddingCanvas, 
                k = g / h, j = !0);
                var m = Math.ceil(l * i);
                f && (m += e.card.bottomBorderWidth + e.card.bottomPadding + e.card.topPadding);
                var n = m;
                f ? d = Math.min(Math.floor(a.height / m), d) : (n = this.getTotalCardHeight(m), 
                g += e.card.leftBorderWidth + e.card.leftPadding), this.cardHeight = m, this.columnWidth = k, 
                this.cardWidth = g, this.cardHeightTotal = n, this.maxCardsDisplayed = d, this.cardItemContainerHeight = i, 
                this.isCardWrapped = j;
            }, c.prototype.getPixelString = function(a) {
                return a + "px";
            }, c.prototype.onLoadMoreData = function() {
                !this.waitingForData && this.dataView.metadata && this.dataView.metadata.segment && (this.options.host.loadMoreData(), 
                this.waitingForData = !0);
            }, c.prototype.getTotalCardHeight = function(a) {
                return a + (this.isSingleRowCard ? 0 : this.settings.card.marginBottom);
            }, c.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, c.multiRowCardClass = "multiRowCard", c.Card = {
                "class": "card",
                selector: ".card"
            }, c.Title = {
                "class": "title",
                selector: ".title"
            }, c.CardItemContainer = {
                "class": "cardItemContainer",
                selector: ".cardItemContainer"
            }, c.Caption = {
                "class": "caption",
                selector: ".caption"
            }, c.Details = {
                "class": "details",
                selector: ".details"
            }, c.SmallTileWidth = 250, c.MediumTileWidth = 490, c.LargeTileWidth = 750, c.DefaultStyle = {
                card: {
                    bottomBorderWidth: 1,
                    leftBorderWidth: 3,
                    borderStyle: "solid",
                    leftBorderColor: "#A6A6A6",
                    borderColor: "#C8C8C8",
                    bottomPadding: 5,
                    leftPadding: 10,
                    topPadding: 5,
                    color: "#767676",
                    marginBottom: 20
                },
                title: {
                    height: 37,
                    marginBottom: 5
                },
                cardItemContainer: {
                    marginRight: 20,
                    maxWidth: 100,
                    topPadding: 5,
                    topPaddingCanvas: 7
                },
                caption: {
                    height: 20,
                    fontSize: 14,
                    color: "#333333"
                },
                details: {
                    height: 16,
                    fontSize: 12,
                    color: "#A6A6A6"
                },
                scrollbar: {
                    padding: 8
                },
                cardItems: {
                    maxItemsSmallTile: 4,
                    maxItemsMediumTile: 6,
                    maxItemsLargeTile: 6
                },
                cardRowColumns: {
                    maxRowColumnsSmallTile: 2,
                    maxRowColumnsMediumTile: 3,
                    maxRowColumnsLargeTile: 6
                },
                cards: {
                    maxCardsSmallTile: 1,
                    maxCardsMediumTile: 3,
                    maxCardsLargeTile: 8
                }
            }, c.capabilities = {
                dataRoles: [ {
                    name: "Values",
                    kind: 2,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Fields")
                } ],
                objects: {
                    general: {
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    table: {
                        rows: {
                            "for": {
                                "in": "Values"
                            },
                            dataReductionAlgorithm: {
                                window: {}
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 1
                            }
                        }
                    }
                } ],
                suppressDefaultTitle: !0
            }, c;
        }();
        b.MultiRowCard = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function a() {}
            return a.prototype.init = function(a) {
                this.element = a.element, this.host = a.host, this.viewPort = a.viewport, this.element.addClass("richtextbox"), 
                this.element.css({
                    "font-family": d.defaultFont,
                    "font-size": d.defaultFontSize
                }), this.readOnly = 0 === this.host.getViewMode(), this.paragraphs = [], this.refreshView();
            }, a.prototype.onResizing = function(a, b) {
                this.viewPort = a, this.updateSize();
            }, a.prototype.onDataChanged = function(a) {
                var b = a.dataViews;
                if (this.paragraphs = [], b && b.length > 0) {
                    var c = b[0].metadata.objects;
                    c && c.general && (this.paragraphs = c.general.paragraphs);
                }
                this.refreshView();
            }, a.prototype.destroy = function() {}, a.prototype.onViewModeChanged = function(a) {
                this.readOnly = 0 === a, this.refreshView();
            }, a.prototype.setSelection = function(a, b) {
                this.editor && this.editor.setSelection(a, b);
            }, a.prototype.refreshView = function() {
                var b = this;
                this.readOnly ? (this.editor && (this.editor.formatUrls(), this.saveContents(), 
                this.editor = null), this.element.empty(), this.element.append(a.convertParagraphsToHtml(this.paragraphs))) : (this.editor || (this.editor = new d.QuillWrapper(this.readOnly, this.host), 
                this.editor.textChanged = function(a, c) {
                    return b.saveContents();
                }, this.element.empty(), this.element.append(this.editor.getElement())), this.editor.setContents(a.convertParagraphsToOps(this.paragraphs))), 
                this.updateSize();
            }, a.prototype.saveContents = function() {
                if (this.editor) {
                    var b = this.editor.getContents();
                    this.paragraphs = a.convertDeltaToParagraphs(b);
                    var c = [ {
                        objectName: "general",
                        properties: {
                            paragraphs: this.paragraphs
                        },
                        selector: null
                    } ];
                    this.host.persistProperties(c);
                }
            }, a.prototype.updateSize = function() {
                this.editor && this.editor.resize(this.viewPort);
            }, a.convertDeltaToParagraphs = function(b) {
                for (var c = [], d = {
                    textRuns: []
                }, e = 0, f = b.ops.length; f > e; e++) {
                    var g = b.ops[e];
                    if ("string" == typeof g.insert) {
                        var h = g.insert, i = g.attributes;
                        i && i.align && (d.horizontalTextAlignment = i.align);
                        var j, k = 0, l = 0;
                        do {
                            if (l = h.indexOf("\n", k), 0 > l ? (j = !1, l = h.length) : j = !0, l - k > 0) {
                                var m = h.substring(k, l), n = {
                                    value: m
                                };
                                if (i) {
                                    void 0 !== i.link && (n.url = i.link);
                                    var o = a.convertFormatAttributesToTextStyle(i);
                                    o && (n.textStyle = o);
                                }
                                d.textRuns.push(n);
                            }
                            j && (0 === d.textRuns.length && d.textRuns.push({
                                value: ""
                            }), c.push(d), d = {
                                textRuns: []
                            }), k = l + 1;
                        } while (k < h.length);
                    }
                }
                return d.textRuns.length > 0 && d.textRuns[0].value.length > 0 && c.push(d), c;
            }, a.convertParagraphsToHtml = function(a) {
                for (var b = $(), c = 0, e = a.length; e > c; ++c) {
                    var f = a[c], g = !0, h = $("<div>");
                    f.horizontalTextAlignment && h.css("text-align", f.horizontalTextAlignment);
                    for (var i = 0, j = f.textRuns.length; j > i; ++i) {
                        var k = f.textRuns[i], l = $("<span>"), m = k.textStyle;
                        if (m) {
                            var n = {};
                            m.fontFamily && (n["font-family"] = d.getFontFamily(m.fontFamily)), m.fontSize && (n["font-size"] = m.fontSize), 
                            m.fontStyle && (n["font-style"] = m.fontStyle), m.fontWeight && (n["font-weight"] = m.fontWeight), 
                            m.textDecoration && (n["text-decoration"] = m.textDecoration), l.css(n);
                        }
                        var o = k.value;
                        if (jsCommon.StringExtensions.isNullOrEmpty(o) || (g = !1), void 0 !== k.url) {
                            var p = $("<a>").attr("href", k.url).attr("target", "_blank").text(o);
                            l.append(p);
                        } else l.text(o);
                        h.append(l);
                    }
                    g && h.append($("<br>")), b = b.add(h);
                }
                return b;
            }, a.convertParagraphsToOps = function(a) {
                for (var b = [], c = 0, e = a.length; e > c; ++c) for (var f = a[c], g = 0, h = f.textRuns.length; h > g; ++g) {
                    var i = f.textRuns[g], j = {};
                    f.horizontalTextAlignment && (j.align = f.horizontalTextAlignment);
                    var k = i.textStyle;
                    k && (k.fontFamily && (j.font = d.getFontFamily(k.fontFamily)), k.fontSize && (j.size = k.fontSize), 
                    j.italic = "italic" === k.fontStyle, j.bold = "bold" === k.fontWeight, j.underline = "underline" === k.textDecoration);
                    var l = i.value, m = {
                        insert: l,
                        attributes: j
                    };
                    b.push(m), g !== h - 1 || jsCommon.StringExtensions.endsWith(l, "\n") || b.push({
                        insert: "\n",
                        attributes: j
                    });
                }
                return b;
            }, a.convertFormatAttributesToTextStyle = function(a) {
                var b = {};
                return a.bold && (b.fontWeight = "bold"), a.font && (b.fontFamily = a.font), a.italic && (b.fontStyle = "italic"), 
                a.size && (b.fontSize = a.size), a.underline && (b.textDecoration = "underline"), 
                b;
            }, a.capabilities = {
                objects: {
                    general: {
                        properties: {
                            paragraphs: {
                                type: {}
                            }
                        }
                    }
                },
                suppressDefaultTitle: !0
            }, a;
        }();
        b.RichTextbox = c;
        var d;
        !function(b) {
            function c(a) {
                var b = d[a];
                return void 0 !== b ? b : a;
            }
            var d = {
                "Segoe (Bold)": "wf_segoe-ui_bold",
                "Segoe UI": "wf_segoe-ui_normal",
                "Segoe UI Light": "wf_segoe-ui_light",
                Heading: "wf_segoe-ui_light",
                Body: "wf_segoe-ui_normal"
            }, e = [ "Arial", "Arial Black", "Arial Unicode MS", "Calibri", "Cambria", "Cambria Math", "Candara", "Comic Sans MS", "Consolas", "Constantia", "Corbel", "Courier New", "Georgia", "Lucida Sans Unicode", "Segoe (Bold)", "Segoe UI", "Segoe UI Light", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Wingdings", "Wingdings 2", "Wingdings 3" ].map(function(a) {
                return {
                    label: a,
                    value: c(a)
                };
            });
            b.defaultFont = c("Segoe UI Light");
            var f = [ "8", "9", "10", "10.5", "11", "12", "14", "16", "18", "20", "24", "28", "32", "36", "40", "42", "44", "54", "60", "66", "72", "80", "88", "96" ].map(function(a) {
                return {
                    label: a,
                    value: a + "px"
                };
            });
            b.defaultFontSize = "14px";
            var g = [ "Left", "Center", "Right" ].map(function(a) {
                return {
                    label: a,
                    value: a.toLowerCase()
                };
            });
            b.getFontFamily = c;
            var h = function() {
                function c(a, b) {
                    var d = this;
                    this.QuillPackage = {
                        javaScriptFiles: c.quillJsFiles,
                        cssFiles: c.quillCssFiles
                    }, this.textChanged = function(a, b) {}, this.host = b, this.$container = $("<div>"), 
                    this.readOnly = a, this.localizationProvider = {
                        get: function(a) {
                            return d.host.getLocalizedString(a);
                        }
                    }, c.loadQuillResources ? (this.initialized = !1, this.dependenciesLoaded = $.Deferred(), 
                    this.dependenciesLoaded.done(function() {
                        d.rebuildQuillEditor(), d.initialized = !0;
                    }), jsCommon.requires(this.QuillPackage, function() {
                        return d.dependenciesLoaded.resolve();
                    })) : (this.rebuildQuillEditor(), this.initialized = !0);
                }
                return c.prototype.getElement = function() {
                    return this.$container;
                }, c.prototype.getToolbar = function() {
                    return this.$toolbarDiv;
                }, c.prototype.getContents = function() {
                    return this.editor.getContents();
                }, c.prototype.setContents = function(a) {
                    var b = this;
                    return this.initialized ? (this.editor.setHTML("", "api"), a && this.editor.setContents(a, "api"), 
                    void this.formatUrls()) : void this.dependenciesLoaded.done(function() {
                        return b.setContents(a);
                    });
                }, c.prototype.resize = function(a) {
                    this.initialized && (this.$container.width(a.width), this.$container.height(a.height));
                }, c.prototype.setReadOnly = function(a) {
                    var b = a !== this.readOnly;
                    this.readOnly = a, this.initialized && b && this.rebuildQuillEditor();
                }, c.prototype.formatUrls = function() {
                    var a = this.editor.getText(), b = /http[s]?:\/\/(\S)+/gi;
                    this.editor.formatText(0, a.length, "link", !1, "api");
                    for (var c; null !== (c = b.exec(a)); ) {
                        var d = c[0], e = c.index, f = b.lastIndex;
                        this.editor.formatText(e, f, "link", d, "api");
                    }
                }, c.prototype.setSelection = function(a, b) {
                    this.editor.setSelection(a, b, "api");
                }, c.prototype.getSelection = function() {
                    return this.editor.getSelection();
                }, c.prototype.rebuildQuillEditor = function() {
                    var a = this, d = null;
                    this.editor && (this.editor.removeAllListeners(), d = this.editor.getContents()), 
                    this.$container.empty(), this.$container.keydown(function(a) {
                        return a.stopPropagation();
                    });
                    var e = this.$editorDiv = $("<div>");
                    e.css("font-family", b.defaultFont), e.css("font-size", b.defaultFontSize);
                    var f = {
                        readOnly: this.readOnly,
                        formats: [ "bold", "italic", "underline", "font", "size", "link", "align" ]
                    };
                    if (this.editor = new Quill(e.get(0), f), !this.readOnly) {
                        var g = this.$toolbarDiv;
                        if (!g) {
                            var h = new i.Toolbar(this.editor, this.localizationProvider);
                            this.$toolbarDiv = g = h.$container;
                        }
                        g.addClass("unselectable"), this.host.setToolbar(g), this.editor.addModule("toolbar", {
                            container: g.get(0)
                        }), e.attr("drag-resize-disabled", "true");
                    }
                    this.$container.append(e), d && this.setContents(d);
                    var j = new jsCommon.ThrottleUtility(c.textChangeThrottle);
                    this.editor.on("text-change", function(b, c) {
                        "api" !== c && j.run(function() {
                            return a.onTextChanged(b, c);
                        });
                    });
                    var k = new jsCommon.ThrottleUtility(c.formatUrlThrottle);
                    this.editor.on("text-change", function(b, c) {
                        "api" !== c && k.run(function() {
                            return a.formatUrls();
                        });
                    }), this.editor.root.addEventListener("blur", function(b) {
                        var c = b.relatedTarget || document.activeElement;
                        c && "SELECT" === c.tagName || a.setSelection(null, null);
                    }, !1);
                    try {
                        this.editor.focus();
                    } catch (l) {}
                }, c.prototype.onTextChanged = function(a, b) {
                    this.textChanged(a, b);
                }, c.textChangeThrottle = 200, c.formatUrlThrottle = 1e3, c.loadQuillResources = !0, 
                c.quillJsFiles = [ a.build + "/externals/quill.min.js" ], c.quillCssFiles = [ a.build + "/externals/quill.base.css" ], 
                c;
            }();
            b.QuillWrapper = h;
            var i;
            !function(a) {
                function c(a, b) {
                    a.val(b);
                    var c = document.createEvent("UIEvent");
                    c.initUIEvent("change", !1, !1, null, 0), a.get(0).dispatchEvent(c);
                }
                function d() {
                    return j().addClass("ql-format-group").attr("drag-resize-disabled", "true");
                }
                function h(a) {
                    return $("<label>").text(a);
                }
                function i() {
                    return $("<div>");
                }
                function j() {
                    return $("<span>");
                }
                a.setSelectValue = c;
                var k = function() {
                    function a(a, c) {
                        this.localizationProvider = c;
                        var j = this.picker("Font", e, "font", b.defaultFont, function(a, b) {
                            return a.css("font-family", b.value), a;
                        });
                        this.$container = i().addClass("toolbar ql-toolbar").append(d().append(h(c.get("RichTextbox_Font_Label"))).append(j).append(this.picker("Size", f, "size", b.defaultFontSize))).append(d().append(this.formatButton(this.getLocalizationString("Bold"), "bold")).append(this.formatButton(this.getLocalizationString("Italic"), "italic")).append(this.formatButton(this.getLocalizationString("Underline"), "underline"))).append(d().append(this.toggleGroup("Text Alignment", g, "align", "Left")));
                    }
                    return a.prototype.toggleGroup = function(a, b, d, e) {
                        var f = this, g = j().attr("localize-tooltip", this.getLocalizationString(a)).addClass("ql-toggle-group"), h = this.selector(a, b, e).addClass("ql-picker ql-" + d).css("display", "none"), i = b.map(function(a) {
                            var b = f.formatButton(f.getLocalizationString(a.label)).attr("data-value", a.value).click(function(b) {
                                return c(h, a.value);
                            });
                            return b;
                        });
                        return h.change(function(a) {
                            for (var b = h.val(), c = 0; c < i.length; c++) i[c].toggleClass("ql-active", i[c].attr("data-value") === b);
                        }), g.append(h), g.append(i), g;
                    }, a.prototype.picker = function(a, b, c, d, e) {
                        var f = this.selector(a, b, d, e).addClass("ql-picker ql-" + c);
                        return f;
                    }, a.prototype.selector = function(a, b, c, d) {
                        for (var e = $("<select>").attr("localize-tooltip", this.getLocalizationString(a)), f = 0; f < b.length; f++) {
                            var g = b[f], h = $("<option>").attr("value", g.value).text(g.label);
                            g.value === c && h.attr("selected", "selected"), void 0 !== d && (h = d(h, g)), 
                            e.append(h);
                        }
                        return e;
                    }, a.prototype.formatButton = function(a, b) {
                        var c = j().addClass("ql-format-button");
                        return null != a && c.attr("localize-tooltip", a), null != b && c.addClass("ql-" + b), 
                        c.on("selectstart", function() {
                            return !1;
                        }), c;
                    }, a.prototype.getLocalizationString = function(a) {
                        return "RichTextbox_" + a + "_ToolTip";
                    }, a;
                }();
                a.Toolbar = k;
            }(i || (i = {}));
        }(d = b.RichText || (b.RichText = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.cheerMeterProps = {
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }
        };
        var c = function() {
            function c() {
                this.isFirstTime = !0;
            }
            return c.converter = function(d) {
                var e = d.categorical.categories[0].values, f = d.categorical.values[0].values, g = d.categorical.categories[0].objects, h = a.DataViewObjects.getFillColor(g[0], b.cheerMeterProps.dataPoint.fill, c.DefaultFontColor), i = a.DataViewObjects.getFillColor(g[1], b.cheerMeterProps.dataPoint.fill, c.DefaultFontColor), j = {
                    teamA: {
                        name: e[0],
                        value: f[0],
                        color: h
                    },
                    teamB: {
                        name: e[1],
                        value: f[1],
                        color: i
                    }
                };
                return j;
            }, c.prototype.init = function(a) {
                var b = this.svg = d3.select(a.element.get(0)).append("svg");
                this.textOne = b.append("text").style("font-family", c.DefaultFontFamily), this.textTwo = b.append("text").style("font-family", c.DefaultFontFamily);
            }, c.prototype.onResizing = function(a, b) {}, c.prototype.onDataChanged = function(a) {}, 
            c.prototype.update = function(a) {
                var b = c.converter(a.dataViews[0]);
                this.draw(b, a.duration, a.viewport);
            }, c.prototype.getRecomendedFontProperties = function(b, d, e) {
                for (var f, g = {
                    fontSize: "",
                    fontFamily: c.DefaultFontFamily,
                    text: b + d
                }, h = 1, i = 1e3, j = e.width, k = 0; i >= h; ) if (f = (h + i) / 2 | 0, g.fontSize = f + "px", 
                k = a.TextMeasurementService.measureSvgTextWidth(g), j > k) h = f + 1; else {
                    if (!(k > j)) break;
                    i = f - 1;
                }
                return g.fontSize = f + "px", k = a.TextMeasurementService.measureSvgTextWidth(g), 
                k > j && (f--, g.fontSize = f + "px"), g;
            }, c.prototype.calculateLayout = function(b, d) {
                var e = b.teamA.name, f = b.teamB.name, g = {
                    height: d.height,
                    width: d.width - c.PaddingBetweenText
                }, h = this.getRecomendedFontProperties(e, f, g);
                h.text = e;
                var i = 0 | a.TextMeasurementService.measureSvgTextWidth(h);
                h.text = f;
                var j = 0 | a.TextMeasurementService.measureSvgTextWidth(h), k = (d.width - i - j - c.PaddingBetweenText) / 2 | 0;
                h.text = e + f;
                var l = 0 | a.TextMeasurementService.measureSvgTextHeight(h), m = 100, n = d.height - l, o = (m - b.teamA.value) / m * n + l / 2 | 0, p = (m - b.teamB.value) / m * n + l / 2 | 0;
                return {
                    x1: k,
                    x2: k + i + c.PaddingBetweenText,
                    y1: o,
                    y2: p,
                    fontSize: h.fontSize
                };
            }, c.prototype.ensureStartState = function(a, b) {
                if (this.isFirstTime) {
                    this.isFirstTime = !1;
                    var c = b.height / 2;
                    this.textOne.attr({
                        x: a.x1,
                        y: c
                    }), this.textTwo.attr({
                        x: a.x2,
                        y: c
                    });
                }
            }, c.prototype.draw = function(a, b, d) {
                var e = "back", f = this.textOne, g = this.textTwo;
                this.svg.attr({
                    height: d.height,
                    width: d.width
                }).style("background-color", c.DefaultBackgroundColor);
                var h = this.calculateLayout(a, d);
                this.ensureStartState(h, d), f.style("font-size", h.fontSize).style("fill", a.teamA.color).text(a.teamA.name), 
                g.style("fill", a.teamB.color).style("font-size", h.fontSize).text(a.teamB.name), 
                f.transition().duration(b).ease(e).attr({
                    y: h.y1,
                    x: h.x1
                }), g.transition().duration(b).ease(e).attr({
                    y: h.y2,
                    x: h.x2
                });
            }, c.prototype.destroy = function() {
                this.svg = null, this.textOne = this.textTwo = null;
            }, c.capabilities = {
                dataRoles: [ {
                    name: "Category",
                    kind: 0
                }, {
                    name: "Y",
                    kind: 1
                } ],
                dataViewMappings: [ {
                    categorical: {
                        categories: {
                            "for": {
                                "in": "Category"
                            }
                        }
                    }
                } ],
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            }, c.DefaultFontFamily = "cursive", c.DefaultFontColor = "rgb(165, 172, 175)", c.DefaultBackgroundColor = "#243C18", 
            c.PaddingBetweenText = 15, c;
        }();
        b.CheerMeter = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.scatterChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Details")
            }, {
                name: "Series",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Legend")
            }, {
                name: "X",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_X")
            }, {
                name: "Y",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Y")
            }, {
                name: "Size",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Size")
            }, {
                name: "Gradient",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Gradient")
            } ],
            objects: {
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        defaultColor: {
                            displayName: a.data.createDisplayNameGetter("Visual_DefaultColor"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        showAllDataPoints: {
                            displayName: a.data.createDisplayNameGetter("Visual_DataPoint_Show_All"),
                            type: {
                                bool: !0
                            }
                        },
                        fill: {
                            displayName: a.data.createDisplayNameGetter("Visual_Fill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Category" ]
                                }
                            }
                        }
                    }
                },
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                categoryAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_XAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        start: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                            type: {
                                numeric: !0
                            }
                        },
                        end: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                            type: {
                                numeric: !0
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                },
                valueAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_YAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                            type: {
                                formatting: {
                                    yAxisPosition: !0
                                }
                            }
                        },
                        start: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                            type: {
                                numeric: !0
                            }
                        },
                        end: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                            type: {
                                numeric: !0
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                categoryLabels: {
                    displayName: a.data.createDisplayNameGetter("Visual_CategoryLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 1
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                }, {
                    Category: {
                        max: 1
                    },
                    Series: {
                        max: 0
                    },
                    X: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    },
                    Size: {
                        max: 1
                    },
                    Gradient: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        },
                        dataReductionAlgorithm: {
                            sample: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Series",
                            select: [ {
                                bind: {
                                    to: "X"
                                }
                            }, {
                                bind: {
                                    to: "Y"
                                }
                            }, {
                                bind: {
                                    to: "Size"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            sorting: {
                custom: {}
            }
        }, b.scatterChartProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                defaultColor: {
                    objectName: "dataPoint",
                    propertyName: "defaultColor"
                },
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(a) {
                this.interactivityService = a.interactivityService;
            }
            return c.prototype.init = function(a) {
                this.options = a;
                var b = this.element = a.element;
                this.currentViewport = a.viewport, this.style = a.style, this.host = a.host, this.colors = this.style.colorPalette.dataColors, 
                this.interactivity = a.interactivity, this.cartesianVisualHost = a.cartesianHost, 
                this.isInteractiveChart = a.interactivity && a.interactivity.isInteractiveLegend, 
                b.addClass(c.ClassName);
                var d = this.svg = a.svg;
                this.clearCatcher = this.svg.select(".clearCatcher"), this.mainGraphicsG = d.append("g").classed(c.MainGraphicsContextClassName, !0), 
                this.mainGraphicsContext = this.mainGraphicsG.append("svg"), this.dataLabelsContext = this.mainGraphicsG.append("g").classed(c.DataLabelsContextClassName, !0);
            }, c.converter = function(d, e, f, g, h, i) {
                var j, k, l, m, n = d.categorical, o = d.metadata;
                n.categories && n.categories.length > 0 ? (j = n.categories[0].values, k = b.valueFormatter.create({
                    format: b.valueFormatter.getFormatString(n.categories[0].source, b.scatterChartProps.general.formatString),
                    value: j[0],
                    value2: j[j.length - 1]
                }), m = n.categories[0].identity, l = n.categories[0].objects) : j = [ null ];
                var p = n.categories, q = n.values, r = !!q.source, s = q.grouped(), t = q.source, u = c.getMetadata(s, t), v = b.dataLabelUtils.getDefaultPointLabelSettings();
                if (o && o.objects) {
                    var w = o.objects, x = a.DataViewObjects.getFillColor(w, b.columnChartProps.dataPoint.defaultColor), y = a.DataViewObjects.getValue(w, b.columnChartProps.dataPoint.showAllDataPoints), z = w.categoryLabels;
                    z && (v.show = void 0 !== z.show ? z.show : v.show, v.precision = void 0 !== z.labelsPrecision ? +z.labelsPrecision : v.precision, 
                    void 0 !== z.color && (v.labelColor = z.color.solid.color, v.overrideDefaultColor = !0));
                }
                var A = c.createDataPoints(q, u, p, j, k, m, l, f, e, r, v, x);
                g && g.applySelectionStateToData(A);
                var B = r ? c.createSeriesLegend(q, f, q, b.valueFormatter.getFormatString(t, b.scatterChartProps.general.formatString), x) : [], C = q && t ? t.displayName : "";
                C || (C = p && p[0].source.displayName ? p[0].source.displayName : "");
                var D = {
                    title: C,
                    dataPoints: B
                }, E = c.getSizeRangeForGroups(s, u.idx.size);
                return h && null !== h.showAxisTitle && h.showAxisTitle === !1 && (u.axesLabels.x = null), 
                i && null !== i.showAxisTitle && i.showAxisTitle === !1 && (u.axesLabels.y = null), 
                {
                    xCol: u.cols.x,
                    yCol: u.cols.y,
                    dataPoints: A,
                    legendData: D,
                    axesLabels: u.axesLabels,
                    hasSelection: !1,
                    selectedIds: [],
                    size: u.cols.size,
                    sizeRange: E,
                    dataLabelsSettings: v,
                    defaultDataPointColor: x,
                    hasDynamicSeries: r,
                    showAllDataPoints: y
                };
            }, c.getSizeRangeForGroups = function(a, d) {
                var e = {};
                return a && a.forEach(function(a) {
                    var f = c.getMeasureValue(d, a.values), g = b.AxisHelper.getRangeForColumn(f);
                    (null == e.min || e.min > g.min) && (e.min = g.min), (null == e.max || e.max < g.max) && (e.max = g.max);
                }), e;
            }, c.createDataPoints = function(a, d, e, f, g, h, i, j, k, l, m, n) {
                for (var o = [], p = d.idx, q = b.scatterChartProps.general.formatString, r = a.source, s = a.grouped(), t = new b.ColorHelper(j, b.scatterChartProps.dataPoint.fill, n), u = 0, v = f.length; v > u; u++) for (var w = f[u], x = 0, y = s.length; y > x; x++) {
                    var z = s[x], A = z.values, B = c.getMeasureValue(p.x, A), C = c.getMeasureValue(p.y, A), D = c.getMeasureValue(p.size, A), E = B && B.values ? B.values[u] : null, F = C && C.values ? C.values[u] : 0, G = D && D.values ? D.values[u] : null, H = null == E || null == F;
                    if (!H) {
                        var I;
                        if (l) I = t.getColorForSeriesValue(z.objects, a.identityFields, z.name); else {
                            var J = null != D ? D.source.queryName : "";
                            I = t.getColorForMeasure(i && i[u], J);
                        }
                        var K = b.SelectionId.createWithIds(h ? h[u] : void 0, l ? z.identity : void 0), L = [];
                        r && L.push({
                            value: z.name,
                            metadata: {
                                source: r,
                                values: []
                            }
                        }), B && L.push({
                            value: E,
                            metadata: B
                        }), C && L.push({
                            value: F,
                            metadata: C
                        }), D && D.values && D.values.length > 0 && L.push({
                            value: D.values[u],
                            metadata: D
                        });
                        var M = b.TooltipBuilder.createTooltipInfo(q, e, w, null, null, L), N = {
                            x: E,
                            y: F,
                            size: G,
                            radius: {
                                sizeMeasure: D,
                                index: u
                            },
                            fill: I,
                            category: g ? g.format(w) : w,
                            selected: !1,
                            identity: K,
                            tooltipInfo: M,
                            labelFill: m.overrideDefaultColor ? m.labelColor : I
                        };
                        o.push(N);
                    }
                }
                return o;
            }, c.createSeriesLegend = function(a, c, d, e, f) {
                for (var g = a.grouped(), h = new b.ColorHelper(c, b.scatterChartProps.dataPoint.fill, f), i = [], j = 0, k = g.length; k > j; j++) {
                    var l = g[j], m = h.getColorForSeriesValue(l.objects, a.identityFields, l.name);
                    i.push({
                        color: m,
                        icon: 1,
                        label: b.valueFormatter.format(l.name, e),
                        identity: l.identity ? b.SelectionId.createWithId(l.identity) : b.SelectionId.createNull(),
                        selected: !1
                    });
                }
                return i;
            }, c.getBubbleRadius = function(a, b, d) {
                var e = null, f = null, g = a.sizeMeasure;
                if (!g) return c.BubbleRadius;
                var h = b.min ? b.min : 0, i = b.max ? b.max : 0, j = Math.min(h, 0), k = Math.max(i, 0);
                if (e = {
                    minRange: j,
                    maxRange: k,
                    delta: k - j
                }, f = c.getBubblePixelAreaSizeRange(d, c.MinSizeRange, c.MaxSizeRange), g.values) {
                    var l = g.values[a.index];
                    if (null != l) return c.projectSizeToPixels(l, e, f) / 2;
                }
                return c.BubbleRadius;
            }, c.getMeasureValue = function(a, b) {
                return a >= 0 ? b[a] : null;
            }, c.getMetadata = function(a, d) {
                var e, f, g, h = b.DataRoleHelper.getMeasureIndexOfRole(a, "X"), i = b.DataRoleHelper.getMeasureIndexOfRole(a, "Y"), j = b.DataRoleHelper.getMeasureIndexOfRole(a, "Size"), k = "", l = "";
                if (a && a.length) {
                    var m = a[0], n = m.values.length;
                    h >= 0 || (h = c.getDefaultMeasureIndex(n, i, j)), i >= 0 || (i = c.getDefaultMeasureIndex(n, h, j)), 
                    j >= 0 || (j = c.getDefaultMeasureIndex(n, h, i)), h >= 0 && (e = m.values[h].source, 
                    k = m.values[h].source.displayName), i >= 0 && (f = m.values[i].source, l = m.values[i].source.displayName), 
                    j >= 0 && (g = m.values[j].source);
                }
                return {
                    idx: {
                        x: h,
                        y: i,
                        size: j
                    },
                    cols: {
                        x: e,
                        y: f,
                        size: g
                    },
                    axesLabels: {
                        x: k,
                        y: l
                    }
                };
            }, c.getDefaultMeasureIndex = function(a, b, c) {
                for (var d = 0; a > d; d++) if (d !== b && d !== c) return d;
            }, c.prototype.setData = function(a) {
                if (this.data = {
                    xCol: void 0,
                    yCol: void 0,
                    dataPoints: [],
                    legendData: {
                        dataPoints: []
                    },
                    axesLabels: {
                        x: "",
                        y: ""
                    },
                    selectedIds: [],
                    sizeRange: [],
                    dataLabelsSettings: b.dataLabelUtils.getDefaultPointLabelSettings(),
                    defaultDataPointColor: null,
                    hasDynamicSeries: !1
                }, a.length > 0) {
                    var d = a[0];
                    d && (this.categoryAxisProperties = b.CartesianHelper.getCategoryAxisProperties(d.metadata, !0), 
                    this.valueAxisProperties = b.CartesianHelper.getValueAxisProperties(d.metadata, !0), 
                    this.dataView = d, d.categorical && d.categorical.values && (this.data = c.converter(d, this.currentViewport, this.colors, this.interactivityService, this.categoryAxisProperties, this.valueAxisProperties)));
                }
            }, c.prototype.calculateLegend = function() {
                return this.data.legendData;
            }, c.prototype.hasLegend = function() {
                return this.data && this.data.hasDynamicSeries;
            }, c.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "dataPoint":
                    var c = this.dataView && this.dataView.categorical ? this.dataView.categorical : null;
                    if (!b.GradientUtils.hasGradientRole(c)) return this.enumerateDataPoints();

                  case "categoryAxis":
                    return [ {
                        selector: null,
                        properties: {
                            showAxisTitle: this.categoryAxisProperties && null != this.categoryAxisProperties.showAxisTitle ? this.categoryAxisProperties.showAxisTitle : !0
                        },
                        objectName: "categoryAxis"
                    } ];

                  case "valueAxis":
                    return [ {
                        selector: null,
                        properties: {
                            showAxisTitle: this.valueAxisProperties && null != this.valueAxisProperties.showAxisTitle ? this.valueAxisProperties.showAxisTitle : !0
                        },
                        objectName: "valueAxis"
                    } ];

                  case "categoryLabels":
                    return this.data ? b.dataLabelUtils.enumerateCategoryLabels(this.data.dataLabelsSettings, !0) : b.dataLabelUtils.enumerateCategoryLabels(null, !0);
                }
            }, c.prototype.enumerateDataPoints = function() {
                var a = this.data;
                if (a) {
                    var c = [], d = a.dataPoints.length;
                    if (a.hasDynamicSeries) {
                        c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                defaultColor: {
                                    solid: {
                                        color: a.defaultDataPointColor || this.colors.getColor(0).value
                                    }
                                }
                            }
                        });
                        var e = void 0 !== a.showAllDataPoints ? a.showAllDataPoints : d > 1;
                        if (c.push({
                            objectName: "dataPoint",
                            selector: null,
                            properties: {
                                showAllDataPoints: e
                            }
                        }), !e) return c;
                    }
                    if (0 === a.legendData.dataPoints.length) for (var f = 0; d > f; f++) {
                        var g = a.dataPoints[f];
                        c.push({
                            objectName: "dataPoint",
                            displayName: g.category,
                            selector: b.ColorHelper.normalizeSelector(g.identity.getSelector(), !0),
                            properties: {
                                fill: {
                                    solid: {
                                        color: g.fill
                                    }
                                }
                            }
                        });
                    } else for (var h = a.legendData.dataPoints.length, f = 0; h > f; f++) {
                        var i = a.legendData.dataPoints[f];
                        c.push({
                            objectName: "dataPoint",
                            displayName: i.label,
                            selector: b.ColorHelper.normalizeSelector(i.identity.getSelector()),
                            properties: {
                                fill: {
                                    solid: {
                                        color: i.color
                                    }
                                }
                            }
                        });
                    }
                    return c;
                }
            }, c.prototype.calculateAxesProperties = function(a) {
                var c = this.data, d = c.dataPoints, e = this.currentViewport = a.viewport, f = a.margin;
                this.currentViewport = e, this.margin = f;
                var g = e.width - (f.left + f.right), h = e.height - (f.top + f.bottom), i = 0, j = 10, k = 0, l = 10;
                d.length > 0 && (i = d3.min(d, function(a) {
                    return a.y;
                }), j = d3.max(d, function(a) {
                    return a.y;
                }), k = d3.min(d, function(a) {
                    return a.x;
                }), l = d3.max(d, function(a) {
                    return a.x;
                }));
                var m = [ k, l ], n = b.AxisHelper.combineDomain(a.forcedXDomain, m);
                this.xAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: g,
                    dataDomain: n,
                    metaDataColumn: c.xCol,
                    formatStringProp: b.scatterChartProps.general.formatString,
                    outerPadding: 0,
                    isScalar: !0,
                    isVertical: !1,
                    forcedTickCount: a.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    isCategoryAxis: !0
                }), this.xAxisProperties.axis.tickSize(-h, 0), this.xAxisProperties.axisLabel = this.data.axesLabels.x;
                var o = b.AxisHelper.combineDomain(a.forcedYDomain, [ i, j ]);
                return this.yAxisProperties = b.AxisHelper.createAxis({
                    pixelSpan: h,
                    dataDomain: o,
                    metaDataColumn: c.yCol,
                    formatStringProp: b.scatterChartProps.general.formatString,
                    outerPadding: 0,
                    isScalar: !0,
                    isVertical: !0,
                    forcedTickCount: a.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    isCategoryAxis: !1
                }), this.yAxisProperties.axisLabel = this.data.axesLabels.y, [ this.xAxisProperties, this.yAxisProperties ];
            }, c.prototype.overrideXScale = function(a) {
                this.xAxisProperties = a;
            }, c.prototype.render = function(a) {
                if (this.data) {
                    var c = this.data, d = this.data.dataPoints, e = this.margin, f = this.currentViewport, g = f.width - (e.left + e.right), h = f.height - (e.top + e.bottom), i = this.xAxisProperties.scale, j = this.yAxisProperties.scale, k = b.dataHasSelection(d);
                    this.mainGraphicsContext.attr("width", g).attr("height", h);
                    var l = d.sort(function(a, b) {
                        return b.radius.sizeMeasure ? b.radius.sizeMeasure.values[b.radius.index] - a.radius.sizeMeasure.values[a.radius.index] : 0;
                    }), m = this.drawScatterMarkers(l, k, c.sizeRange, a);
                    if (this.data.dataLabelsSettings.show) {
                        var n = b.dataLabelUtils.getScatterChartLabelLayout(i, j, this.data.dataLabelsSettings, f, c.sizeRange);
                        b.dataLabelUtils.drawDefaultLabelsForDataPointChart(d, this.dataLabelsContext, n, this.currentViewport);
                    } else b.dataLabelUtils.cleanDataLabels(this.dataLabelsContext);
                    if (this.interactivityService) {
                        var o = {
                            host: this.cartesianVisualHost,
                            root: this.svg,
                            dataPointsSelection: m,
                            mainContext: this.mainGraphicsContext,
                            data: this.data,
                            visualInitOptions: this.options,
                            xAxisProperties: this.xAxisProperties,
                            yAxisProperties: this.yAxisProperties,
                            background: d3.select(this.element.get(0)),
                            clearCatcher: this.clearCatcher
                        };
                        this.interactivityService.apply(this, o);
                    }
                    b.TooltipManager.addTooltip(m, function(a) {
                        return a.data.tooltipInfo;
                    }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
                }
            }, c.prototype.drawScatterMarkers = function(a, b, d, e) {
                var f = this, g = this.xAxisProperties.scale, h = this.yAxisProperties.scale, i = this.mainGraphicsContext.selectAll(c.DotClasses.selector).data(a, function(a) {
                    return a.identity.getKey();
                });
                return i.enter().append(c.ScatterChartCircleTagName).classed(c.DotClasses["class"], !0), 
                i.style({
                    "stroke-opacity": function(a) {
                        return c.getBubbleOpacity(a, b);
                    },
                    "stroke-width": "1px",
                    stroke: function(a) {
                        return a.fill;
                    },
                    fill: function(a) {
                        return a.fill;
                    },
                    "fill-opacity": function(a) {
                        return null != a.size ? c.getBubbleOpacity(a, b) : 0;
                    }
                }).transition().duration(e).attr({
                    r: function(a) {
                        return c.getBubbleRadius(a.radius, d, f.currentViewport);
                    },
                    cx: function(a) {
                        return g(a.x);
                    },
                    cy: function(a) {
                        return h(a.y);
                    }
                }), i.exit().remove(), i;
            }, c.getBubblePixelAreaSizeRange = function(a, b, d) {
                var e = 1;
                if (a.height > 0 && a.width > 0) {
                    var f = Math.min(a.height, a.width);
                    e = f * f / c.AreaOf300By300Chart;
                }
                var g = Math.round(b * e), h = Math.round(d * e);
                return {
                    minRange: g,
                    maxRange: h,
                    delta: h - g
                };
            }, c.project = function(a, b, d) {
                if (0 === b.delta || 0 === d.delta) return c.rangeContains(b, a) ? d.minRange : null;
                var e = (a - b.minRange) / b.delta;
                return d.minRange + e * d.delta;
            }, c.projectSizeToPixels = function(a, b, d) {
                var e = 0;
                if (b) {
                    if (e = d.maxRange, 0 !== b.delta) {
                        var f = Math.min(Math.max(a, b.minRange), b.maxRange);
                        e = c.project(f, b, d);
                    }
                    e = 2 * Math.sqrt(e / Math.PI);
                }
                return Math.round(e);
            }, c.rangeContains = function(a, b) {
                return a.minRange <= b && b <= a.maxRange;
            }, c.getBubbleOpacity = function(a, b) {
                return b && !a.selected ? c.DimmedBubbleOpacity : c.DefaultBubbleOpacity;
            }, c.prototype.accept = function(a, b) {
                a.visitScatterChart(b);
            }, c.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, c.prototype.getSupportedCategoryAxisType = function() {
                return a.axisType.scalar;
            }, c.ScatterChartCircleTagName = "circle", c.BubbleRadius = 6, c.DefaultBubbleOpacity = .85, 
            c.DimmedBubbleOpacity = .4, c.AreaOf300By300Chart = 9e4, c.MinSizeRange = 200, c.MaxSizeRange = 3e3, 
            c.ClassName = "scatterChart", c.MainGraphicsContextClassName = "mainGraphicsContext", 
            c.DataLabelsContextClassName = "dataLabelsContext", c.DotClasses = {
                "class": "dot",
                selector: ".dot"
            }, c;
        }();
        b.ScatterChart = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.slicerCapabilities = {
            dataRoles: [ {
                name: "Values",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Field")
            } ],
            dataViewMappings: [ {
                conditions: [ {
                    Values: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Values"
                        },
                        dataReductionAlgorithm: {
                            window: {}
                        }
                    }
                }
            } ],
            objects: {
                general: {
                    properties: {
                        selected: {
                            type: {
                                bool: !0
                            }
                        },
                        filter: {
                            type: {
                                filter: {}
                            },
                            rule: {
                                output: {
                                    property: "selected",
                                    selector: [ "Values" ]
                                }
                            }
                        },
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                }
            },
            sorting: {
                custom: {}
            },
            suppressDefaultTitle: !0
        }, b.slicerProps = {
            selectedPropertyIdentifier: {
                objectName: "general",
                propertyName: "selected"
            },
            filterPropertyIdentifier: {
                objectName: "general",
                propertyName: "filter"
            },
            formatString: {
                objectName: "general",
                propertyName: "formatString"
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c() {}
            return c.converter = function(a) {
                var c;
                if (a) {
                    var d = a.categorical;
                    if (d && d.categories && d.categories.length > 0) {
                        for (var e = d.categories[0], f = e && e.values ? e.values.length : 0, g = [], h = void 0, i = 0; f > i; i++) {
                            var j = b.WebInteractivityService.isSelected(b.slicerProps.selectedPropertyIdentifier, e, i);
                            if (void 0 !== j) {
                                h = j;
                                break;
                            }
                        }
                        for (var i = 0; f > i; i++) {
                            var k = e.identity ? e.identity[i] : null, l = b.WebInteractivityService.isSelected(b.slicerProps.selectedPropertyIdentifier, e, i);
                            void 0 === l && void 0 !== h && (l = !h), g.push({
                                value: e.values[i],
                                mouseOver: !1,
                                mouseOut: !0,
                                identity: b.SelectionId.createWithId(k),
                                selected: l
                            });
                        }
                        c = {
                            categorySourceName: e.source.displayName,
                            formatString: b.valueFormatter.getFormatString(e.source, b.slicerProps.formatString),
                            slicerDataPoints: g
                        };
                    }
                }
                return c;
            }, c.prototype.init = function(a) {
                this.element = a.element, this.currentViewport = a.viewport, this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.hostServices = a.host;
                var d = this.settings = a.settings;
                d && d.slicerSettings || (d = this.settings = a.settings = {
                    slicerSettings: c.DefaultStyleProperties
                }), this.initContainer();
            }, c.prototype.onDataChanged = function(b) {
                var c = b.dataViews, d = this.dataView;
                c && c.length > 0 && (this.dataView = c[0]);
                var e = 1 !== b.operationKind && !a.DataViewAnalysis.hasSameCategoryIdentity(d, this.dataView);
                this.updateInternal(e), this.waitingForData = !1;
            }, c.prototype.onResizing = function(a, d) {
                this.currentViewport = a;
                var e = this.getSlicerBodyViewport(this.currentViewport);
                this.slicerBody.style({
                    height: b.SVGUtil.convertToPixelString(e.height),
                    width: b.SVGUtil.convertToPixelString(e.width)
                }), this.slicerHeader.select(c.HeaderText.selector).style("width", this.getSlicerHeaderTextWidth()), 
                this.updateInternal();
            }, c.prototype.accept = function(a, b) {
                a.visitSlicer(b);
            }, c.prototype.updateInternal = function(a) {
                void 0 === a && (a = !1);
                var b = this.slicerData = c.converter(this.dataView);
                return b ? void this.listView.viewport(this.getSlicerBodyViewport(this.currentViewport)).rowHeight(this.getRowHeight()).data(b.slicerDataPoints, function(a) {
                    return $.inArray(a, b.slicerDataPoints);
                }).render(!0, a) : void this.listView.empty();
            }, c.prototype.initContainer = function() {
                var a = this, d = this.settings.slicerSettings, e = this.getSlicerBodyViewport(this.currentViewport);
                this.slicerContainer = d3.select(this.element.get(0)).classed(c.Container["class"], !0), 
                this.slicerHeader = this.slicerContainer.append("div").classed(c.Header["class"], !0).style("height", b.SVGUtil.convertToPixelString(d.header.height)), 
                this.slicerHeader.append("div").classed(c.HeaderText["class"], !0).style({
                    "margin-left": b.SVGUtil.convertToPixelString(d.headerText.marginLeft),
                    "margin-top": b.SVGUtil.convertToPixelString(d.headerText.marginTop),
                    width: this.getSlicerHeaderTextWidth()
                }), this.slicerHeader.append("span").classed(c.Clear["class"], !0).attr("title", this.hostServices.getLocalizedString(c.clearTextKey)), 
                this.slicerBody = this.slicerContainer.append("div").classed(c.Body["class"], !0).style({
                    height: b.SVGUtil.convertToPixelString(e.height),
                    width: b.SVGUtil.convertToPixelString(e.width)
                });
                var f = function(e) {
                    var f = b.SVGUtil.convertToPixelString(a.currentViewport.width - (d.slicerItemContainer.marginLeft + d.slicerText.marginLeft)), g = e.append("li").classed(c.ItemContainer["class"], !0).style({
                        height: b.SVGUtil.convertToPixelString(d.slicerItemContainer.height),
                        "margin-left": b.SVGUtil.convertToPixelString(d.slicerItemContainer.marginLeft)
                    }), h = g.append("label").classed(c.Input["class"], !0);
                    h.append("input").attr("type", "checkbox"), h.append("span").classed(c.LabelText["class"], !0).style("width", f);
                }, g = function(d) {
                    var e;
                    a.slicerData && (a.slicerHeader.select(c.HeaderText.selector).text(a.slicerData.categorySourceName), 
                    e = a.slicerData.formatString);
                    var f = d.selectAll(c.LabelText.selector);
                    if (f.text(function(a) {
                        return b.valueFormatter.format(a.value, e);
                    }), a.interactivityService && a.slicerData && a.slicerBody) {
                        var g = a.slicerBody.attr("width", a.currentViewport.width), h = g.selectAll(c.ItemContainer.selector), i = g.selectAll(c.LabelText.selector), j = g.selectAll(c.Input.selector), k = a.slicerHeader.select(c.Clear.selector), l = {
                            datapoints: a.slicerData.slicerDataPoints,
                            slicerItemContainers: h,
                            slicerItemLabels: i,
                            slicerItemInputs: j,
                            slicerClear: k
                        };
                        a.interactivityService.apply(a, l);
                    }
                    d.select(c.Input.selector).select("input").property("checked", function(a) {
                        return a.selected;
                    });
                }, h = function(a) {
                    a.remove();
                }, i = {
                    rowHeight: this.getRowHeight(),
                    enter: f,
                    exit: h,
                    update: g,
                    loadMoreData: function() {
                        return a.onLoadMoreData();
                    },
                    viewport: this.getSlicerBodyViewport(this.currentViewport),
                    baseContainer: this.slicerBody
                };
                this.listView = b.ListViewFactory.createHTMLListView(i);
            }, c.prototype.onLoadMoreData = function() {
                !this.waitingForData && this.dataView.metadata && this.dataView.metadata.segment && (this.hostServices.loadMoreData(), 
                this.waitingForData = !0);
            }, c.prototype.getSlicerBodyViewport = function(a) {
                var b = this.settings.slicerSettings, c = a.height - (b.header.height + 1);
                return {
                    height: c,
                    width: a.width
                };
            }, c.prototype.getSlicerHeaderTextWidth = function() {
                var a = this.settings.slicerSettings;
                return b.SVGUtil.convertToPixelString(this.currentViewport.width - (a.headerText.marginLeft + a.clear.width + a.clear.totalMargin));
            }, c.prototype.getRowHeight = function() {
                var a = this.settings.slicerSettings.slicerItemContainer;
                return a.height;
            }, c.clearTextKey = "Slicer_Clear", c.Container = {
                "class": "slicerContainer",
                selector: ".slicerContainer"
            }, c.Header = {
                "class": "slicerHeader",
                selector: ".slicerHeader"
            }, c.HeaderText = {
                "class": "headerText",
                selector: ".headerText"
            }, c.Body = {
                "class": "slicerBody",
                selector: ".slicerBody"
            }, c.ItemContainer = {
                "class": "slicerItemContainer",
                selector: ".slicerItemContainer"
            }, c.LabelText = {
                "class": "slicerText",
                selector: ".slicerText"
            }, c.Input = {
                "class": "slicerCheckbox",
                selector: ".slicerCheckbox"
            }, c.Clear = {
                "class": "clear",
                selector: ".clear"
            }, c.DefaultStyleProperties = {
                header: {
                    height: 22
                },
                headerText: {
                    marginLeft: 8,
                    marginTop: 0
                },
                slicerText: {
                    color: "#666666",
                    hoverColor: "#212121",
                    selectionColor: "#212121",
                    marginLeft: 8
                },
                slicerItemContainer: {
                    height: 24,
                    marginTop: 5,
                    marginLeft: 8
                },
                clear: {
                    width: 11,
                    totalMargin: 10
                }
            }, c;
        }();
        b.Slicer = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function a(a, b) {
                this.tableDataView = a, this.formatter = b;
            }
            return a.prototype.getDepth = function(a) {
                return 1;
            }, a.prototype.getLeafCount = function(a) {
                return a.length;
            }, a.prototype.getLeafAt = function(a, b) {
                return a[b];
            }, a.prototype.getParent = function(a) {
                return null;
            }, a.prototype.getIndex = function(a) {
                return this.isRow(a) ? a.index : this.getColumnIndex(a);
            }, a.prototype.isRow = function(a) {
                var b = a;
                return void 0 !== b.index && void 0 !== b.values;
            }, a.prototype.getColumnIndex = function(b) {
                return a.getIndex(this.tableDataView.columns, b);
            }, a.prototype.isLeaf = function(a) {
                return !0;
            }, a.prototype.isRowHierarchyLeaf = function(a) {
                return !1;
            }, a.prototype.isColumnHierarchyLeaf = function(a) {
                return !0;
            }, a.prototype.isLastItem = function(a, b) {
                return !1;
            }, a.prototype.getChildren = function(a) {
                return null;
            }, a.prototype.getCount = function(a) {
                return a.length;
            }, a.prototype.getAt = function(a, b) {
                return a[b];
            }, a.prototype.getLevel = function(a) {
                return 0;
            }, a.prototype.getIntersection = function(c, d) {
                var f, g = !1, h = !1, i = a.getIndex(this.tableDataView.columns, d), j = c;
                if (null != j.totalCells) g = !0, f = j.totalCells[i]; else {
                    var k = this.tableDataView.visualRows[this.tableDataView.visualRows.length - 1];
                    h = k === c, f = c.values[i];
                }
                var l = this.formatter(f, b.valueFormatter.getFormatString(d, e.formatStringProp));
                return {
                    value: l,
                    isMeasure: d.isMeasure,
                    isTotal: g,
                    isBottomMost: h,
                    showUrl: b.UrlHelper.isValidUrl(d, l)
                };
            }, a.prototype.getCorner = function(a, b) {
                return null;
            }, a.prototype.headerItemEquals = function(a, b) {
                return a === b;
            }, a.prototype.bodyCellItemEquals = function(a, b) {
                return a === b;
            }, a.prototype.cornerCellItemEquals = function(a, b) {
                return !0;
            }, a.prototype.update = function(a) {
                this.tableDataView = a;
            }, a.getIndex = function(a, b) {
                for (var c = 0, d = a.length; d > c; c++) {
                    var e = a[c];
                    if (null != e.index && null != b.index && e.index === b.index) return c;
                    if (b === a[c]) return c;
                }
                return -1;
            }, a;
        }();
        b.TableHierarchyNavigator = c;
        var d = function() {
            function a(a) {
                this.options = a;
            }
            return a.prototype.onStartRenderingSession = function() {}, a.prototype.onEndRenderingSession = function() {}, 
            a.prototype.bindRowHeader = function(a, b) {
                this.ensureHeight(a, b), this.options.onBindRowHeader && this.options.onBindRowHeader(a);
            }, a.prototype.unbindRowHeader = function(a, b) {}, a.prototype.bindColumnHeader = function(b, c) {
                var d = this;
                if (c.extension.setContainerStyle(a.columnHeaderClassName), c.extension.disableDragResize(), 
                c.extension.contentHost.textContent = b.displayName, this.options.onColumnHeaderClick) {
                    var e = function(a) {
                        d.options.onColumnHeaderClick(b.queryName ? b.queryName : b.displayName);
                    };
                    c.extension.registerClickHandler(e);
                }
            }, a.prototype.unbindColumnHeader = function(a, b) {
                b.extension.clearContainerStyle(), b.extension.contentHost.textContent = "", this.options.onColumnHeaderClick && b.extension.unregisterClickHandler();
            }, a.prototype.bindBodyCell = function(c, d) {
                c.showUrl ? b.controls.internal.TablixUtils.appendATagToBodyCell(c.value, d) : d.extension.contentHost.textContent = c.value;
                var e = c.isTotal ? a.footerClassName : c.isBottomMost ? a.lastRowClassName : a.rowClassName;
                c.isMeasure && (e += " " + a.numericCellClassName), d.extension.setContainerStyle(e);
            }, a.prototype.unbindBodyCell = function(a, b) {
                b.extension.clearContainerStyle(), b.extension.contentHost.textContent = "";
            }, a.prototype.bindCornerCell = function(a, b) {}, a.prototype.unbindCornerCell = function(a, b) {}, 
            a.prototype.bindEmptySpaceHeaderCell = function(a) {}, a.prototype.unbindEmptySpaceHeaderCell = function(a) {}, 
            a.prototype.bindEmptySpaceFooterCell = function(a) {}, a.prototype.unbindEmptySpaceFooterCell = function(a) {}, 
            a.prototype.getHeaderLabel = function(a) {
                return a.displayName;
            }, a.prototype.getCellContent = function(a) {
                return a;
            }, a.prototype.hasRowGroups = function() {
                return !1;
            }, a.prototype.ensureHeight = function(b, c) {
                if (b.values) {
                    var d = b.values.length;
                    if (0 !== d) {
                        for (var e = !0, f = 0; d > f; f++) if (b.values[f]) {
                            e = !1;
                            break;
                        }
                        e && (c.extension.contentHost.innerHTML = a.nonBreakingSpace);
                    }
                }
            }, a.columnHeaderClassName = "bi-table-column-header", a.rowClassName = "bi-table-row", 
            a.lastRowClassName = "bi-table-last-row", a.footerClassName = "bi-table-footer", 
            a.numericCellClassName = "bi-table-cell-numeric", a.nonBreakingSpace = "&nbsp;", 
            a;
        }();
        b.TableBinder = d;
        var e = function() {
            function e() {
                this.lastAllowHeaderResize = !0;
            }
            return e.customizeQuery = function(a) {
                var b = a.dataViewMappings[0];
                if (b && b.table && b.metadata) {
                    var c = b.table.rows, d = b.metadata.objects;
                    c["for"]["in"].subtotalType = e.shouldShowTotals(d) ? 1 : 0;
                }
            }, e.getSortableRoles = function() {
                return [ "Values" ];
            }, e.prototype.init = function(a) {
                this.element = a.element, this.style = a.style, this.updateViewport(a.viewport), 
                this.formatter = b.valueFormatter.formatRaw, this.isInteractive = a.interactivity && null != a.interactivity.selection, 
                this.getLocalizedString = a.host.getLocalizedString, this.hostServices = a.host;
            }, e.converter = function(b) {
                var c = a.Prototype.inherit(b);
                c.visualRows = [];
                for (var d = 0; d < b.rows.length; d++) {
                    var e = {
                        index: d,
                        values: b.rows[d]
                    };
                    c.visualRows.push(e);
                }
                return c;
            }, e.prototype.onResizing = function(a, b) {
                this.updateViewport(a);
            }, e.prototype.onDataChanged = function(a) {
                var b = a.dataViews;
                if (b && b.length > 0) if (this.dataView = b[0], 1 === a.operationKind) {
                    var c = e.converter(this.dataView.table);
                    this.hierarchyNavigator.update(c), this.tablixControl.updateModels(!1, c.visualRows), 
                    this.refreshControl(!1);
                } else this.updateInternal(this.dataView);
                this.waitingForData = !1;
            }, e.prototype.updateViewport = function(a) {
                this.currentViewport = a, this.tablixControl && (this.tablixControl.viewport = this.currentViewport, 
                this.verifyHeaderResize(), this.refreshControl(!1));
            }, e.prototype.refreshControl = function(a) {
                (this.element.visible() || 1 === this.getLayoutKind()) && this.tablixControl.refresh(a);
            }, e.prototype.getLayoutKind = function() {
                return this.isInteractive ? 0 : 1;
            }, e.prototype.createControl = function(a) {
                var c = this, e = this.getLayoutKind(), f = {
                    onBindRowHeader: function(a) {
                        return c.onBindRowHeader(a);
                    },
                    onColumnHeaderClick: function(a) {
                        return c.onColumnHeaderClick(a);
                    }
                }, g = new d(f), h = 1 === e ? b.controls.internal.DashboardTablixLayoutManager.createLayoutManager(g) : b.controls.internal.CanvasTablixLayoutManager.createLayoutManager(g), i = document.createElement("div");
                i.className = "tablixContainer", this.element.append(i);
                var j = {
                    interactive: this.isInteractive,
                    enableTouchSupport: !1,
                    layoutKind: e
                };
                return new b.controls.TablixControl(a, h, g, i, j);
            }, e.prototype.updateInternal = function(a) {
                var b = this, d = e.converter(a.table);
                if (this.tablixControl) this.hierarchyNavigator.update(d); else {
                    var f = new c(d, this.formatter);
                    this.hierarchyNavigator = f, this.tablixControl = this.createControl(f);
                }
                this.verifyHeaderResize(), this.tablixControl.updateModels(!0, d.visualRows, d.columns);
                var g = this.createTotalsRow(a);
                this.tablixControl.rowDimension.setFooter(g), this.tablixControl.viewport = this.currentViewport, 
                setTimeout(function() {
                    b.refreshControl(!0);
                }, 0);
            }, e.prototype.createTotalsRow = function(a) {
                if (!this.shouldShowTotals(a)) return null;
                var b = a.table.totals;
                if (!b || 0 === b.length) return null;
                for (var c = [], d = a.table.columns, e = 0, f = d.length; f > e; ++e) {
                    var g = d[e], h = b[g.index];
                    null != h ? c.push(h) : c.push(0 === e ? this.getLocalizedString("TableTotalLabel") : "");
                }
                return {
                    totalCells: c
                };
            }, e.prototype.shouldShowTotals = function(a) {
                var b = a.metadata.objects;
                return e.shouldShowTotals(b);
            }, e.shouldShowTotals = function(a) {
                return a && a.general ? a.general.totals !== !1 : !0;
            }, e.prototype.onBindRowHeader = function(a) {
                this.needsMoreData(a) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, e.prototype.onColumnHeaderClick = function(a) {
                var b = [ {
                    queryName: a
                } ], c = {
                    sortDescriptors: b
                };
                this.hostServices.onCustomSort(c);
            }, e.prototype.needsMoreData = function(a) {
                if (this.waitingForData || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var b = this.tablixControl.rowDimension.getItemsCount(), c = b * e.preferredLoadMoreThreshold;
                return this.hierarchyNavigator.getIndex(a) >= c;
            }, e.prototype.enumerateObjectInstances = function(a) {
                var b = [];
                return this.dataView && "general" === a.objectName && b.push({
                    selector: null,
                    properties: {
                        totals: this.shouldShowTotals(this.dataView)
                    },
                    objectName: a.objectName
                }), b;
            }, e.prototype.shouldAllowHeaderResize = function() {
                return 1 === this.hostServices.getViewMode();
            }, e.prototype.verifyHeaderResize = function() {
                var a = this.shouldAllowHeaderResize();
                a !== this.lastAllowHeaderResize && (this.lastAllowHeaderResize = a, this.tablixControl.layoutManager.setAllowHeaderResize(a));
            }, e.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, e.preferredLoadMoreThreshold = .8, e.capabilities = {
                dataRoles: [ {
                    name: "Values",
                    kind: 2
                } ],
                objects: {
                    general: {
                        displayName: a.data.createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            },
                            totals: {
                                type: {
                                    bool: !0
                                },
                                displayName: a.data.createDisplayNameGetter("Visual_Totals")
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    table: {
                        rows: {
                            "for": {
                                "in": "Values"
                            },
                            dataReductionAlgorithm: {
                                window: {
                                    count: 100
                                }
                            }
                        },
                        rowCount: {
                            preferred: {
                                min: 1
                            }
                        }
                    }
                } ],
                sorting: {
                    custom: {}
                },
                suppressDefaultTitle: !0
            }, e;
        }();
        b.Table = e;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        function c(a, b) {
            return new e(a, b);
        }
        var d = {
            rows: "Rows",
            columns: "Columns",
            values: "Values"
        };
        b.createMatrixHierarchyNavigator = c;
        var e = function() {
            function c(a, b) {
                this.matrix = a, this.rowHierarchy = c.wrapMatrixHierarchy(a.rows), this.columnHierarchy = c.wrapMatrixHierarchy(a.columns), 
                this.formatter = b, this.update();
            }
            return c.prototype.getDataViewMatrix = function() {
                return this.matrix;
            }, c.prototype.getDepth = function(a) {
                var b = this.getMatrixHierarchy(a);
                return b ? Math.max(b.levels.length, 1) : 0;
            }, c.prototype.getLeafCount = function(a) {
                var b = this.getMatrixHierarchy(a);
                return b ? b.leafNodes.length : 0;
            }, c.prototype.getLeafAt = function(a, b) {
                var c = this.getMatrixHierarchy(a);
                return c ? c.leafNodes[b] : null;
            }, c.prototype.getLeafIndex = function(a) {
                return a.leafIndex;
            }, c.prototype.getParent = function(a) {
                return 0 === a.level ? null : a.parent;
            }, c.prototype.getIndex = function(a) {
                return a.index;
            }, c.prototype.isLeaf = function(a) {
                return !a.children || 0 === a.children.length;
            }, c.prototype.isRowHierarchyLeaf = function(a) {
                return !0;
            }, c.prototype.isColumnHierarchyLeaf = function(a) {
                return !1;
            }, c.prototype.isLastItem = function(a, b) {
                return b[b.length - 1] === a;
            }, c.prototype.getChildren = function(a) {
                return a.children;
            }, c.prototype.getCount = function(a) {
                return a.length;
            }, c.prototype.getAt = function(a, b) {
                return a[b];
            }, c.prototype.getLevel = function(a) {
                return a.level;
            }, c.prototype.getIntersection = function(a, c) {
                var d = a.isSubtotal === !0 || c.isSubtotal === !0;
                if (!a.values) return {
                    content: "",
                    isSubtotal: d
                };
                var e = a.values[c.leafIndex];
                if (!e) return {
                    content: "",
                    isSubtotal: d
                };
                var f = b.valueFormatter.getFormatString(this.matrix.valueSources[e.valueSourceIndex ? e.valueSourceIndex : 0], g.formatStringProp), h = this.formatter(e.value, f);
                return {
                    content: h,
                    isSubtotal: d
                };
            }, c.prototype.getCorner = function(a, b) {
                var c = this.columnHierarchy.levels, d = this.rowHierarchy.levels;
                if (b === c.length - 1 || 0 === c.length) {
                    var e = d[a];
                    if (e) return {
                        metadata: e.sources[0],
                        isColumnHeaderLeaf: !0,
                        isRowHeaderLeaf: a === d.length - 1
                    };
                }
                if (a === d.length - 1) {
                    var e = c[b];
                    if (e) return {
                        metadata: e.sources[0],
                        isColumnHeaderLeaf: !1,
                        isRowHeaderLeaf: !0
                    };
                }
                return {
                    metadata: null,
                    isColumnHeaderLeaf: !1,
                    isRowHeaderLeaf: !1
                };
            }, c.prototype.headerItemEquals = function(a, b) {
                return a === b;
            }, c.prototype.bodyCellItemEquals = function(a, b) {
                return a === b;
            }, c.prototype.cornerCellItemEquals = function(a, b) {
                return a === b;
            }, c.prototype.update = function(a) {
                a && (this.matrix = a, this.rowHierarchy = c.wrapMatrixHierarchy(a.rows), this.columnHierarchy = c.wrapMatrixHierarchy(a.columns)), 
                this.updateHierarchy(this.rowHierarchy), this.updateHierarchy(this.columnHierarchy), 
                c.updateStaticColumnHeaders(this.columnHierarchy);
            }, c.prototype.updateRows = function() {
                this.updateHierarchy(this.rowHierarchy);
            }, c.wrapMatrixHierarchy = function(b) {
                var c = a.Prototype.inherit(b);
                return c.leafNodes = [], c;
            }, c.prototype.updateHierarchy = function(a) {
                a.leafNodes.length > 0 && (a.leafNodes.length = 0), a.root.children && this.updateRecursive(a, a.root.children, null, a.leafNodes);
            }, c.prototype.updateRecursive = function(a, c, d, e) {
                for (var f, h = 0, i = c.length; i > h; h++) {
                    var j = c[h];
                    if (d && (j.parent = d), f || (f = a.levels[j.level]), f) {
                        var k = f.sources[j.levelSourceIndex ? j.levelSourceIndex : 0], l = b.valueFormatter.getFormatString(k, g.formatStringProp);
                        l && (j.name = this.formatter(j.value, l));
                    }
                    j.index = h, j.children && j.children.length > 0 ? this.updateRecursive(a, j.children, j, e) : (j.leafIndex = e.length, 
                    e.push(j));
                }
            }, c.updateStaticColumnHeaders = function(a) {
                var b = a.leafNodes;
                if (b && b.length > 0) for (var c = a.levels[b[0].level].sources, d = 0, e = b.length; e > d; d++) {
                    var f = b[d];
                    if (!f.identity && void 0 === f.value) {
                        var g = c[f.levelSourceIndex ? f.levelSourceIndex : 0];
                        g && (f.name = g.displayName);
                    }
                }
            }, c.prototype.getMatrixHierarchy = function(a) {
                var b = this.rowHierarchy.root.children;
                if (b && a === b) return this.rowHierarchy;
                var c = this.columnHierarchy.root.children;
                return c && a === c ? this.columnHierarchy : null;
            }, c;
        }(), f = function() {
            function a(a, b) {
                this.hierarchyNavigator = a, this.options = b;
            }
            return a.prototype.onStartRenderingSession = function() {}, a.prototype.onEndRenderingSession = function() {}, 
            a.prototype.bindRowHeader = function(b, c) {
                var d, e = this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(b);
                d = e ? b.identity ? a.rowHeaderLeafClassName : a.rowHeaderStaticLeafClassName : a.headerClassName, 
                b.isSubtotal && (d += " " + a.totalClassName), c.extension.setContainerStyle(d), 
                this.bindHeader(b, c, this.getRowHeaderMetadata(b)), this.options.onBindRowHeader && this.options.onBindRowHeader(b);
            }, a.prototype.unbindRowHeader = function(a, c) {
                c.extension.clearContainerStyle(), b.controls.HTMLElementUtils.clearChildren(c.extension.contentHost);
            }, a.prototype.bindColumnHeader = function(b, c) {
                var d, e = !1, f = this.hierarchyNavigator && this.hierarchyNavigator.isLeaf(b);
                if (f) {
                    d = a.columnHeaderLeafClassName;
                    var g = this.getSortableHeaderColumnMetadata(b);
                    g && this.registerColumnHeaderClickHandler(g, c), b.isSubtotal && b.parent && b.parent.children.length > 1 && b.parent.children[0].isSubtotal && (e = !0);
                } else d = a.headerClassName;
                b.isSubtotal && (d += " " + a.totalClassName), c.extension.setContainerStyle(d), 
                c.extension.disableDragResize(), this.bindHeader(b, c, this.getColumnHeaderMetadata(b), e);
            }, a.prototype.unbindColumnHeader = function(a, b) {
                b.extension.clearContainerStyle(), b.extension.contentHost.textContent = "";
                var c = this.getSortableHeaderColumnMetadata(a);
                c && this.unregisterColumnHeaderClickHandler(b);
            }, a.prototype.bindBodyCell = function(b, c) {
                var d = a.bodyCellClassName;
                b.isSubtotal && (d += " " + a.totalClassName), c.extension.setContainerStyle(d), 
                c.extension.contentHost.textContent = b.content;
            }, a.prototype.unbindBodyCell = function(a, b) {
                b.extension.clearContainerStyle(), b.extension.contentHost.textContent = "";
            }, a.prototype.registerColumnHeaderClickHandler = function(a, b) {
                var c = this;
                if (this.options.onColumnHeaderClick) {
                    var d = function(b) {
                        c.options.onColumnHeaderClick(a.queryName ? a.queryName : a.displayName);
                    };
                    b.extension.registerClickHandler(d);
                }
            }, a.prototype.unregisterColumnHeaderClickHandler = function(a) {
                this.options.onColumnHeaderClick && a.extension.unregisterClickHandler();
            }, a.prototype.bindCornerCell = function(b, c) {
                var d;
                if (b.isColumnHeaderLeaf) {
                    d = a.columnHeaderLeafClassName;
                    var e = this.getSortableCornerColumnMetadata(b);
                    e && this.registerColumnHeaderClickHandler(e, c);
                }
                b.isRowHeaderLeaf && (d ? d += " " : d = "", d += a.rowHeaderLeafClassName), d ? c.extension.setContainerStyle(d) : c.extension.setContainerStyle(a.headerClassName), 
                c.extension.disableDragResize(), c.extension.contentHost.textContent = b.metadata ? b.metadata.displayName : "";
            }, a.prototype.unbindCornerCell = function(a, b) {
                b.extension.clearContainerStyle(), b.extension.contentHost.textContent = "", a.isColumnHeaderLeaf && this.unregisterColumnHeaderClickHandler(b);
            }, a.prototype.bindEmptySpaceHeaderCell = function(a) {}, a.prototype.unbindEmptySpaceHeaderCell = function(a) {}, 
            a.prototype.bindEmptySpaceFooterCell = function(a) {}, a.prototype.unbindEmptySpaceFooterCell = function(a) {}, 
            a.prototype.getHeaderLabel = function(b) {
                return a.getNodeLabel(b);
            }, a.prototype.getCellContent = function(a) {
                return a.content;
            }, a.prototype.hasRowGroups = function() {
                var a = this.hierarchyNavigator.getDataViewMatrix();
                return a && a.rows && a.rows.levels && 0 !== a.rows.levels.length ? !0 : !1;
            }, a.getNodeLabel = function(a) {
                return a.name ? a.name : null != a.value ? a.value.toString() : "";
            }, a.prototype.bindHeader = function(c, d, e, f) {
                if (c.isSubtotal && !f) return void (d.extension.contentHost.textContent = this.options.totalLabel);
                var g = a.getNodeLabel(c);
                return g ? void (e && b.UrlHelper.isValidUrl(e, g) ? b.controls.internal.TablixUtils.appendATagToBodyCell(c.value, d) : d.extension.contentHost.textContent = g) : void (d.extension.contentHost.innerHTML = a.nonBreakingSpace);
            }, a.prototype.getSortableCornerColumnMetadata = function(a) {
                return a.isColumnHeaderLeaf ? a.metadata : null;
            }, a.prototype.getRowHeaderMetadata = function(a) {
                if (this.hierarchyNavigator && a) {
                    var b = this.hierarchyNavigator.getDataViewMatrix();
                    if (b && b.rows) return this.getHierarchyMetadata(b.rows, a.level);
                }
            }, a.prototype.getColumnHeaderMetadata = function(a) {
                if (this.hierarchyNavigator && a) {
                    var b = this.hierarchyNavigator.getDataViewMatrix();
                    if (b && b.columns) return this.getHierarchyMetadata(b.columns, a.level);
                }
            }, a.prototype.getHierarchyMetadata = function(a, b) {
                if (a && a.levels && !(a.levels.length < b)) {
                    var c = a.levels[b];
                    if (c && c.sources && 0 !== c.sources.length) return c.sources[0];
                }
            }, a.prototype.getSortableHeaderColumnMetadata = function(a) {
                var b = this.hierarchyNavigator.getDataViewMatrix();
                if (!b.rows || !b.rows.levels || 0 === b.rows.levels.length) return null;
                var c = b.columns ? b.columns.levels.length - 1 : 0, d = -1;
                if (0 === c) d = a.levelSourceIndex; else if (a.isSubtotal) {
                    var e = b.valueSources && b.valueSources.length > 1;
                    e ? a.parent && 0 === a.parent.level && (d = a.levelSourceIndex) : 0 === a.level && (d = a.levelSourceIndex);
                }
                return -1 !== d ? (d = d ? d : 0, b.valueSources[d]) : null;
            }, a.headerClassName = "bi-tablix-header", a.columnHeaderLeafClassName = "bi-tablix-column-header-leaf", 
            a.rowHeaderLeafClassName = "bi-tablix-row-header-leaf", a.rowHeaderStaticLeafClassName = "bi-tablix-row-header-static-leaf", 
            a.bodyCellClassName = "bi-matrix-body-cell", a.totalClassName = "total", a.nonBreakingSpace = "&nbsp;", 
            a;
        }();
        b.MatrixBinder = f;
        var g = function() {
            function e() {
                this.lastAllowHeaderResize = !0;
            }
            return e.customizeQuery = function(a) {
                var b = a.dataViewMappings[0];
                if (b && b.matrix && b.metadata) {
                    var c = b.matrix, d = b.metadata.objects;
                    c.rows["for"]["in"].subtotalType = e.shouldShowRowSubtotals(d) ? 2 : 0, c.columns["for"]["in"].subtotalType = e.shouldShowColumnSubtotals(d) ? 2 : 0;
                }
            }, e.getSortableRoles = function() {
                return [ "Rows", "Values" ];
            }, e.prototype.init = function(a) {
                this.element = a.element, this.style = a.style, this.updateViewport(a.viewport), 
                this.formatter = b.valueFormatter.formatRaw, this.isInteractive = a.interactivity && null != a.interactivity.selection, 
                this.hostServices = a.host;
            }, e.prototype.onResizing = function(a, b) {
                this.updateViewport(a);
            }, e.prototype.onDataChanged = function(a) {
                a.dataViews && a.dataViews.length > 0 && (this.dataView = a.dataViews[0], 1 === a.operationKind ? (this.hierarchyNavigator.updateRows(), 
                this.refreshControl(!1)) : this.updateInternal()), this.waitingForData = !1;
            }, e.prototype.updateViewport = function(a) {
                this.currentViewport = a, this.tablixControl && (this.tablixControl.viewport = this.currentViewport, 
                this.verifyHeaderResize(), this.refreshControl(!1));
            }, e.prototype.refreshControl = function(a) {
                (this.element.visible() || 1 === this.getLayoutKind()) && this.tablixControl.refresh(a);
            }, e.prototype.getLayoutKind = function() {
                return this.isInteractive ? 0 : 1;
            }, e.prototype.createControl = function(a) {
                var c = this, d = this.getLayoutKind(), g = {
                    onBindRowHeader: function(a) {
                        c.onBindRowHeader(a);
                    },
                    totalLabel: this.hostServices.getLocalizedString(e.TotalLabel),
                    onColumnHeaderClick: function(a) {
                        return c.onColumnHeaderClick(a);
                    }
                }, h = new f(this.hierarchyNavigator, g), i = 1 === d ? b.controls.internal.DashboardTablixLayoutManager.createLayoutManager(h) : b.controls.internal.CanvasTablixLayoutManager.createLayoutManager(h), j = document.createElement("div");
                j.className = "tablixContainer", this.element.append(j);
                var k = {
                    interactive: this.isInteractive,
                    enableTouchSupport: !1
                };
                return new b.controls.TablixControl(a, i, h, j, k);
            }, e.prototype.updateInternal = function() {
                var a = this, b = this.dataView;
                if (this.tablixControl) this.hierarchyNavigator.update(b.matrix); else {
                    var d = c(b.matrix, this.formatter);
                    this.hierarchyNavigator = d, this.tablixControl = this.createControl(d);
                }
                this.verifyHeaderResize(), this.tablixControl.updateModels(!0, b.matrix.rows.root.children, b.matrix.columns.root.children), 
                this.tablixControl.viewport = this.currentViewport, setTimeout(function() {
                    a.refreshControl(!0);
                }, 0);
            }, e.prototype.onBindRowHeader = function(a) {
                this.needsMoreData(a) && (this.hostServices.loadMoreData(), this.waitingForData = !0);
            }, e.prototype.onColumnHeaderClick = function(a) {
                var b = [ {
                    queryName: a
                } ], c = {
                    sortDescriptors: b
                };
                this.hostServices.onCustomSort(c);
            }, e.prototype.needsMoreData = function(a) {
                if (this.waitingForData || !this.hierarchyNavigator.isLeaf(a) || !this.dataView.metadata || !this.dataView.metadata.segment) return !1;
                var b = this.tablixControl.rowDimension.getItemsCount(), c = b * e.preferredLoadMoreThreshold;
                return this.hierarchyNavigator.getLeafIndex(a) >= c;
            }, e.shouldShowRowSubtotals = function(a) {
                return a && a.general ? a.general.rowSubtotals !== !1 : !0;
            }, e.shouldShowColumnSubtotals = function(a) {
                return a && a.general ? a.general.columnSubtotals !== !1 : !0;
            }, e.prototype.getMatrixDataViewObjects = function() {
                return this.dataView && this.dataView.metadata && this.dataView.metadata.objects ? this.dataView.metadata.objects : void 0;
            }, e.prototype.enumerateObjectInstances = function(a) {
                var b = [];
                if ("general" === a.objectName) {
                    var c = this.getMatrixDataViewObjects();
                    b.push({
                        selector: null,
                        properties: {
                            rowSubtotals: e.shouldShowRowSubtotals(c),
                            columnSubtotals: e.shouldShowColumnSubtotals(c)
                        },
                        objectName: a.objectName
                    });
                }
                return b;
            }, e.prototype.shouldAllowHeaderResize = function() {
                return 1 === this.hostServices.getViewMode();
            }, e.prototype.verifyHeaderResize = function() {
                var a = this.shouldAllowHeaderResize();
                a !== this.lastAllowHeaderResize && (this.lastAllowHeaderResize = a, this.tablixControl.layoutManager.setAllowHeaderResize(a));
            }, e.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, e.preferredLoadMoreThreshold = .8, e.TotalLabel = "TableTotalLabel", e.capabilities = {
                dataRoles: [ {
                    name: d.rows,
                    kind: 0
                }, {
                    name: d.columns,
                    kind: 0
                }, {
                    name: d.values,
                    kind: 1
                } ],
                objects: {
                    general: {
                        displayName: a.data.createDisplayNameGetter("Visual_General"),
                        properties: {
                            formatString: {
                                type: {
                                    formatting: {
                                        formatString: !0
                                    }
                                }
                            },
                            rowSubtotals: {
                                type: {
                                    bool: !0
                                },
                                displayName: a.data.createDisplayNameGetter("Visual_RowTotals")
                            },
                            columnSubtotals: {
                                type: {
                                    bool: !0
                                },
                                displayName: a.data.createDisplayNameGetter("Visual_ColumnTotals")
                            }
                        }
                    }
                },
                dataViewMappings: [ {
                    conditions: [ {
                        Rows: {
                            max: 0
                        },
                        Columns: {
                            max: 0
                        },
                        Values: {
                            min: 1
                        }
                    }, {
                        Rows: {
                            min: 1
                        },
                        Columns: {
                            min: 0
                        },
                        Values: {
                            min: 0
                        }
                    }, {
                        Rows: {
                            min: 0
                        },
                        Columns: {
                            min: 1
                        },
                        Values: {
                            min: 0
                        }
                    } ],
                    matrix: {
                        rows: {
                            "for": {
                                "in": "Rows"
                            },
                            dataReductionAlgorithm: {
                                window: {
                                    count: 100
                                }
                            }
                        },
                        columns: {
                            "for": {
                                "in": "Columns"
                            },
                            dataReductionAlgorithm: {
                                top: {
                                    count: 100
                                }
                            }
                        },
                        values: {
                            "for": {
                                "in": "Values"
                            }
                        }
                    }
                } ],
                filterMappings: {
                    measureFilter: {
                        targetRoles: [ d.rows ]
                    }
                },
                sorting: {
                    custom: {}
                },
                suppressDefaultTitle: !0
            }, e;
        }();
        b.Matrix = g;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a() {}
            return a.translateFontFamily = function(a) {
                return "Heading" === a ? "Segoe UI Light" : a;
            }, a.prototype.init = function(a) {
                this.element = a.element;
            }, a.prototype.onResizing = function(a, b) {}, a.prototype.onDataChanged = function(b) {
                this.element.empty();
                var c = b.dataViews;
                if (c && 0 !== c.length) {
                    var d = c[0].metadata.objects;
                    if (d && d.general) {
                        var e = d.general.paragraphs;
                        if (e) {
                            for (var f = $("<div class='textbox'></div>"), g = 0, h = e.length; h > g; ++g) {
                                var i = e[g], j = $("<div />");
                                i.horizontalTextAlignment && j.css("textAlign", i.horizontalTextAlignment);
                                for (var k = 0, l = i.textRuns.length; l > k; ++k) {
                                    var m = i.textRuns[k], n = $("<span/>"), o = m.textStyle;
                                    o && (o.fontFamily && n.css("fontFamily", a.translateFontFamily(o.fontFamily)), 
                                    o.fontSize && n.css("fontSize", o.fontSize), o.fontStyle && n.css("fontStyle", o.fontStyle), 
                                    o.fontWeight && n.css("fontWeight", o.fontWeight), o.textDecoration && n.css("textDecoration", o.textDecoration)), 
                                    n.text(m.value), n.appendTo(j);
                                }
                                j.appendTo(f);
                            }
                            f.appendTo(this.element);
                        }
                    }
                }
            }, a.capabilities = {
                objects: {
                    general: {
                        properties: {
                            paragraphs: {
                                type: {}
                            }
                        }
                    }
                },
                suppressDefaultTitle: !0
            }, a;
        }();
        a.Textbox = b;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.treemapCapabilities = {
            dataRoles: [ {
                name: "Group",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Group")
            }, {
                name: "Details",
                kind: 0,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Details")
            }, {
                name: "Values",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Values")
            }, {
                name: "Gradient",
                kind: 1,
                displayName: a.data.createDisplayNameGetter("Role_DisplayName_Gradient")
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                dataPoint: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPoint"),
                    properties: {
                        fill: {
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        fillRule: {
                            displayName: a.data.createDisplayNameGetter("Visual_Gradient"),
                            type: {
                                fillRule: {}
                            },
                            rule: {
                                inputRole: "Gradient",
                                output: {
                                    property: "fill",
                                    selector: [ "Group" ]
                                }
                            }
                        }
                    }
                },
                labels: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0,
                                mainShow: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Group: {
                        max: 1
                    },
                    Details: {
                        max: 0
                    },
                    Gradient: {
                        max: 1
                    }
                }, {
                    Group: {
                        max: 1
                    },
                    Details: {
                        min: 1,
                        max: 1
                    },
                    Values: {
                        max: 1
                    },
                    Gradient: {
                        max: 0
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Group"
                        },
                        dataReductionAlgorithm: {
                            top: {}
                        }
                    },
                    values: {
                        group: {
                            by: "Details",
                            select: [ {
                                bind: {
                                    to: "Values"
                                }
                            }, {
                                bind: {
                                    to: "Gradient"
                                }
                            } ],
                            dataReductionAlgorithm: {
                                top: {}
                            }
                        }
                    },
                    rowCount: {
                        preferred: {
                            min: 2
                        }
                    }
                }
            } ],
            supportsHighlight: !0,
            sorting: {
                custom: {},
                implicit: {
                    clauses: [ {
                        role: "Values",
                        direction: 2
                    } ]
                }
            }
        }, b.treemapProps = {
            general: {
                formatString: {
                    objectName: "general",
                    propertyName: "formatString"
                }
            },
            dataPoint: {
                fill: {
                    objectName: "dataPoint",
                    propertyName: "fill"
                }
            },
            legend: {
                show: {
                    objectName: "legend",
                    propertyName: "show"
                },
                position: {
                    objectName: "legend",
                    propertyName: "position"
                },
                showTitle: {
                    objectName: "legend",
                    propertyName: "showTitle"
                },
                titleText: {
                    objectName: "legend",
                    propertyName: "titleText"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = jsCommon.CssConstants, d = jsCommon.StringExtensions, e = function() {
            function e(a) {
                a && a.animator && (this.animator = a.animator, this.isScrollable = a.isScrollable ? a.isScrollable : !1);
            }
            return e.prototype.init = function(a) {
                this.options = a;
                var c = a.element;
                c.empty(), this.svg = d3.select(c.get(0)).append("svg").style("position", "absolute").classed(e.ClassName, !0), 
                this.shapeGraphicsContext = this.svg.append("g").classed(e.ShapesClassName, !0), 
                this.labelGraphicsContext = this.svg.append("g").classed(e.LabelsClassName, !0), 
                this.element = c, this.currentViewport = {
                    height: a.viewport.height,
                    width: a.viewport.width
                }, this.style = a.style, this.treemap = d3.layout.treemap().sticky(!1).sort(function(a, b) {
                    return a.size - b.size;
                }).value(function(a) {
                    return a.size;
                }).round(!1), this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.legend = b.createLegend(c, a.interactivity && a.interactivity.isInteractiveLegend, this.interactivityService, this.isScrollable), 
                this.colors = this.style.colorPalette.dataColors, this.hostService = a.host;
            }, e.converter = function(a, c, d, f, g) {
                var h, i = {
                    key: "root",
                    name: "root",
                    children: [],
                    selected: !1,
                    highlightMultiplier: 0,
                    identity: b.SelectionId.createNull(),
                    color: void 0
                }, j = [], k = [], l = "", m = {
                    title: l,
                    dataPoints: k
                }, n = new b.ColorHelper(c, b.treemapProps.dataPoint.fill);
                if (a && a.metadata && a.metadata.objects) {
                    var o = a.metadata.objects.labels;
                    o && (d.show = void 0 !== o.show ? o.show : d.show, d.labelColor = void 0 !== o.color ? o.color.solid.color : d.labelColor);
                }
                if (a && a.categorical && a.categorical.values) {
                    var p = a.categorical, q = p.values;
                    h = !!(q.length > 0 && q[0].highlights);
                    var r = b.treemapProps.general.formatString, s = e.getValuesFromCategoricalDataView(p, h), t = s.values, u = s.highlights;
                    s.highlightsOverflow && (h = !1, t = u);
                    var v = q.grouped(), w = v && v.length > 0 && v[0].values && v[0].values.length > 1, x = !!q.source;
                    if (null == p.categories && t) for (var y = 0, z = t[0].length; z > y; y++) {
                        var A = t[0][y];
                        if (e.checkValueForShape(A)) {
                            var B, C = q[y], D = b.converterHelper.getFormattedLegendLabel(C.source, q, r), E = x ? b.SelectionId.createWithId(q[y].identity) : b.SelectionId.createWithMeasure(q[y].source.queryName), F = E.getKey(), G = x ? n.getColorForSeriesValue(C.objects && C.objects[0], p.values.identityFields, b.converterHelper.getSeriesName(C.source)) : n.getColorForMeasure(C.source.objects, C.source.queryName), H = h && 0 !== X ? X : void 0, I = a.categorical, J = y, K = b.TooltipBuilder.createTooltipInfo(r, I.categories, D, I.values, A, null, J);
                            void 0 !== H && (B = b.TooltipBuilder.createTooltipInfo(r, I.categories, D, I.values, A, null, J, H));
                            var L = {
                                key: F,
                                name: D,
                                size: A,
                                color: G,
                                selected: !1,
                                identity: E,
                                tooltipInfo: K,
                                highlightedTooltipInfo: B
                            };
                            h && u && (L.highlightMultiplier = A ? u[0][y] / A : 0), i.children.push(L), j.push(L), 
                            k.push({
                                label: D,
                                color: G,
                                icon: 0,
                                identity: E,
                                selected: !1
                            });
                        }
                    } else if (p.categories && p.categories.length > 0) {
                        var M = p.categories[0], N = q.length;
                        l = M.source ? M.source.displayName : "";
                        for (var y = 0, z = t.length; z > y; y++) {
                            var B, O = M.identity ? M.identity[y] : void 0, E = O ? b.SelectionId.createWithId(O) : b.SelectionId.createNull(), F = E.getKey(), P = M.objects && M.objects[y], G = n.getColorForSeriesValue(P, M.identityFields, M.values[y]), Q = b.valueFormatter.format(M.values[y], b.valueFormatter.getFormatString(M.values[y], r)), A = t[y][0], H = h && u ? u[y][0] : void 0, I = a.categorical, K = b.TooltipBuilder.createTooltipInfo(r, I.categories, Q, I.values, A);
                            void 0 !== H && (B = b.TooltipBuilder.createTooltipInfo(r, I.categories, Q, I.values, A, null, 0, H));
                            var L = {
                                key: F,
                                name: Q,
                                color: G,
                                selected: !1,
                                identity: E,
                                tooltipInfo: K,
                                highlightedTooltipInfo: B
                            };
                            k.push({
                                label: Q,
                                color: G,
                                icon: 0,
                                identity: E,
                                selected: !1
                            });
                            for (var R = 0, S = 0, T = 1 === N && null == q[0].source.groupName, U = t[y], V = 0, W = U.length; W > V; V++) {
                                var X, C = q[V], A = U[V];
                                if (e.checkValueForShape(A) && (R += A, h && (X = u[y][V], S += X), !T)) {
                                    var Y = null, Z = {
                                        parentId: L.key,
                                        nodeId: void 0
                                    };
                                    w ? (Z.nodeId = {
                                        name: Y,
                                        index: V
                                    }, Y = C.source.displayName) : (Z.nodeId = C.identity.key, Y = C.source.groupName);
                                    var B, $ = b.SelectionId.createWithIdsAndMeasure(O, x ? C.identity : void 0, w ? C.source.queryName : void 0), H = h && 0 !== X ? X : void 0, I = a.categorical, K = b.TooltipBuilder.createTooltipInfo(r, I.categories, Q, I.values, A, null, V);
                                    void 0 !== H && (B = b.TooltipBuilder.createTooltipInfo(r, I.categories, Q, I.values, A, null, V, H));
                                    var _ = {
                                        key: $.getKey(),
                                        name: Y,
                                        size: A,
                                        color: G,
                                        selected: !1,
                                        identity: $,
                                        tooltipInfo: K,
                                        highlightedTooltipInfo: B
                                    };
                                    h && (_.highlightMultiplier = A ? X / A : 0), null == L.children && (L.children = []), 
                                    L.children.push(_), j.push(_);
                                }
                            }
                            e.checkValueForShape(R) && (L.size = R, i.children.push(L), j.push(L)), h && (L.highlightMultiplier = R ? S / R : 0);
                        }
                    }
                }
                return f && f.applySelectionStateToData(j), m = {
                    title: l,
                    dataPoints: k
                }, {
                    root: i,
                    hasHighlights: h,
                    legendData: m,
                    dataLabelsSettings: d,
                    legendObjectProperties: g
                };
            }, e.getValuesFromCategoricalDataView = function(a, b) {
                var c, d = a.values;
                d && null == a.categories ? c = 1 : d && a.categories && a.categories.length > 0 && (c = a.categories[0].values.length);
                for (var e = [], f = [], g = 0; c > g; g++) e.push([]), b && f.push([]);
                for (var h, i = 0; i < d.length; i++) for (var j = d[i], g = 0; c > g; g++) {
                    var k = j.values[g];
                    if (e[g].push(k), b) {
                        var l = j.highlights[g];
                        l || (l = 0), f[g].push(l), l > k && (h = !0);
                    }
                }
                return {
                    values: e,
                    highlights: b ? f : void 0,
                    highlightsOverflow: b ? h : void 0
                };
            }, e.prototype.update = function(a) {
                var c = this.dataViews = a.dataViews;
                this.currentViewport = a.viewport;
                var d = b.dataLabelUtils.getDefaultTreemapLabelSettings(), f = null;
                if (c && c.length > 0 && c[0].categorical) {
                    var g, h = c[0], i = h.metadata;
                    i && (g = i.objects), g && (f = g.legend), this.data = e.converter(h, this.colors, d, this.interactivityService, f);
                    var j = b.getInvalidValueWarnings(c, !1, !1, !1);
                    j && j.length > 0 && this.hostService.setWarnings(j);
                } else {
                    var k = {
                        key: "root",
                        name: "root",
                        children: [],
                        selected: !1,
                        highlightMultiplier: 0,
                        identity: b.SelectionId.createNull(),
                        color: void 0
                    }, l = {
                        title: "",
                        dataPoints: []
                    }, m = {
                        root: k,
                        hasHighlights: !1,
                        legendData: l,
                        dataLabelsSettings: d
                    };
                    this.data = m;
                }
                var n = null == a.duration ? this.animator ? b.AnimatorCommon.MinervaAnimationDuration : 0 : a.duration;
                this.updateInternal(!!n, n);
            }, e.prototype.onDataChanged = function(a) {
                this.update({
                    duration: a.duration || (this.animator ? b.AnimatorCommon.MinervaAnimationDuration : 0),
                    dataViews: a.dataViews,
                    viewport: this.currentViewport
                });
            }, e.prototype.onResizing = function(a, b) {
                this.update({
                    duration: b || 0,
                    dataViews: this.dataViews,
                    viewport: a
                });
            }, e.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, e.prototype.enumerateObjectInstances = function(a) {
                var c = this.data;
                if (c) {
                    var d = a.objectName;
                    switch (d) {
                      case "dataPoint":
                        var e = this.dataViews && this.dataViews.length > 0 && this.dataViews[0] && this.dataViews[0].categorical, f = b.GradientUtils.hasGradientRole(e);
                        if (!f) return this.enumerateDataPoints(c);
                        break;

                      case "legend":
                        return this.enumerateLegend(c);

                      case "labels":
                        return b.dataLabelUtils.enumerateDataLabels(this.data.dataLabelsSettings, !1);
                    }
                }
            }, e.prototype.enumerateDataPoints = function(a) {
                var b = a.root.children;
                if (!_.isEmpty(b)) {
                    for (var c = [], d = 0; d < b.length; d++) {
                        var e = b[d];
                        c.push({
                            displayName: e.name,
                            selector: e.identity.getSelector(),
                            properties: {
                                fill: {
                                    solid: {
                                        color: e.color
                                    }
                                }
                            },
                            objectName: "dataPoint"
                        });
                    }
                    return c;
                }
            }, e.prototype.enumerateLegend = function(c) {
                var d = {
                    legend: c.legendObjectProperties
                }, e = a.DataViewObjects.getValue(d, b.treemapProps.legend.show, this.legend.isVisible()), f = a.DataViewObjects.getValue(d, b.treemapProps.legend.showTitle, !0), g = a.DataViewObjects.getValue(d, b.treemapProps.legend.titleText, this.data.legendData.title);
                return [ {
                    selector: null,
                    objectName: "legend",
                    properties: {
                        show: e,
                        position: b.LegendPosition[this.legend.getOrientation()],
                        showTitle: f,
                        titleText: g
                    }
                } ];
            }, e.checkValueForShape = function(a) {
                return a ? a > 0 : !1;
            }, e.prototype.calculateTreemapSize = function() {
                var a = this.legend.getMargins();
                return {
                    height: this.currentViewport.height - a.height,
                    width: this.currentViewport.width - a.width
                };
            }, e.prototype.initViewportDependantProperties = function(a) {
                void 0 === a && (a = 0);
                var c = this.calculateTreemapSize();
                this.svg.attr({
                    width: c.width,
                    height: c.height
                }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, e.isMajorLabel = function(a) {
                return 1 === a.depth;
            }, e.hasChildrenWithIdentity = function(a) {
                var b = a.children;
                if (!b) return !1;
                var c = b.length;
                if (0 === c) return !1;
                for (var d = c - 1; d >= 0; d--) if (b[d].identity.hasIdentity()) return !0;
                return !1;
            }, e.canDisplayLabel = function(a) {
                if (a.depth < 1 || a.depth > 2) return !1;
                if (d.isNullOrEmpty(a.name)) return !1;
                var b = a.dx - 2 * e.TextMargin, c = e.isMajorLabel(a), f = c ? e.MinTextWidthForMajorLabel : e.MinTextWidthForMinorLabel;
                if (f > b) return !1;
                var g = c ? e.MajorLabelTextSize : e.MinorLabelTextSize, h = g + 2 * e.TextMargin;
                if (a.dy < h) return !1;
                if (2 === a.depth) {
                    var i = a.parent, j = Math.max(i.y + e.MajorLabelTextSize + 2 * e.TextMargin, a.y);
                    if (a.y + a.dy - j < h) return !1;
                }
                return !0;
            }, e.createLabelForShape = function(b) {
                var c = e.isMajorLabel(b) ? e.MajorLabelTextProperties : e.MinorLabelTextProperties, d = {
                    text: b.name,
                    fontFamily: c.fontFamily,
                    fontSize: c.fontSize
                };
                return a.TextMeasurementService.getTailoredTextOrDefault(d, b.dx - 2 * e.TextMargin);
            }, e.getFill = function(a, b) {
                return a.depth > 1 && !a.identity.hasIdentity() && !b ? c.noneValue : e.hasChildrenWithIdentity(a) ? c.noneValue : a.color;
            }, e.getFillOpacity = function(a, b, c, d) {
                return c ? d ? null : e.DimmedShapeOpacity.toString() : !b || a.selected ? null : a.depth > 1 && a.parent.selected ? null : e.hasChildrenWithIdentity(a) ? null : e.DimmedShapeOpacity.toString();
            }, e.prototype.updateInternal = function(a, c) {
                void 0 === a && (a = !0), void 0 === c && (c = 0);
                var d = this.data, f = d && d.hasHighlights, g = d ? d.dataLabelsSettings : null;
                this.options.interactivity && this.options.interactivity.isInteractiveLegend || !this.data || this.renderLegend(), 
                this.initViewportDependantProperties(c);
                var h = this.calculateTreemapSize();
                this.treemap.size([ h.width, h.height ]);
                var i, j, k, l, m = d && d.root ? this.treemap.nodes(d.root) : [], n = m.filter(function(a) {
                    return null != a.highlightMultiplier && (!a.children || 0 === a.children.length);
                }), o = g.show ? m.filter(function(a) {
                    return e.canDisplayLabel(a);
                }) : [];
                if (this.animator && a) {
                    var p = {
                        viewModel: d,
                        nodes: m,
                        highlightNodes: n,
                        labeledNodes: o,
                        shapeGraphicsContext: this.shapeGraphicsContext,
                        labelGraphicsContext: this.labelGraphicsContext,
                        interactivityService: this.interactivityService
                    };
                    l = this.animator.animate(p), i = l.shapes, j = l.highlightShapes, k = l.labels;
                }
                if (!this.animator || !a || l.failed) {
                    var q = m.some(function(a) {
                        return a.selected;
                    }), r = this.shapeGraphicsContext;
                    i = e.drawDefaultShapes(r, m, q, f), j = e.drawDefaultHighlightShapes(r, n, q, f), 
                    k = e.drawDefaultLabels(this.labelGraphicsContext, o, g);
                }
                if (this.interactivityService) {
                    var s = {
                        labels: k,
                        shapes: i,
                        highlightShapes: j,
                        nodes: m,
                        hasHighlights: d.hasHighlights
                    };
                    this.interactivityService.apply(this, s);
                }
                b.TooltipManager.addTooltip(i, function(a) {
                    return a.data.tooltipInfo;
                }), b.TooltipManager.addTooltip(j, function(a) {
                    return a.data.highlightedTooltipInfo;
                }), b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, e.prototype.renderLegend = function() {
                var a = this.data.legendObjectProperties;
                if (a) {
                    var c = this.data.legendData;
                    b.LegendData.update(c, a);
                    var d = a[b.legendProps.position];
                    d && this.legend.changeOrientation(b.LegendPosition[d]), this.legend.drawLegend(c, this.currentViewport);
                } else this.legend.changeOrientation(0), this.legend.drawLegend({
                    dataPoints: []
                }, this.currentViewport);
            }, e.prototype.accept = function(a, b) {
                a.visitTreemap(b);
            }, e.getNodeClass = function(a, b) {
                var c;
                switch (a.depth) {
                  case 1:
                    c = e.ParentGroupClassName;
                    break;

                  case 2:
                    c = e.NodeGroupClassName;
                    break;

                  case 0:
                    c = e.RootNodeClassName;
                }
                return c += " " + (b ? e.HighlightNodeClassName : e.TreemapNodeClassName);
            }, e.createTreemapShapeLayout = function(a) {
                return void 0 === a && (a = !1), {
                    x: function(a) {
                        return a.x;
                    },
                    y: function(b) {
                        return b.y + (a ? b.dy * (1 - b.highlightMultiplier) : 0);
                    },
                    width: function(a) {
                        return Math.max(0, a.dx);
                    },
                    height: function(b) {
                        return Math.max(0, b.dy * (a ? b.highlightMultiplier : 1));
                    }
                };
            }, e.createTreemapZeroShapeLayout = function() {
                return {
                    x: function(a) {
                        return a.x;
                    },
                    y: function(a) {
                        return a.y + a.dy;
                    },
                    width: function(a) {
                        return Math.max(0, a.dx);
                    },
                    height: function(a) {
                        return 0;
                    }
                };
            }, e.drawDefaultShapes = function(a, b, c, d) {
                var f = !1, g = a.selectAll("." + e.TreemapNodeClassName).data(b, function(a) {
                    return a.key;
                });
                return g.enter().append("rect").attr("class", e.layout.shapeClass), g.style("fill", function(a) {
                    return e.getFill(a, f);
                }).style("fill-opacity", function(a) {
                    return e.getFillOpacity(a, c, d, f);
                }).attr(e.layout.shapeLayout), g.exit().remove(), g;
            }, e.drawDefaultHighlightShapes = function(a, b, c, d) {
                var f = !0, g = a.selectAll("." + e.HighlightNodeClassName).data(b, function(a) {
                    return a.key + "highlight";
                });
                return g.enter().append("rect").attr("class", e.layout.highlightShapeClass), g.style("fill", function(a) {
                    return e.getFill(a, f);
                }).style("fill-opacity", function(a) {
                    return e.getFillOpacity(a, c, d, f);
                }).attr(e.layout.highlightShapeLayout), g.exit().remove(), g;
            }, e.drawDefaultLabels = function(a, b, c) {
                var d = a.selectAll("text").data(b, function(a) {
                    return a.key;
                });
                return d.enter().append("text").attr("class", e.layout.labelClass), d.attr(e.layout.labelLayout).text(e.layout.labelText).style("fill", function() {
                    return c.labelColor;
                }), d.exit().remove(), d;
            }, e.DimmedShapeOpacity = .4, e.ClassName = "treemap", e.LabelsClassName = "labels", 
            e.MajorLabelClassName = "majorLabel", e.MinorLabelClassName = "minorLabel", e.ShapesClassName = "shapes", 
            e.TreemapNodeClassName = "treemapNode", e.RootNodeClassName = "rootNode", e.ParentGroupClassName = "parentGroup", 
            e.NodeGroupClassName = "nodeGroup", e.HighlightNodeClassName = "treemapNodeHighlight", 
            e.TextMargin = 5, e.MinorLabelTextSize = 10, e.MinTextWidthForMinorLabel = 18, e.MinorLabelTextProperties = {
                fontFamily: "wf_segoe-ui_normal",
                fontSize: e.MinorLabelTextSize + "px"
            }, e.MajorLabelTextSize = 12, e.MinTextWidthForMajorLabel = 22, e.MajorLabelTextProperties = {
                fontFamily: "wf_segoe-ui_normal",
                fontSize: e.MajorLabelTextSize + "px"
            }, e.layout = {
                shapeClass: function(a) {
                    return e.getNodeClass(a, !1);
                },
                shapeLayout: e.createTreemapShapeLayout(!1),
                highlightShapeClass: function(a) {
                    return e.getNodeClass(a, !0);
                },
                highlightShapeLayout: e.createTreemapShapeLayout(!0),
                zeroShapeLayout: e.createTreemapZeroShapeLayout(),
                labelClass: function(a) {
                    return e.isMajorLabel(a) ? e.MajorLabelClassName : e.MinorLabelClassName;
                },
                labelLayout: {
                    x: function(a) {
                        return a.x + e.TextMargin;
                    },
                    y: function(a) {
                        return e.isMajorLabel(a) ? a.y + e.TextMargin + e.MajorLabelTextSize : a.y + a.dy - e.TextMargin;
                    }
                },
                labelText: function(a) {
                    return e.createLabelForShape(a);
                }
            }, e;
        }();
        b.Treemap = e;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function(c) {
            function d(a) {
                c.call(this, d.cardClassName), this.isScrollable = !1, a && a.isScrollable && (this.isScrollable = a.isScrollable);
            }
            return __extends(d, c), d.prototype.init = function(a) {
                this.animationOptions = a.animation;
                var b = this.convertSettings(a.settings);
                this.displayUnitSystemType = b && b.DisplayUnitSystemType ? b.DisplayUnitSystemType : 2;
                var c = a.element, e = this.svg = d3.select(c.get(0)).append("svg");
                this.graphicsContext = e.append("g"), this.currentViewport = a.viewport, this.hostServices = a.host, 
                this.style = a.style, this.updateViewportProperties(), this.isScrollable && (e.attr("class", d.cardClassName), 
                this.labelContext = e.append("g"));
            }, d.prototype.clear = function(a) {
                void 0 === a && (a = !1), this.svg.select(d.Value.selector).text(""), a || this.svg.select(d.Label.selector).text(""), 
                c.prototype.clear.call(this);
            }, d.prototype.convertSettings = function(b) {
                if (b && void 0 === b.version) {
                    var c = a.SettingsUtil.copyCommonSettings(b);
                    return c;
                }
                return b;
            }, d.prototype.onDataChanged = function(a) {
                var b, c = a.dataViews[0];
                c && (this.getMetaDataColumn(c), c.single && (b = c.single.value)), this.updateInternal(b, a.duration);
            }, d.prototype.onResizing = function(a, b) {
                this.currentViewport = a, this.updateViewportProperties(), this.updateInternal(this.value, b, !0);
            }, d.prototype.updateViewportProperties = function() {
                var a = this.currentViewport;
                this.svg.attr("width", a.width).attr("height", a.height);
            }, d.prototype.getAdjustedFontHeight = function(a, b, e) {
                var f = c.prototype.getAdjustedFontHeight.call(this, a, b, e);
                return Math.min(f, d.DefaultStyle.card.maxFontSize);
            }, d.prototype.updateInternal = function(a, c, e) {
                if (void 0 === c && (c = 0), void 0 === e && (e = !1), null == a) return void this.clear(!0);
                var f = this.value;
                if (this.isScrollable) {
                    var g, h = this.metaDataColumn, i = d.DefaultStyle.label, j = d.DefaultStyle.value, k = b.valueFormatter.create({
                        format: this.getFormatString(h),
                        value: a,
                        displayUnitSystemType: this.displayUnitSystemType,
                        formatSingleValues: !0,
                        allowFormatBeautification: !0
                    });
                    h && (g = h.displayName), null != a && (a = k.format(a));
                    var l = this.getTranslateX(this.currentViewport.width), m = (this.currentViewport.height - i.height - j.fontSize) / 2, n = this.graphicsContext.attr("transform", b.SVGUtil.translate(l, this.getTranslateY(j.fontSize + m))).selectAll("text").data([ a ]);
                    n.enter().append("text").attr("class", d.Value["class"]), n.text(function(a) {
                        return a;
                    }).style({
                        "font-size": j.fontSize + "px",
                        fill: j.color,
                        "font-family": j.fontFamily,
                        "text-anchor": this.getTextAnchor()
                    }), n.exit().remove();
                    var o = this.labelContext.attr("transform", b.SVGUtil.translate(l, this.getTranslateY(j.fontSize + i.height + m))).selectAll("text").data([ g ]);
                    o.enter().append("text").attr("class", d.Label["class"]), o.text(function(a) {
                        return a;
                    }).style({
                        "font-size": i.fontSize + "px",
                        fill: i.color,
                        "text-anchor": this.getTextAnchor()
                    }), o.exit().remove();
                } else this.doValueTransition(f, a, this.displayUnitSystemType, this.animationOptions, c, e);
                this.updateTooltip(a), this.value = a;
            }, d.prototype.updateTooltip = function(a) {
                this.toolTip || (this.toolTip = this.graphicsContext.append("svg:title")), this.toolTip.text(a);
            }, d.cardClassName = "card", d.Label = {
                "class": "label",
                selector: ".label"
            }, d.Value = {
                "class": "value",
                selector: ".value"
            }, d.DefaultStyle = {
                card: {
                    maxFontSize: 200
                },
                label: {
                    fontSize: 16,
                    color: "#a6a6a6",
                    height: 26
                },
                value: {
                    fontSize: 37,
                    color: "#333333",
                    fontFamily: "wf_segoe-ui_Semibold"
                }
            }, d.capabilities = {
                dataRoles: [ {
                    name: "Values",
                    kind: 1,
                    displayName: a.data.createDisplayNameGetter("Role_DisplayName_Fields")
                } ],
                objects: b.AnimatedText.objectDescs,
                dataViewMappings: [ {
                    conditions: [ {
                        Values: {
                            max: 1
                        }
                    } ],
                    single: {
                        role: "Values"
                    }
                } ],
                suppressDefaultTitle: !0
            }, d;
        }(b.AnimatedText);
        b.Card = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b = function() {
            function a() {}
            return Object.defineProperty(a.prototype, "code", {
                get: function() {
                    return "NoMapLocation";
                },
                enumerable: !0,
                configurable: !0
            }), a.prototype.getMessages = function(a) {
                var b = "NoMapLocationMessage", c = "NoMapLocationKey", d = "NoMapLocationValue", e = {
                    message: a.get(b),
                    title: a.get(c),
                    detail: a.get(d)
                };
                return e;
            }, a;
        }();
        a.NoMapLocationWarning = b;
        var c = function() {
            function a() {}
            return Object.defineProperty(a.prototype, "code", {
                get: function() {
                    return "SmallSlicesCulled";
                },
                enumerable: !0,
                configurable: !0
            }), a.prototype.getMessages = function(a) {
                var b = "DsrLimitWarning_TooMuchDataMessage", c = "", d = "", e = {
                    message: a.get(b),
                    title: a.get(c),
                    detail: a.get(d)
                };
                return e;
            }, a;
        }();
        a.SmallSlicesCulledWarning = c;
        var d = function() {
            function a() {}
            return Object.defineProperty(a.prototype, "code", {
                get: function() {
                    return "NaNNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), a.prototype.getMessages = function(a) {
                var b = "VisualWarning_InfinityValues", c = {
                    message: a.get(b),
                    title: "",
                    detail: ""
                };
                return c;
            }, a;
        }();
        a.NaNNotSupportedWarning = d;
        var e = function() {
            function a() {}
            return Object.defineProperty(a.prototype, "code", {
                get: function() {
                    return "InfinityValuesNotSupported";
                },
                enumerable: !0,
                configurable: !0
            }), a.prototype.getMessages = function(a) {
                var b = "VisualWarning_InfinityValues", c = {
                    message: a.get(b),
                    title: "",
                    detail: ""
                };
                return c;
            }, a;
        }();
        a.InfinityValuesNotSupportedWarning = e;
        var f = function() {
            function a() {}
            return Object.defineProperty(a.prototype, "code", {
                get: function() {
                    return "ValuesOutOfRange";
                },
                enumerable: !0,
                configurable: !0
            }), a.prototype.getMessages = function(a) {
                var b = "VisualWarning_VisualizationOutOfRange", c = {
                    message: a.get(b),
                    title: "",
                    detail: ""
                };
                return c;
            }, a;
        }();
        a.ValuesOutOfRangeWarning = f;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        b.waterfallChartCapabilities = {
            dataRoles: [ {
                name: "Category",
                kind: 0
            }, {
                name: "Y",
                kind: 1
            } ],
            objects: {
                general: {
                    displayName: a.data.createDisplayNameGetter("Visual_General"),
                    properties: {
                        formatString: {
                            type: {
                                formatting: {
                                    formatString: !0
                                }
                            }
                        }
                    }
                },
                legend: {
                    displayName: a.data.createDisplayNameGetter("Visual_Legend"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendPosition"),
                            type: {
                                formatting: {
                                    legendPosition: !0
                                }
                            }
                        },
                        showTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendShowTitle"),
                            type: {
                                bool: !0
                            }
                        },
                        titleText: {
                            displayName: a.data.createDisplayNameGetter("Visual_LegendTitleText"),
                            type: {
                                text: !0
                            }
                        }
                    }
                },
                labels: {
                    displayName: a.data.createDisplayNameGetter("Visual_DataPointsLabels"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        color: {
                            displayName: a.data.createDisplayNameGetter("Visual_LabelsFill"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        labelDisplayUnits: {
                            displayName: a.data.createDisplayNameGetter("Visual_DisplayUnits"),
                            type: {
                                formatting: {
                                    labelDisplayUnits: !0
                                }
                            }
                        },
                        labelPrecision: {
                            displayName: a.data.createDisplayNameGetter("Visual_Precision"),
                            type: {
                                numeric: !0
                            }
                        }
                    }
                },
                sentimentColors: {
                    displayName: a.data.createDisplayNameGetter("Waterfall_SentimentColors"),
                    properties: {
                        increaseFill: {
                            displayName: a.data.createDisplayNameGetter("Waterfall_IncreaseLabel"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        decreaseFill: {
                            displayName: a.data.createDisplayNameGetter("Waterfall_DecreaseLabel"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        },
                        totalFill: {
                            displayName: a.data.createDisplayNameGetter("Waterfall_TotalLabel"),
                            type: {
                                fill: {
                                    solid: {
                                        color: !0
                                    }
                                }
                            }
                        }
                    }
                },
                categoryAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_XAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                },
                valueAxis: {
                    displayName: a.data.createDisplayNameGetter("Visual_YAxis"),
                    properties: {
                        show: {
                            displayName: a.data.createDisplayNameGetter("Visual_Show"),
                            type: {
                                bool: !0
                            }
                        },
                        position: {
                            displayName: a.data.createDisplayNameGetter("Visual_YAxis_Position"),
                            type: {
                                formatting: {
                                    yAxisPosition: !0
                                }
                            }
                        },
                        start: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Start"),
                            type: {
                                numeric: !0
                            }
                        },
                        end: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_End"),
                            type: {
                                numeric: !0
                            }
                        },
                        showAxisTitle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Title"),
                            type: {
                                bool: !0
                            }
                        },
                        axisStyle: {
                            displayName: a.data.createDisplayNameGetter("Visual_Axis_Style"),
                            type: {
                                formatting: {
                                    axisStyle: !0
                                }
                            }
                        }
                    }
                }
            },
            dataViewMappings: [ {
                conditions: [ {
                    Category: {
                        max: 1
                    },
                    Y: {
                        max: 1
                    }
                } ],
                categorical: {
                    categories: {
                        "for": {
                            "in": "Category"
                        }
                    },
                    values: {
                        select: [ {
                            bind: {
                                to: "Y"
                            }
                        } ]
                    }
                }
            } ]
        }, b.waterfallChartProps = {
            sentimentColors: {
                increaseFill: {
                    objectName: "sentimentColors",
                    propertyName: "increaseFill"
                },
                decreaseFill: {
                    objectName: "sentimentColors",
                    propertyName: "decreaseFill"
                },
                totalFill: {
                    objectName: "sentimentColors",
                    propertyName: "totalFill"
                }
            }
        };
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c = function() {
            function c(a) {
                this.isScrollable = a.isScrollable;
            }
            return c.prototype.init = function(a) {
                this.svg = a.svg, this.clearCatcher = this.svg.select(".clearCatcher"), this.style = a.style, 
                this.currentViewport = a.viewport, this.hostServices = a.host, this.interactivityService = b.VisualInteractivityFactory.buildInteractivityService(a), 
                this.interactivity = a.interactivity, this.cartesianVisualHost = a.cartesianHost, 
                this.options = a, this.element = a.element, this.colors = this.style.colorPalette.dataColors, 
                this.element.addClass(c.WaterfallClassName), this.mainGraphicsSVG = this.svg.append("svg"), 
                this.mainGraphicsContext = this.mainGraphicsSVG.append("g").classed(c.MainGraphicsContextClassName, !0), 
                this.dataLabelsSVG = this.svg.append("g").classed(c.DataLabelsSVGClassName, !0);
            }, c.converter = function(a, d, e, f, g, h, i) {
                var j = c.formatStringProp, k = b.converterHelper.getPivotedCategories(a, j), l = k.categories, m = k.categoryIdentities, n = a.categories && a.categories.length > 0 ? a.categories[0].source : void 0, o = g.increaseFill.solid.color, p = g.decreaseFill.solid.color, q = g.totalFill.solid.color, r = [ {
                    label: e.getLocalizedString(c.IncreaseLabel),
                    color: o,
                    icon: 0,
                    identity: _.isEmpty(m) ? b.SelectionId.createNull() : b.SelectionId.createWithId(m[0]),
                    selected: !1
                }, {
                    label: e.getLocalizedString(c.DecreaseLabel),
                    color: p,
                    icon: 0,
                    identity: _.isEmpty(m) ? b.SelectionId.createNull() : b.SelectionId.createWithId(m[0]),
                    selected: !1
                } ], s = 0, t = 0, u = 0, v = [], w = null;
                if (a.values && a.values.length > 0) {
                    var x = a.values[0];
                    w = x.source;
                    for (var y = 0, z = x.values.length; z > y; y++) {
                        var A = l[y], B = x.values[y], C = m ? b.SelectionId.createWithId(m[y], !1) : b.SelectionId.createNull(), D = b.TooltipBuilder.createTooltipInfo(j, a.categories, A, a.values, B), E = B > 0 ? o : p;
                        v.push({
                            value: B,
                            position: s,
                            color: E,
                            categoryValue: A,
                            categoryIndex: y,
                            seriesIndex: 0,
                            selected: !1,
                            identity: C,
                            highlight: !1,
                            key: C.getKey(),
                            tooltipInfo: D,
                            labelFill: f.overrideDefaultColor ? f.labelColor : E
                        }), s += B, s > u && (u = s), t > s && (t = s);
                    }
                }
                if (c.showTotal) {
                    var C = b.SelectionId.createNull(), F = e.getLocalizedString(c.TotalLabel), D = b.TooltipBuilder.createTooltipInfo(j, a.categories, F, a.values, s);
                    v.push({
                        value: s,
                        position: 0,
                        color: q,
                        categoryValue: F,
                        categoryIndex: y,
                        identity: C,
                        seriesIndex: 0,
                        selected: !1,
                        highlight: !1,
                        key: C.getKey(),
                        tooltipInfo: D,
                        labelFill: f.overrideDefaultColor ? f.labelColor : g.totalFill.solid.color
                    }), r.push({
                        label: F,
                        color: q,
                        icon: 0,
                        identity: C,
                        selected: !1
                    });
                }
                var G = !1;
                h && h.applySelectionStateToData(v) && (G = !0);
                var H = b.CartesianHelper.getCategoryAxisProperties(i), I = b.CartesianHelper.getValueAxisProperties(i), J = [];
                J.push(w);
                var K = b.converterHelper.createAxesLabels(H, I, n, J);
                return {
                    series: [ {
                        data: v
                    } ],
                    categories: l,
                    categoryMetadata: n,
                    valuesMetadata: w,
                    legend: {
                        dataPoints: r
                    },
                    hasHighlights: !1,
                    positionMin: t,
                    positionMax: u,
                    dataLabelsSettings: f,
                    sentimentColors: g,
                    axesLabels: {
                        x: K.xAxisLabel,
                        y: K.yAxisLabel
                    },
                    hasSelection: G
                };
            }, c.prototype.setData = function(a) {
                var d = this.getSentimentColorsFromObjects(null);
                if (this.data = {
                    series: [ {
                        data: []
                    } ],
                    categories: [],
                    valuesMetadata: null,
                    legend: {
                        dataPoints: []
                    },
                    hasHighlights: !1,
                    categoryMetadata: null,
                    scalarCategoryAxis: !1,
                    positionMax: 0,
                    positionMin: 0,
                    dataLabelsSettings: b.dataLabelUtils.getDefaultLabelSettings(),
                    sentimentColors: d,
                    axesLabels: {
                        x: null,
                        y: null
                    },
                    hasSelection: !1
                }, a.length > 0) {
                    var e = a[0];
                    if (e) {
                        if (e.metadata && e.metadata.objects) {
                            var f = e.metadata.objects, g = f.labels;
                            g && (void 0 !== g.show && (this.data.dataLabelsSettings.show = g.show), void 0 !== g.color && (this.data.dataLabelsSettings.labelColor = g.color.solid.color, 
                            this.data.dataLabelsSettings.overrideDefaultColor = !0), void 0 !== g.labelDisplayUnits && (this.data.dataLabelsSettings.displayUnits = g.labelDisplayUnits), 
                            void 0 !== g.labelPrecision && (this.data.dataLabelsSettings.precision = g.labelPrecision >= 0 ? g.labelPrecision : 0)), 
                            this.data.dataLabelsSettings.formatterOptions = b.dataLabelUtils.getFormatterOptionsColumn(e.metadata.columns), 
                            d = this.getSentimentColorsFromObjects(f);
                        }
                        e.categorical && (this.data = c.converter(e.categorical, this.colors, this.hostServices, this.data.dataLabelsSettings, d, this.interactivityService, e.metadata));
                    }
                }
            }, c.prototype.enumerateObjectInstances = function(a) {
                switch (a.objectName) {
                  case "sentimentColors":
                    return this.enumerateSentimentColors();

                  case "labels":
                    return b.dataLabelUtils.enumerateDataLabels(this.data.dataLabelsSettings, !1, !0, !0);
                }
            }, c.prototype.enumerateSentimentColors = function() {
                var a = [], b = this.data.sentimentColors;
                return a.push({
                    selector: null,
                    properties: {
                        increaseFill: b.increaseFill,
                        decreaseFill: b.decreaseFill,
                        totalFill: b.totalFill
                    },
                    objectName: "sentimentColors"
                }), a;
            }, c.prototype.calculateLegend = function() {
                return this.data.legend;
            }, c.prototype.hasLegend = function() {
                return !0;
            }, c.createClippedDataIfOverflowed = function(b, c) {
                var d = b, e = b.series[0].data;
                return b && c < e.length && (d = a.Prototype.inherit(b), d.series = [ {
                    data: e.slice(0, c)
                } ], d.categories = b.categories.slice(0, c)), d;
            }, c.prototype.calculateAxesProperties = function(a) {
                this.currentViewport = a.viewport;
                var d = this.margin = a.margin, e = this.clippedData = this.data, f = c.showTotal ? e.categories.length + 1 : e.categories.length, g = this.getPreferredPlotArea(!1, f, b.CartesianChart.MinOrdinalRectThickness);
                g.width === this.currentViewport.width && (g.width -= d.left + d.right), g.height -= d.top + d.bottom;
                var h = b.CartesianChart.getLayout(null, {
                    availableWidth: g.width,
                    categoryCount: f,
                    domain: null,
                    isScalar: !1,
                    isScrollable: this.isScrollable
                });
                this.isScrollable || (e = this.clippedData = c.createClippedDataIfOverflowed(e, h.categoryCount));
                var i = c.getXAxisCreationOptions(e, g.width, h, a), j = c.getYAxisCreationOptions(e, g.height, a), k = this.xAxisProperties = b.AxisHelper.createAxis(i), l = this.yAxisProperties = b.AxisHelper.createAxis(j), m = this.xAxisProperties.categoryThickness * (1 - b.CartesianChart.InnerPaddingRatio), n = b.valueFormatter.create(b.dataLabelUtils.getLabelFormatterOptions(this.data.dataLabelsSettings));
                return this.layout = {
                    categoryCount: h.categoryCount,
                    categoryThickness: h.categoryThickness,
                    isScalar: h.isScalar,
                    outerPaddingRatio: h.outerPaddingRatio,
                    categoryWidth: m,
                    labelText: function(a) {
                        return b.dataLabelUtils.getLabelFormattedText(n.format(a.value));
                    },
                    labelLayout: {
                        y: function(a, d) {
                            return c.getRectTop(l.scale, a.position, a.value) - b.dataLabelUtils.labelMargin;
                        },
                        x: function(a, b) {
                            return k.scale(a.categoryIndex) + m / 2;
                        }
                    },
                    filter: function(a) {
                        return null != a;
                    },
                    style: {
                        fill: function(a) {
                            return a.labelFill;
                        }
                    }
                }, this.xAxisProperties.axisLabel = a.showXLabel ? e.axesLabels.x : null, this.yAxisProperties.axisLabel = a.showYLabel ? e.axesLabels.y : null, 
                [ k, l ];
            }, c.lookupXValue = function(a, c, d) {
                var e = a.series[0].data, f = e[c];
                return f && f.categoryValue ? this.showTotal && c === e.length - 1 ? f.categoryValue : b.AxisHelper.isDateTime(d) ? new Date(f.categoryValue) : f.categoryValue : c;
            }, c.getXAxisCreationOptions = function(a, d, e, f) {
                var g = b.AxisHelper.getCategoryValueType(a.categoryMetadata), h = b.AxisHelper.createDomain(a.series, g, !1, f.forcedXDomain), i = e.categoryThickness, j = i * e.outerPaddingRatio;
                return {
                    pixelSpan: d,
                    dataDomain: h,
                    metaDataColumn: a.categoryMetadata,
                    formatStringProp: c.formatStringProp,
                    isScalar: !1,
                    outerPadding: j,
                    categoryThickness: i,
                    getValueFn: function(b, d) {
                        return c.lookupXValue(a, b, d);
                    },
                    forcedTickCount: f.forcedTickCount,
                    isCategoryAxis: !0
                };
            }, c.getYAxisCreationOptions = function(a, d, e) {
                var f = b.AxisHelper.combineDomain(e.forcedYDomain, [ a.positionMin, a.positionMax ]);
                return {
                    pixelSpan: d,
                    dataDomain: f,
                    isScalar: !0,
                    isVertical: !0,
                    metaDataColumn: a.valuesMetadata,
                    formatStringProp: c.formatStringProp,
                    outerPadding: 0,
                    forcedTickCount: e.forcedTickCount,
                    useTickIntervalForDisplayUnits: !0,
                    isCategoryAxis: !1
                };
            }, c.prototype.getPreferredPlotArea = function(a, c, d) {
                return b.CartesianChart.getPreferredPlotArea(c, d, this.currentViewport, this.isScrollable, a);
            }, c.prototype.getVisualCategoryAxisIsScalar = function() {
                return !1;
            }, c.prototype.overrideXScale = function(a) {
                this.xAxisProperties = a;
            }, c.prototype.setFilteredData = function(b, c) {
                var d = this.clippedData = a.Prototype.inherit(this.data);
                return d.series = [ {
                    data: d.series[0].data.slice(b, c)
                } ], d.categories = d.categories.slice(b, c), d;
            }, c.prototype.createRects = function(a) {
                var b = this.mainGraphicsContext, d = b.selectAll(c.CategoryValueClasses.selector), e = d.data(a, function(a) {
                    return a.key;
                });
                return e.enter().append("rect").attr("class", function(a) {
                    return c.CategoryValueClasses["class"].concat(a.highlight ? "highlight" : "");
                }), e.exit().remove(), e;
            }, c.prototype.createConnectors = function(a) {
                var b = this.mainGraphicsContext, d = b.selectAll(c.WaterfallConnectorClasses.selector), e = d.data(a.slice(0, a.length - 1), function(a) {
                    return a.key;
                });
                return e.enter().append("line").classed(c.WaterfallConnectorClasses["class"], !0), 
                e.exit().remove(), e;
            }, c.prototype.render = function(a) {
                var d = this, e = this.clippedData.series[0].data, f = this.createRects(e), g = this.createConnectors(e);
                b.TooltipManager.addTooltip(f, function(a) {
                    return a.data.tooltipInfo;
                });
                var h = this.data.hasSelection, i = this.xAxisProperties.scale, j = this.yAxisProperties.scale, k = j(0);
                if (this.mainGraphicsSVG.attr("height", this.getAvailableHeight()).attr("width", this.getAvailableWidth()), 
                f.style("fill", function(a) {
                    return a.color;
                }).style("fill-opacity", function(a) {
                    return b.ColumnUtil.getFillOpacity(a.selected, a.highlight, h, d.data.hasHighlights);
                }).attr("width", this.layout.categoryWidth).attr("x", function(a) {
                    return i(a.categoryIndex);
                }).attr("y", function(a) {
                    return c.getRectTop(j, a.position, a.value);
                }).attr("height", function(a) {
                    return k - j(Math.abs(a.value));
                }), g.attr({
                    x1: function(a) {
                        return i(a.categoryIndex);
                    },
                    y1: function(a) {
                        return j(a.position + a.value);
                    },
                    x2: function(a) {
                        return i(a.categoryIndex + 1) + d.layout.categoryWidth;
                    },
                    y2: function(a) {
                        return j(a.position + a.value);
                    }
                }), this.data.dataLabelsSettings.show ? b.dataLabelUtils.drawDefaultLabelsForDataPointChart(e, this.dataLabelsSVG, this.layout, this.currentViewport) : b.dataLabelUtils.cleanDataLabels(this.dataLabelsSVG), 
                this.interactivityService) {
                    var l = {
                        bars: f,
                        datapoints: e,
                        clearCatcher: this.clearCatcher
                    };
                    this.interactivityService.apply(this, l);
                }
                b.SVGUtil.flushAllD3TransitionsIfNeeded(this.options);
            }, c.prototype.onClearSelection = function() {
                this.interactivityService && this.interactivityService.clearSelection();
            }, c.prototype.accept = function(a, b) {
                a.visitWaterfallChart(b);
            }, c.prototype.getSupportedCategoryAxisType = function() {
                return a.axisType.categorical;
            }, c.getRectTop = function(a, b, c) {
                return 0 > c ? a(b) : a(b) - (a(0) - a(c));
            }, c.prototype.getAvailableWidth = function() {
                return this.currentViewport.width - (this.margin.left + this.margin.right);
            }, c.prototype.getAvailableHeight = function() {
                return this.currentViewport.height - (this.margin.top + this.margin.bottom);
            }, c.prototype.getSentimentColorsFromObjects = function(d) {
                var e = this.colors.getSentimentColors(), f = a.DataViewObjects.getFillColor(d, b.waterfallChartProps.sentimentColors.increaseFill, e[2].value), g = a.DataViewObjects.getFillColor(d, b.waterfallChartProps.sentimentColors.decreaseFill, e[0].value), h = a.DataViewObjects.getFillColor(d, b.waterfallChartProps.sentimentColors.totalFill, c.defaultTotalColor);
                return {
                    increaseFill: {
                        solid: {
                            color: f
                        }
                    },
                    decreaseFill: {
                        solid: {
                            color: g
                        }
                    },
                    totalFill: {
                        solid: {
                            color: h
                        }
                    }
                };
            }, c.formatStringProp = {
                objectName: "general",
                propertyName: "formatString"
            }, c.WaterfallClassName = "waterfallChart", c.MainGraphicsContextClassName = "mainGraphicsContext", 
            c.DataLabelsSVGClassName = "dataLabelsSVG", c.IncreaseLabel = "Waterfall_IncreaseLabel", 
            c.DecreaseLabel = "Waterfall_DecreaseLabel", c.TotalLabel = "Waterfall_TotalLabel", 
            c.CategoryValueClasses = {
                "class": "column",
                selector: ".column"
            }, c.WaterfallConnectorClasses = {
                "class": "waterfall-connector",
                selector: ".waterfall-connector"
            }, c.defaultTotalColor = "#00b8aa", c.showTotal = !0, c;
        }();
        b.WaterfallChart = c;
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(a) {
        var b;
        !function(b) {
            b.animatedNumber = {
                name: "animatedNumber",
                capabilities: a.AnimatedNumber.capabilities,
                create: function() {
                    return new a.AnimatedNumber();
                }
            }, b.areaChart = {
                name: "areaChart",
                watermarkKey: "area",
                capabilities: a.lineChartCapabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 1
                    });
                },
                customizeQuery: a.LineChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.barChart = {
                name: "barChart",
                watermarkKey: "bar",
                capabilities: a.getColumnChartCapabilities(!0),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 5
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.card = {
                name: "card",
                watermarkKey: "card",
                capabilities: a.Card.capabilities,
                create: function() {
                    return new a.Card();
                }
            }, b.multiRowCard = {
                name: "multiRowCard",
                watermarkKey: "multiRowCard",
                capabilities: a.MultiRowCard.capabilities,
                create: function() {
                    return new a.MultiRowCard();
                }
            }, b.clusteredBarChart = {
                name: "clusteredBarChart",
                watermarkKey: "clusteredBar",
                capabilities: a.getColumnChartCapabilities(!0),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 4
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.clusteredColumnChart = {
                name: "clusteredColumnChart",
                watermarkKey: "clusteredColumn",
                capabilities: a.getColumnChartCapabilities(),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 2
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.columnChart = {
                name: "columnChart",
                watermarkKey: "column",
                capabilities: a.getColumnChartCapabilities(),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 3
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.comboChart = {
                name: "comboChart",
                watermarkKey: "combo",
                capabilities: a.ComboChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 9
                    });
                }
            }, b.dataDotChart = {
                name: "dataDotChart",
                capabilities: a.DataDotChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 10
                    });
                }
            }, b.dataDotClusteredColumnComboChart = {
                name: "dataDotClusteredColumnComboChart",
                watermarkKey: "combo",
                capabilities: a.ComboChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 14
                    });
                }
            }, b.dataDotStackedColumnComboChart = {
                name: "dataDotStackedColumnComboChart",
                watermarkKey: "combo",
                capabilities: a.ComboChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 15
                    });
                }
            }, b.donutChart = {
                name: "donutChart",
                watermarkKey: "donut",
                capabilities: a.donutChartCapabilities,
                create: function() {
                    return new a.DonutChart();
                }
            }, b.funnel = {
                name: "funnel",
                watermarkKey: "funnel",
                capabilities: a.funnelChartCapabilities,
                create: function() {
                    return new a.FunnelChart();
                }
            }, b.gauge = {
                name: "gauge",
                watermarkKey: "gauge",
                capabilities: a.Gauge.capabilities,
                create: function() {
                    return new a.Gauge();
                }
            }, b.hundredPercentStackedBarChart = {
                name: "hundredPercentStackedBarChart",
                watermarkKey: "100stackedbar",
                capabilities: a.getColumnChartCapabilities(!0),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 6
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.hundredPercentStackedColumnChart = {
                name: "hundredPercentStackedColumnChart",
                watermarkKey: "100stackedcolumn",
                capabilities: a.getColumnChartCapabilities(),
                create: function() {
                    return new a.CartesianChart({
                        chartType: 7
                    });
                },
                customizeQuery: a.ColumnChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.image = {
                name: "image",
                capabilities: a.ImageVisual.capabilities,
                create: function() {
                    return new a.ImageVisual();
                }
            }, b.lineChart = {
                name: "lineChart",
                watermarkKey: "line",
                capabilities: a.lineChartCapabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 0
                    });
                },
                customizeQuery: a.LineChart.customizeQuery,
                getSortableRoles: function(b) {
                    return a.LineChart.getSortableRoles(b);
                }
            }, b.lineStackedColumnComboChart = {
                name: "lineStackedColumnComboChart",
                watermarkKey: "combo",
                capabilities: a.ComboChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 13
                    });
                },
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.lineClusteredColumnComboChart = {
                name: "lineClusteredColumnComboChart",
                watermarkKey: "combo",
                capabilities: a.ComboChart.capabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 12
                    });
                },
                getSortableRoles: function(b) {
                    return a.ColumnChart.getSortableRoles(b);
                }
            }, b.map = {
                name: "map",
                watermarkKey: "map",
                capabilities: a.mapCapabilities,
                create: function() {
                    return new a.Map({
                        filledMap: !1
                    });
                }
            }, b.filledMap = {
                name: "filledMap",
                watermarkKey: "map",
                capabilities: a.filledMapCapabilities,
                create: function() {
                    return new a.Map({
                        filledMap: !0
                    });
                }
            }, b.treemap = {
                name: "treemap",
                watermarkKey: "tree",
                capabilities: a.treemapCapabilities,
                create: function() {
                    return new a.Treemap();
                }
            }, b.pieChart = {
                name: "pieChart",
                watermarkKey: "pie",
                capabilities: a.donutChartCapabilities,
                create: function() {
                    return new a.DonutChart({
                        sliceWidthRatio: 0
                    });
                }
            }, b.scatterChart = {
                name: "scatterChart",
                watermarkKey: "scatterplot",
                capabilities: a.scatterChartCapabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 8
                    });
                }
            }, b.table = {
                name: "table",
                watermarkKey: "table",
                capabilities: a.Table.capabilities,
                create: function() {
                    return new a.Table();
                },
                customizeQuery: a.Table.customizeQuery,
                getSortableRoles: function(b) {
                    return a.Table.getSortableRoles();
                }
            }, b.matrix = {
                name: "matrix",
                watermarkKey: "matrix",
                capabilities: a.Matrix.capabilities,
                create: function() {
                    return new a.Matrix();
                },
                customizeQuery: a.Matrix.customizeQuery,
                getSortableRoles: function(b) {
                    return a.Matrix.getSortableRoles();
                }
            }, b.slicer = {
                name: "slicer",
                watermarkKey: "slicer",
                capabilities: a.slicerCapabilities,
                create: function() {
                    return new a.Slicer();
                }
            }, b.textbox = {
                name: "textbox",
                capabilities: a.RichTextbox.capabilities,
                create: function() {
                    return new a.RichTextbox();
                }
            }, b.waterfallChart = {
                name: "waterfallChart",
                watermarkKey: "waterfall",
                capabilities: a.waterfallChartCapabilities,
                create: function() {
                    return new a.CartesianChart({
                        chartType: 11
                    });
                }
            }, b.cheerMeter = {
                name: "cheerMeter",
                capabilities: a.CheerMeter.capabilities,
                create: function() {
                    return new a.CheerMeter();
                }
            };
        }(b = a.plugins || (a.plugins = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));

var powerbi;

!function(a) {
    var b;
    !function(b) {
        var c, d = a.visuals.controls.TouchUtils;
        !function(a) {
            a[a.TopLeft = 0] = "TopLeft", a[a.TopRight = 1] = "TopRight", a[a.BottomRight = 2] = "BottomRight", 
            a[a.BottomLeft = 3] = "BottomLeft";
        }(c || (c = {}));
        var e = function() {
            function a(b) {
                this.tooltipOptions = b, this.isTooltipVisible = !1, b || (this.tooltipOptions = a.DefaultTooltipOptions);
            }
            return a.prototype.isTooltipComponentVisible = function() {
                return this.isTooltipVisible;
            }, a.prototype.setTestScreenSize = function(a, b) {
                this.customScreenWidth = a, this.customScreenHeight = b;
            }, a.prototype.show = function(a, b) {
                this.isTooltipVisible = !0, this.tooltipContainer || (this.tooltipContainer = this.createTooltipContainer()), 
                this.setTooltipContent(a), this.tooltipContainer.style("visibility", "visible").transition().duration(0).style("opacity", this.tooltipOptions.opacity), 
                this.setPosition(b);
            }, a.prototype.move = function(a, b) {
                this.isTooltipVisible && (a && this.setTooltipContent(a), this.setPosition(b));
            }, a.prototype.hide = function() {
                this.isTooltipVisible && (this.isTooltipVisible = !1, this.tooltipContainer.transition().duration(this.tooltipOptions.animationDuration).style("opacity", 0).each("end", function() {
                    this.style.visibility = "hidden";
                }));
            }, a.prototype.createTooltipContainer = function() {
                var b = d3.select(a.parentContainerSelector).append("div").attr("class", a.containerClassName);
                return b.append("div").attr("class", a.arrowClassName), b.append("div").attr("class", a.contentContainerClassName), 
                b;
            }, a.prototype.setTooltipContent = function(b) {
                var c = "." + a.tooltipRowClassName, d = this.tooltipContainer.select("." + a.contentContainerClassName);
                d.selectAll(".tooltip-row").remove();
                var e = d.selectAll(c).data(b), f = e.enter().append("div").attr("class", a.tooltipRowClassName), g = f.append("div").attr("class", a.tooltipTitleCellClassName), h = f.append("div").attr("class", a.tooltipValueCellClassName);
                g.text(function(a) {
                    return a.displayName;
                }), h.text(function(a) {
                    return a.value;
                });
            }, a.prototype.getTooltipPosition = function(a, b) {
                var c = this.tooltipContainer.node().getBoundingClientRect(), e = Math.floor(a.width / 2), f = 0, g = 0, h = new d.Point(a.x + e, a.y + e), i = 7;
                return 0 === b ? (f += 3 * i + e, g -= 2 * i + e) : 1 === b ? (f -= 2 * i + c.width + e, 
                g -= 2 * i + e) : 3 === b ? (f += 3 * i + e, g -= c.height - 2 * i + e) : 2 === b && (f -= 2 * i + c.width + e, 
                g -= c.height - 2 * i + e), h.offset(f, g), h;
            }, a.prototype.setPosition = function(a) {
                var b = this.getClickedScreenArea(a), c = this.getTooltipPosition(a, b);
                this.tooltipContainer.style({
                    left: c.x + "px",
                    top: c.y + "px"
                }), this.setArrowPosition(a, b);
            }, a.prototype.setArrowPosition = function(a, b) {
                var c, d = this.getArrowElement();
                0 === b ? c = "top left" : 1 === b ? c = "top right" : 3 === b ? c = "bottom left" : 2 === b && (c = "bottom right"), 
                d.attr("class", "arrow").classed(c, !0);
            }, a.prototype.getArrowElement = function() {
                return this.tooltipContainer.select("." + a.arrowClassName);
            }, a.prototype.getClickedScreenArea = function(a) {
                var b = this.customScreenWidth || window.innerWidth, c = this.customScreenHeight || window.innerHeight, e = a.width / 2, f = new d.Point(a.x + e, a.y + e), g = b / 2, h = c / 2;
                return f.x < g && f.y < h ? 0 : f.x >= g && f.y < h ? 1 : f.x < g && f.y >= h ? 3 : f.x >= g && f.y >= h ? 2 : void 0;
            }, a.DefaultTooltipOptions = {
                opacity: 1,
                animationDuration: 250,
                offsetX: 10,
                offsetY: 10
            }, a.containerClassName = "tooltip-container", a.contentContainerClassName = "tooltip-content-container", 
            a.arrowClassName = "arrow", a.tooltipRowClassName = "tooltip-row", a.tooltipTitleCellClassName = "tooltip-title-cell", 
            a.tooltipValueCellClassName = "tooltip-value-cell", a.parentContainerSelector = "body", 
            a.highlightedValueDisplayNameResorceKey = "Tooltip_HighlightedValueDisplayName", 
            a;
        }();
        b.ToolTipComponent = e;
        var f;
        !function(a) {
            function b(b, d, f) {
                if (a.ShowTooltips) {
                    var g = d3.select(e.parentContainerSelector).node(), q = m(), w = n(), x = "pointerdown" === q || "MSPointerDown" === q;
                    b.on("mouseover", function(a, b) {
                        if (l(d3.event)) {
                            s = o(g, !0);
                            var e = o(this, !0), f = {
                                data: a,
                                index: b,
                                coordinates: s,
                                elementCoordinates: e,
                                context: this,
                                isTouchEvent: !1
                            };
                            j(), r = c(f, d, u);
                        }
                    }), b.on("mouseout", function(a, b) {
                        j(), i();
                    }), b.on("mousemove", function(a, b) {
                        if (l(d3.event)) {
                            s = o(g, !0);
                            var c = o(this, !0), e = {
                                data: a,
                                index: b,
                                coordinates: s,
                                elementCoordinates: c,
                                context: this,
                                isTouchEvent: !1
                            };
                            h(e, d, f);
                        }
                    }), t || (p(q), t = !0), b.on(q, function(a, b) {
                        k(d3.event), i();
                        var e = o(g, x), f = o(this, x), h = {
                            data: a,
                            index: b,
                            coordinates: e,
                            elementCoordinates: f,
                            context: this,
                            isTouchEvent: !0
                        };
                        j(), r = c(h, d, v);
                    }), b.on(w, function(a, b) {
                        j();
                    });
                }
            }
            function c(a, b, c) {
                return setTimeout(function() {
                    return g(a, b);
                }, c);
            }
            function f(a) {
                e.localizationOptions = a;
            }
            function g(b, c) {
                var d = c(b);
                if (d) {
                    var e = s || b.coordinates, f = q(e[0], e[1], b.isTouchEvent);
                    a.ToolTipInstance.show(d, f);
                }
            }
            function h(b, c, d) {
                var e;
                d && (e = c(b));
                var f = q(b.coordinates[0], b.coordinates[1], b.isTouchEvent);
                a.ToolTipInstance.move(e, f);
            }
            function i() {
                a.ToolTipInstance.hide();
            }
            function j() {
                r && clearTimeout(r);
            }
            function k(a) {
                a.preventDefault(), a.stopPropagation();
            }
            function l(a) {
                var b = !0, c = a;
                if (void 0 !== c.buttons) {
                    var d = 0 !== c.buttons;
                    b = !d;
                }
                return b;
            }
            function m() {
                var a = "touchstart";
                return window.PointerEvent ? a = "pointerdown" : window.MSPointerEvent && (a = "MSPointerDown"), 
                a;
            }
            function n() {
                var a = "touchend";
                return window.PointerEvent ? a = "pointerup" : window.MSPointerEvent && (a = "MSPointerUp"), 
                a;
            }
            function o(a, b) {
                var c;
                if (b) c = d3.mouse(a); else {
                    var d = d3.touches(a);
                    d && d.length > 0 && (c = d[0]);
                }
                return c;
            }
            function p(b) {
                d3.select(e.parentContainerSelector).on(b, function(b, c) {
                    a.ToolTipInstance.hide();
                });
            }
            function q(a, b, c) {
                var e = 0, f = a, g = b;
                if (c) {
                    e = 12;
                    var h = e / 2;
                    f = Math.max(a - h, 0), g = Math.max(b - h, 0);
                }
                return new d.Rectangle(f, g, e, e);
            }
            a.ShowTooltips = !0, a.ToolTipInstance = new e();
            var r, s, t = !1, u = 500, v = 500;
            a.addTooltip = b, a.showDelayedTooltip = c, a.setLocalizedStrings = f;
        }(f = b.TooltipManager || (b.TooltipManager = {}));
        var g;
        !function(a) {
            function c(a, b, c, e, f, g, h, i) {
                var j, k = [], l = void 0;
                if (h = 0 | h, b && b.length > 0 && (j = {
                    value: c,
                    metadata: b[0].source
                }), e && (j && j.metadata === e.source || (l = e.source)), g) for (var m = 0, n = g.length; n > m; m++) {
                    var o = g[m];
                    j && j.metadata === o.metadata.source || k.push({
                        value: o.value,
                        metadata: o.metadata
                    });
                } else if (e && e.length > 0) {
                    var p = e[h], q = p && p.source ? p.source : null, r = q && q.isAutoGeneratedColumn;
                    r || (k = [ {
                        value: f,
                        highlightedValue: i,
                        metadata: p
                    } ]);
                }
                var s = d(a, j, l, k);
                return s;
            }
            function d(a, b, c, d) {
                var g = [];
                if (b) {
                    var h = f(b.metadata, a, b.value);
                    g.push({
                        displayName: b.metadata.displayName,
                        value: h
                    });
                }
                if (c) {
                    var i;
                    if (d.length > 0) {
                        var j = d[0].metadata.source;
                        i = f(j, a, j.groupName);
                    }
                    g.push({
                        displayName: c.displayName,
                        value: i
                    });
                }
                for (var k = 0; k < d.length; k++) {
                    var l = d[k];
                    if (l && l.metadata) {
                        var m = l.metadata.source, n = l.value, o = l.highlightedValue;
                        if (n || 0 === n) {
                            var p = f(m, a, n);
                            g.push({
                                displayName: m.displayName,
                                value: p
                            });
                        }
                        if (o || 0 === o) {
                            var q = f(m, a, o), r = e.localizationOptions.highlightedValueDisplayName;
                            g.push({
                                displayName: r,
                                value: q
                            });
                        }
                    }
                }
                return g;
            }
            function f(a, c, d) {
                var e = g(a, c);
                return b.valueFormatter.format(d, e);
            }
            function g(a, c) {
                if (a) {
                    var d = b.valueFormatter.getFormatString(a, c, !0);
                    return d || a.format;
                }
                return null;
            }
            a.createTooltipInfo = c;
        }(g = b.TooltipBuilder || (b.TooltipBuilder = {}));
    }(b = a.visuals || (a.visuals = {}));
}(powerbi || (powerbi = {}));
//# sourceMappingURL=visuals.min.js.map